
Snake.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c8  00800100  000035b6  0000364a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  008003c8  008003c8  00003912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a00  00000000  00000000  00003b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009eb  00000000  00000000  00005534  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a0b  00000000  00000000  00005f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  0000792c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6f  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f16  00000000  00000000  00008ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000099d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	99 c1       	rjmp	.+818    	; 0x368 <__vector_13>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	cd 0a       	sbc	r12, r29
      8e:	0b 0b       	sbc	r16, r27
      90:	4f 0b       	sbc	r20, r31
      92:	83 0b       	sbc	r24, r19
      94:	f8 0c       	add	r15, r8
      96:	45 0d       	add	r20, r5
      98:	9e 0d       	add	r25, r14
      9a:	02 0e       	add	r0, r18
      9c:	24 0e       	add	r2, r20
      9e:	2f 0e       	add	r2, r31
      a0:	45 0e       	add	r4, r21

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e4       	ldi	r29, 0x40	; 64
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	13 e0       	ldi	r17, 0x03	; 3
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	e6 eb       	ldi	r30, 0xB6	; 182
      b6:	f5 e3       	ldi	r31, 0x35	; 53
      b8:	00 e0       	ldi	r16, 0x00	; 0
      ba:	0b bf       	out	0x3b, r16	; 59
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
      be:	07 90       	elpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	a8 3c       	cpi	r26, 0xC8	; 200
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
      c8:	24 e0       	ldi	r18, 0x04	; 4
      ca:	a8 ec       	ldi	r26, 0xC8	; 200
      cc:	b3 e0       	ldi	r27, 0x03	; 3
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a8 35       	cpi	r26, 0x58	; 88
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	0e 94 81 13 	call	0x2702	; 0x2702 <main>
      dc:	0c 94 d9 1a 	jmp	0x35b2	; 0x35b2 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <setBit>:
}

void PWM_off() {
	TCCR3A = 0x00;
	TCCR3B = 0x00;
}
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	00 d0       	rcall	.+0      	; 0xe8 <setBit+0x6>
      e8:	00 d0       	rcall	.+0      	; 0xea <setBit+0x8>
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	8a 83       	std	Y+2, r24	; 0x02
      f0:	6b 83       	std	Y+3, r22	; 0x03
      f2:	4c 83       	std	Y+4, r20	; 0x04
      f4:	19 82       	std	Y+1, r1	; 0x01
      f6:	8c 81       	ldd	r24, Y+4	; 0x04
      f8:	81 30       	cpi	r24, 0x01	; 1
      fa:	79 f4       	brne	.+30     	; 0x11a <setBit+0x38>
      fc:	8b 81       	ldd	r24, Y+3	; 0x03
      fe:	28 2f       	mov	r18, r24
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <setBit+0x2a>
     108:	88 0f       	add	r24, r24
     10a:	99 1f       	adc	r25, r25
     10c:	2a 95       	dec	r18
     10e:	e2 f7       	brpl	.-8      	; 0x108 <setBit+0x26>
     110:	98 2f       	mov	r25, r24
     112:	8a 81       	ldd	r24, Y+2	; 0x02
     114:	89 2b       	or	r24, r25
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	12 c0       	rjmp	.+36     	; 0x13e <setBit+0x5c>
     11a:	8c 81       	ldd	r24, Y+4	; 0x04
     11c:	88 23       	and	r24, r24
     11e:	79 f4       	brne	.+30     	; 0x13e <setBit+0x5c>
     120:	8b 81       	ldd	r24, Y+3	; 0x03
     122:	28 2f       	mov	r18, r24
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <setBit+0x4e>
     12c:	88 0f       	add	r24, r24
     12e:	99 1f       	adc	r25, r25
     130:	2a 95       	dec	r18
     132:	e2 f7       	brpl	.-8      	; 0x12c <setBit+0x4a>
     134:	98 2f       	mov	r25, r24
     136:	90 95       	com	r25
     138:	8a 81       	ldd	r24, Y+2	; 0x02
     13a:	89 23       	and	r24, r25
     13c:	89 83       	std	Y+1, r24	; 0x01
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	df 91       	pop	r29
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <MAX7219transmit_data>:
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	00 d0       	rcall	.+0      	; 0x158 <MAX7219transmit_data+0xa>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	8a 83       	std	Y+2, r24	; 0x02
     15e:	19 82       	std	Y+1, r1	; 0x01
     160:	36 c0       	rjmp	.+108    	; 0x1ce <MAX7219transmit_data+0x80>
     162:	05 e2       	ldi	r16, 0x25	; 37
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	85 e2       	ldi	r24, 0x25	; 37
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	fc 01       	movw	r30, r24
     16c:	80 81       	ld	r24, Z
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	b7 df       	rcall	.-146    	; 0xe2 <setBit>
     174:	f8 01       	movw	r30, r16
     176:	80 83       	st	Z, r24
     178:	8a 81       	ldd	r24, Y+2	; 0x02
     17a:	88 23       	and	r24, r24
     17c:	64 f4       	brge	.+24     	; 0x196 <MAX7219transmit_data+0x48>
     17e:	05 e2       	ldi	r16, 0x25	; 37
     180:	10 e0       	ldi	r17, 0x00	; 0
     182:	85 e2       	ldi	r24, 0x25	; 37
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	fc 01       	movw	r30, r24
     188:	80 81       	ld	r24, Z
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	62 e0       	ldi	r22, 0x02	; 2
     18e:	a9 df       	rcall	.-174    	; 0xe2 <setBit>
     190:	f8 01       	movw	r30, r16
     192:	80 83       	st	Z, r24
     194:	0b c0       	rjmp	.+22     	; 0x1ac <MAX7219transmit_data+0x5e>
     196:	05 e2       	ldi	r16, 0x25	; 37
     198:	10 e0       	ldi	r17, 0x00	; 0
     19a:	85 e2       	ldi	r24, 0x25	; 37
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	fc 01       	movw	r30, r24
     1a0:	80 81       	ld	r24, Z
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	62 e0       	ldi	r22, 0x02	; 2
     1a6:	9d df       	rcall	.-198    	; 0xe2 <setBit>
     1a8:	f8 01       	movw	r30, r16
     1aa:	80 83       	st	Z, r24
     1ac:	05 e2       	ldi	r16, 0x25	; 37
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	85 e2       	ldi	r24, 0x25	; 37
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	fc 01       	movw	r30, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	41 e0       	ldi	r20, 0x01	; 1
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	92 df       	rcall	.-220    	; 0xe2 <setBit>
     1be:	f8 01       	movw	r30, r16
     1c0:	80 83       	st	Z, r24
     1c2:	89 81       	ldd	r24, Y+1	; 0x01
     1c4:	8f 5f       	subi	r24, 0xFF	; 255
     1c6:	89 83       	std	Y+1, r24	; 0x01
     1c8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ca:	88 0f       	add	r24, r24
     1cc:	8a 83       	std	Y+2, r24	; 0x02
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	88 30       	cpi	r24, 0x08	; 8
     1d2:	38 f2       	brcs	.-114    	; 0x162 <MAX7219transmit_data+0x14>
     1d4:	00 00       	nop
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	df 91       	pop	r29
     1dc:	cf 91       	pop	r28
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	08 95       	ret

000001e4 <matrix_write>:
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <matrix_write+0xa>
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	89 83       	std	Y+1, r24	; 0x01
     1f4:	6a 83       	std	Y+2, r22	; 0x02
     1f6:	05 e2       	ldi	r16, 0x25	; 37
     1f8:	10 e0       	ldi	r17, 0x00	; 0
     1fa:	85 e2       	ldi	r24, 0x25	; 37
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	fc 01       	movw	r30, r24
     200:	80 81       	ld	r24, Z
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	6d df       	rcall	.-294    	; 0xe2 <setBit>
     208:	f8 01       	movw	r30, r16
     20a:	80 83       	st	Z, r24
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	9f df       	rcall	.-194    	; 0x14e <MAX7219transmit_data>
     210:	8a 81       	ldd	r24, Y+2	; 0x02
     212:	9d df       	rcall	.-198    	; 0x14e <MAX7219transmit_data>
     214:	05 e2       	ldi	r16, 0x25	; 37
     216:	10 e0       	ldi	r17, 0x00	; 0
     218:	85 e2       	ldi	r24, 0x25	; 37
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	41 e0       	ldi	r20, 0x01	; 1
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	5e df       	rcall	.-324    	; 0xe2 <setBit>
     226:	f8 01       	movw	r30, r16
     228:	80 83       	st	Z, r24
     22a:	00 00       	nop
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	08 95       	ret

0000023a <matrix_clear>:
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	1f 92       	push	r1
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	19 82       	std	Y+1, r1	; 0x01
     246:	07 c0       	rjmp	.+14     	; 0x256 <matrix_clear+0x1c>
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	ca df       	rcall	.-108    	; 0x1e4 <matrix_write>
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	88 30       	cpi	r24, 0x08	; 8
     25a:	b0 f3       	brcs	.-20     	; 0x248 <matrix_clear+0xe>
     25c:	00 00       	nop
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <matrix_init>:
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	85 e2       	ldi	r24, 0x25	; 37
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	fc 01       	movw	r30, r24
     276:	80 81       	ld	r24, Z
     278:	41 e0       	ldi	r20, 0x01	; 1
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	32 df       	rcall	.-412    	; 0xe2 <setBit>
     27e:	18 2f       	mov	r17, r24
     280:	85 e2       	ldi	r24, 0x25	; 37
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	fc 01       	movw	r30, r24
     286:	80 81       	ld	r24, Z
     288:	41 e0       	ldi	r20, 0x01	; 1
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	2a df       	rcall	.-428    	; 0xe2 <setBit>
     28e:	18 2b       	or	r17, r24
     290:	85 e2       	ldi	r24, 0x25	; 37
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	fc 01       	movw	r30, r24
     296:	80 81       	ld	r24, Z
     298:	41 e0       	ldi	r20, 0x01	; 1
     29a:	62 e0       	ldi	r22, 0x02	; 2
     29c:	22 df       	rcall	.-444    	; 0xe2 <setBit>
     29e:	81 2b       	or	r24, r17
     2a0:	48 2f       	mov	r20, r24
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	84 e2       	ldi	r24, 0x24	; 36
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	24 e2       	ldi	r18, 0x24	; 36
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	f9 01       	movw	r30, r18
     2ae:	20 81       	ld	r18, Z
     2b0:	32 2f       	mov	r19, r18
     2b2:	24 2f       	mov	r18, r20
     2b4:	23 2b       	or	r18, r19
     2b6:	fc 01       	movw	r30, r24
     2b8:	20 83       	st	Z, r18
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	89 e0       	ldi	r24, 0x09	; 9
     2be:	92 df       	rcall	.-220    	; 0x1e4 <matrix_write>
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	8a e0       	ldi	r24, 0x0A	; 10
     2c4:	8f df       	rcall	.-226    	; 0x1e4 <matrix_write>
     2c6:	67 e0       	ldi	r22, 0x07	; 7
     2c8:	8b e0       	ldi	r24, 0x0B	; 11
     2ca:	8c df       	rcall	.-232    	; 0x1e4 <matrix_write>
     2cc:	61 e0       	ldi	r22, 0x01	; 1
     2ce:	8c e0       	ldi	r24, 0x0C	; 12
     2d0:	89 df       	rcall	.-238    	; 0x1e4 <matrix_write>
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	8f e0       	ldi	r24, 0x0F	; 15
     2d6:	86 df       	rcall	.-244    	; 0x1e4 <matrix_write>
     2d8:	b0 df       	rcall	.-160    	; 0x23a <matrix_clear>
     2da:	00 00       	nop
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <TimerOn>:
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	81 e8       	ldi	r24, 0x81	; 129
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2b e0       	ldi	r18, 0x0B	; 11
     2f2:	fc 01       	movw	r30, r24
     2f4:	20 83       	st	Z, r18
     2f6:	88 e8       	ldi	r24, 0x88	; 136
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	2d e7       	ldi	r18, 0x7D	; 125
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	fc 01       	movw	r30, r24
     300:	31 83       	std	Z+1, r19	; 0x01
     302:	20 83       	st	Z, r18
     304:	8f e6       	ldi	r24, 0x6F	; 111
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	22 e0       	ldi	r18, 0x02	; 2
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
     30e:	84 e8       	ldi	r24, 0x84	; 132
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	fc 01       	movw	r30, r24
     314:	11 82       	std	Z+1, r1	; 0x01
     316:	10 82       	st	Z, r1
     318:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
     31c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
     320:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
     324:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
     328:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_avr_timer_cntcurr>
     32c:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <_avr_timer_cntcurr+0x1>
     330:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <_avr_timer_cntcurr+0x2>
     334:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <_avr_timer_cntcurr+0x3>
     338:	8f e5       	ldi	r24, 0x5F	; 95
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	2f e5       	ldi	r18, 0x5F	; 95
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	f9 01       	movw	r30, r18
     342:	20 81       	ld	r18, Z
     344:	20 68       	ori	r18, 0x80	; 128
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
     34a:	00 00       	nop
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <TimerISR>:
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <__data_end>
     360:	00 00       	nop
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <__vector_13>:
     368:	1f 92       	push	r1
     36a:	0f 92       	push	r0
     36c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     370:	0f 92       	push	r0
     372:	11 24       	eor	r1, r1
     374:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     378:	0f 92       	push	r0
     37a:	2f 93       	push	r18
     37c:	3f 93       	push	r19
     37e:	4f 93       	push	r20
     380:	5f 93       	push	r21
     382:	6f 93       	push	r22
     384:	7f 93       	push	r23
     386:	8f 93       	push	r24
     388:	9f 93       	push	r25
     38a:	af 93       	push	r26
     38c:	bf 93       	push	r27
     38e:	ef 93       	push	r30
     390:	ff 93       	push	r31
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
     39a:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_avr_timer_cntcurr>
     39e:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <_avr_timer_cntcurr+0x1>
     3a2:	a0 91 cb 03 	lds	r26, 0x03CB	; 0x8003cb <_avr_timer_cntcurr+0x2>
     3a6:	b0 91 cc 03 	lds	r27, 0x03CC	; 0x8003cc <_avr_timer_cntcurr+0x3>
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	a1 09       	sbc	r26, r1
     3ae:	b1 09       	sbc	r27, r1
     3b0:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_avr_timer_cntcurr>
     3b4:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <_avr_timer_cntcurr+0x1>
     3b8:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <_avr_timer_cntcurr+0x2>
     3bc:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <_avr_timer_cntcurr+0x3>
     3c0:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <_avr_timer_cntcurr>
     3c4:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <_avr_timer_cntcurr+0x1>
     3c8:	a0 91 cb 03 	lds	r26, 0x03CB	; 0x8003cb <_avr_timer_cntcurr+0x2>
     3cc:	b0 91 cc 03 	lds	r27, 0x03CC	; 0x8003cc <_avr_timer_cntcurr+0x3>
     3d0:	89 2b       	or	r24, r25
     3d2:	8a 2b       	or	r24, r26
     3d4:	8b 2b       	or	r24, r27
     3d6:	89 f4       	brne	.+34     	; 0x3fa <__vector_13+0x92>
     3d8:	bc df       	rcall	.-136    	; 0x352 <TimerISR>
     3da:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
     3de:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
     3e2:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
     3e6:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
     3ea:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_avr_timer_cntcurr>
     3ee:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <_avr_timer_cntcurr+0x1>
     3f2:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <_avr_timer_cntcurr+0x2>
     3f6:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <_avr_timer_cntcurr+0x3>
     3fa:	00 00       	nop
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	bf 91       	pop	r27
     406:	af 91       	pop	r26
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	7f 91       	pop	r23
     40e:	6f 91       	pop	r22
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     41e:	0f 90       	pop	r0
     420:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     424:	0f 90       	pop	r0
     426:	1f 90       	pop	r1
     428:	18 95       	reti

0000042a <TimerSet>:
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <TimerSet+0x6>
     430:	00 d0       	rcall	.+0      	; 0x432 <TimerSet+0x8>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	69 83       	std	Y+1, r22	; 0x01
     438:	7a 83       	std	Y+2, r23	; 0x02
     43a:	8b 83       	std	Y+3, r24	; 0x03
     43c:	9c 83       	std	Y+4, r25	; 0x04
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	ab 81       	ldd	r26, Y+3	; 0x03
     444:	bc 81       	ldd	r27, Y+4	; 0x04
     446:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M>
     44a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x1>
     44e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_avr_timer_M+0x2>
     452:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_avr_timer_M+0x3>
     456:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_avr_timer_M>
     45a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_avr_timer_M+0x1>
     45e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_avr_timer_M+0x2>
     462:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_avr_timer_M+0x3>
     466:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <_avr_timer_cntcurr>
     46a:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <_avr_timer_cntcurr+0x1>
     46e:	a0 93 cb 03 	sts	0x03CB, r26	; 0x8003cb <_avr_timer_cntcurr+0x2>
     472:	b0 93 cc 03 	sts	0x03CC, r27	; 0x8003cc <_avr_timer_cntcurr+0x3>
     476:	00 00       	nop
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <adc_init>:
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	8c e7       	ldi	r24, 0x7C	; 124
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	20 e4       	ldi	r18, 0x40	; 64
     494:	fc 01       	movw	r30, r24
     496:	20 83       	st	Z, r18
     498:	8a e7       	ldi	r24, 0x7A	; 122
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	27 e8       	ldi	r18, 0x87	; 135
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
     4a2:	00 00       	nop
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <adc_read>:
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	1f 92       	push	r1
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	87 70       	andi	r24, 0x07	; 7
     4ba:	89 83       	std	Y+1, r24	; 0x01
     4bc:	8c e7       	ldi	r24, 0x7C	; 124
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	2c e7       	ldi	r18, 0x7C	; 124
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	f9 01       	movw	r30, r18
     4c6:	20 81       	ld	r18, Z
     4c8:	32 2f       	mov	r19, r18
     4ca:	38 7f       	andi	r19, 0xF8	; 248
     4cc:	29 81       	ldd	r18, Y+1	; 0x01
     4ce:	23 2b       	or	r18, r19
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
     4d4:	8a e7       	ldi	r24, 0x7A	; 122
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	2a e7       	ldi	r18, 0x7A	; 122
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	f9 01       	movw	r30, r18
     4de:	20 81       	ld	r18, Z
     4e0:	20 64       	ori	r18, 0x40	; 64
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
     4e6:	00 00       	nop
     4e8:	8a e7       	ldi	r24, 0x7A	; 122
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	fc 01       	movw	r30, r24
     4ee:	80 81       	ld	r24, Z
     4f0:	88 2f       	mov	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	80 74       	andi	r24, 0x40	; 64
     4f6:	99 27       	eor	r25, r25
     4f8:	89 2b       	or	r24, r25
     4fa:	b1 f7       	brne	.-20     	; 0x4e8 <adc_read+0x3e>
     4fc:	88 e7       	ldi	r24, 0x78	; 120
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	80 81       	ld	r24, Z
     504:	91 81       	ldd	r25, Z+1	; 0x01
     506:	0f 90       	pop	r0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <NewNode>:
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	00 d0       	rcall	.+0      	; 0x514 <NewNode+0x6>
     514:	00 d0       	rcall	.+0      	; 0x516 <NewNode+0x8>
     516:	00 d0       	rcall	.+0      	; 0x518 <NewNode+0xa>
     518:	cd b7       	in	r28, 0x3d	; 61
     51a:	de b7       	in	r29, 0x3e	; 62
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	8b 83       	std	Y+3, r24	; 0x03
     520:	7e 83       	std	Y+6, r23	; 0x06
     522:	6d 83       	std	Y+5, r22	; 0x05
     524:	86 e0       	ldi	r24, 0x06	; 6
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <malloc>
     52c:	9a 83       	std	Y+2, r25	; 0x02
     52e:	89 83       	std	Y+1, r24	; 0x01
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	2b 81       	ldd	r18, Y+3	; 0x03
     536:	3c 81       	ldd	r19, Y+4	; 0x04
     538:	fc 01       	movw	r30, r24
     53a:	31 83       	std	Z+1, r19	; 0x01
     53c:	20 83       	st	Z, r18
     53e:	89 81       	ldd	r24, Y+1	; 0x01
     540:	9a 81       	ldd	r25, Y+2	; 0x02
     542:	2d 81       	ldd	r18, Y+5	; 0x05
     544:	3e 81       	ldd	r19, Y+6	; 0x06
     546:	fc 01       	movw	r30, r24
     548:	33 83       	std	Z+3, r19	; 0x03
     54a:	22 83       	std	Z+2, r18	; 0x02
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	fc 01       	movw	r30, r24
     552:	15 82       	std	Z+5, r1	; 0x05
     554:	14 82       	std	Z+4, r1	; 0x04
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	26 96       	adiw	r28, 0x06	; 6
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <CreateQueue>:
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <CreateQueue+0x6>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <malloc>
     57e:	9a 83       	std	Y+2, r25	; 0x02
     580:	89 83       	std	Y+1, r24	; 0x01
     582:	89 81       	ldd	r24, Y+1	; 0x01
     584:	9a 81       	ldd	r25, Y+2	; 0x02
     586:	fc 01       	movw	r30, r24
     588:	13 82       	std	Z+3, r1	; 0x03
     58a:	12 82       	std	Z+2, r1	; 0x02
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	fc 01       	movw	r30, r24
     592:	22 81       	ldd	r18, Z+2	; 0x02
     594:	33 81       	ldd	r19, Z+3	; 0x03
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	9a 81       	ldd	r25, Y+2	; 0x02
     59a:	fc 01       	movw	r30, r24
     59c:	31 83       	std	Z+1, r19	; 0x01
     59e:	20 83       	st	Z, r18
     5a0:	89 81       	ldd	r24, Y+1	; 0x01
     5a2:	9a 81       	ldd	r25, Y+2	; 0x02
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <Push>:
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	28 97       	sbiw	r28, 0x08	; 8
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	9c 83       	std	Y+4, r25	; 0x04
     5c4:	8b 83       	std	Y+3, r24	; 0x03
     5c6:	7e 83       	std	Y+6, r23	; 0x06
     5c8:	6d 83       	std	Y+5, r22	; 0x05
     5ca:	58 87       	std	Y+8, r21	; 0x08
     5cc:	4f 83       	std	Y+7, r20	; 0x07
     5ce:	2f 81       	ldd	r18, Y+7	; 0x07
     5d0:	38 85       	ldd	r19, Y+8	; 0x08
     5d2:	8d 81       	ldd	r24, Y+5	; 0x05
     5d4:	9e 81       	ldd	r25, Y+6	; 0x06
     5d6:	b9 01       	movw	r22, r18
     5d8:	9a df       	rcall	.-204    	; 0x50e <NewNode>
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
     5de:	8b 81       	ldd	r24, Y+3	; 0x03
     5e0:	9c 81       	ldd	r25, Y+4	; 0x04
     5e2:	fc 01       	movw	r30, r24
     5e4:	82 81       	ldd	r24, Z+2	; 0x02
     5e6:	93 81       	ldd	r25, Z+3	; 0x03
     5e8:	89 2b       	or	r24, r25
     5ea:	91 f4       	brne	.+36     	; 0x610 <Push+0x62>
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	9c 81       	ldd	r25, Y+4	; 0x04
     5f0:	29 81       	ldd	r18, Y+1	; 0x01
     5f2:	3a 81       	ldd	r19, Y+2	; 0x02
     5f4:	fc 01       	movw	r30, r24
     5f6:	33 83       	std	Z+3, r19	; 0x03
     5f8:	22 83       	std	Z+2, r18	; 0x02
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	fc 01       	movw	r30, r24
     600:	22 81       	ldd	r18, Z+2	; 0x02
     602:	33 81       	ldd	r19, Z+3	; 0x03
     604:	8b 81       	ldd	r24, Y+3	; 0x03
     606:	9c 81       	ldd	r25, Y+4	; 0x04
     608:	fc 01       	movw	r30, r24
     60a:	31 83       	std	Z+1, r19	; 0x01
     60c:	20 83       	st	Z, r18
     60e:	11 c0       	rjmp	.+34     	; 0x632 <Push+0x84>
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	fc 01       	movw	r30, r24
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	93 81       	ldd	r25, Z+3	; 0x03
     61a:	29 81       	ldd	r18, Y+1	; 0x01
     61c:	3a 81       	ldd	r19, Y+2	; 0x02
     61e:	fc 01       	movw	r30, r24
     620:	35 83       	std	Z+5, r19	; 0x05
     622:	24 83       	std	Z+4, r18	; 0x04
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	9c 81       	ldd	r25, Y+4	; 0x04
     628:	29 81       	ldd	r18, Y+1	; 0x01
     62a:	3a 81       	ldd	r19, Y+2	; 0x02
     62c:	fc 01       	movw	r30, r24
     62e:	33 83       	std	Z+3, r19	; 0x03
     630:	22 83       	std	Z+2, r18	; 0x02
     632:	28 96       	adiw	r28, 0x08	; 8
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <Pop>:
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	00 d0       	rcall	.+0      	; 0x64a <Pop+0x6>
     64a:	00 d0       	rcall	.+0      	; 0x64c <Pop+0x8>
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	9c 83       	std	Y+4, r25	; 0x04
     652:	8b 83       	std	Y+3, r24	; 0x03
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	9c 81       	ldd	r25, Y+4	; 0x04
     658:	fc 01       	movw	r30, r24
     65a:	80 81       	ld	r24, Z
     65c:	91 81       	ldd	r25, Z+1	; 0x01
     65e:	89 2b       	or	r24, r25
     660:	19 f4       	brne	.+6      	; 0x668 <Pop+0x24>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	22 c0       	rjmp	.+68     	; 0x6ac <Pop+0x68>
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	9c 81       	ldd	r25, Y+4	; 0x04
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	91 81       	ldd	r25, Z+1	; 0x01
     672:	9a 83       	std	Y+2, r25	; 0x02
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	fc 01       	movw	r30, r24
     67c:	80 81       	ld	r24, Z
     67e:	91 81       	ldd	r25, Z+1	; 0x01
     680:	fc 01       	movw	r30, r24
     682:	24 81       	ldd	r18, Z+4	; 0x04
     684:	35 81       	ldd	r19, Z+5	; 0x05
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	fc 01       	movw	r30, r24
     68c:	31 83       	std	Z+1, r19	; 0x01
     68e:	20 83       	st	Z, r18
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	9c 81       	ldd	r25, Y+4	; 0x04
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	89 2b       	or	r24, r25
     69c:	29 f4       	brne	.+10     	; 0x6a8 <Pop+0x64>
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	fc 01       	movw	r30, r24
     6a4:	13 82       	std	Z+3, r1	; 0x03
     6a6:	12 82       	std	Z+2, r1	; 0x02
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	9a 81       	ldd	r25, Y+2	; 0x02
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <Size>:
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <Size+0x6>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <Size+0x8>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <Size+0xa>
     6c4:	cd b7       	in	r28, 0x3d	; 61
     6c6:	de b7       	in	r29, 0x3e	; 62
     6c8:	9e 83       	std	Y+6, r25	; 0x06
     6ca:	8d 83       	std	Y+5, r24	; 0x05
     6cc:	8d 81       	ldd	r24, Y+5	; 0x05
     6ce:	9e 81       	ldd	r25, Y+6	; 0x06
     6d0:	fc 01       	movw	r30, r24
     6d2:	80 81       	ld	r24, Z
     6d4:	91 81       	ldd	r25, Z+1	; 0x01
     6d6:	9a 83       	std	Y+2, r25	; 0x02
     6d8:	89 83       	std	Y+1, r24	; 0x01
     6da:	1c 82       	std	Y+4, r1	; 0x04
     6dc:	1b 82       	std	Y+3, r1	; 0x03
     6de:	0c c0       	rjmp	.+24     	; 0x6f8 <Size+0x3e>
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	01 96       	adiw	r24, 0x01	; 1
     6e6:	9c 83       	std	Y+4, r25	; 0x04
     6e8:	8b 83       	std	Y+3, r24	; 0x03
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	9a 81       	ldd	r25, Y+2	; 0x02
     6ee:	fc 01       	movw	r30, r24
     6f0:	84 81       	ldd	r24, Z+4	; 0x04
     6f2:	95 81       	ldd	r25, Z+5	; 0x05
     6f4:	9a 83       	std	Y+2, r25	; 0x02
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	89 2b       	or	r24, r25
     6fe:	81 f7       	brne	.-32     	; 0x6e0 <Size+0x26>
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	26 96       	adiw	r28, 0x06	; 6
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	f8 94       	cli
     70a:	de bf       	out	0x3e, r29	; 62
     70c:	0f be       	out	0x3f, r0	; 63
     70e:	cd bf       	out	0x3d, r28	; 61
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	08 95       	ret

00000716 <gcd>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	2c 97       	sbiw	r28, 0x0c	; 12
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	6d 83       	std	Y+5, r22	; 0x05
     72c:	7e 83       	std	Y+6, r23	; 0x06
     72e:	8f 83       	std	Y+7, r24	; 0x07
     730:	98 87       	std	Y+8, r25	; 0x08
     732:	29 87       	std	Y+9, r18	; 0x09
     734:	3a 87       	std	Y+10, r19	; 0x0a
     736:	4b 87       	std	Y+11, r20	; 0x0b
     738:	5c 87       	std	Y+12, r21	; 0x0c
     73a:	8d 81       	ldd	r24, Y+5	; 0x05
     73c:	9e 81       	ldd	r25, Y+6	; 0x06
     73e:	af 81       	ldd	r26, Y+7	; 0x07
     740:	b8 85       	ldd	r27, Y+8	; 0x08
     742:	29 85       	ldd	r18, Y+9	; 0x09
     744:	3a 85       	ldd	r19, Y+10	; 0x0a
     746:	4b 85       	ldd	r20, Y+11	; 0x0b
     748:	5c 85       	ldd	r21, Y+12	; 0x0c
     74a:	bc 01       	movw	r22, r24
     74c:	cd 01       	movw	r24, r26
     74e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <__udivmodsi4>
     752:	dc 01       	movw	r26, r24
     754:	cb 01       	movw	r24, r22
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	ab 83       	std	Y+3, r26	; 0x03
     75c:	bc 83       	std	Y+4, r27	; 0x04
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	9a 81       	ldd	r25, Y+2	; 0x02
     762:	ab 81       	ldd	r26, Y+3	; 0x03
     764:	bc 81       	ldd	r27, Y+4	; 0x04
     766:	89 2b       	or	r24, r25
     768:	8a 2b       	or	r24, r26
     76a:	8b 2b       	or	r24, r27
     76c:	29 f4       	brne	.+10     	; 0x778 <gcd+0x62>
     76e:	89 85       	ldd	r24, Y+9	; 0x09
     770:	9a 85       	ldd	r25, Y+10	; 0x0a
     772:	ab 85       	ldd	r26, Y+11	; 0x0b
     774:	bc 85       	ldd	r27, Y+12	; 0x0c
     776:	11 c0       	rjmp	.+34     	; 0x79a <gcd+0x84>
     778:	89 85       	ldd	r24, Y+9	; 0x09
     77a:	9a 85       	ldd	r25, Y+10	; 0x0a
     77c:	ab 85       	ldd	r26, Y+11	; 0x0b
     77e:	bc 85       	ldd	r27, Y+12	; 0x0c
     780:	8d 83       	std	Y+5, r24	; 0x05
     782:	9e 83       	std	Y+6, r25	; 0x06
     784:	af 83       	std	Y+7, r26	; 0x07
     786:	b8 87       	std	Y+8, r27	; 0x08
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	ab 81       	ldd	r26, Y+3	; 0x03
     78e:	bc 81       	ldd	r27, Y+4	; 0x04
     790:	89 87       	std	Y+9, r24	; 0x09
     792:	9a 87       	std	Y+10, r25	; 0x0a
     794:	ab 87       	std	Y+11, r26	; 0x0b
     796:	bc 87       	std	Y+12, r27	; 0x0c
     798:	d0 cf       	rjmp	.-96     	; 0x73a <gcd+0x24>
     79a:	bc 01       	movw	r22, r24
     79c:	cd 01       	movw	r24, r26
     79e:	2c 96       	adiw	r28, 0x0c	; 12
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	08 95       	ret

000007b0 <findGCD>:
     7b0:	cf 93       	push	r28
     7b2:	df 93       	push	r29
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	28 97       	sbiw	r28, 0x08	; 8
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	9e 83       	std	Y+6, r25	; 0x06
     7c6:	8d 83       	std	Y+5, r24	; 0x05
     7c8:	78 87       	std	Y+8, r23	; 0x08
     7ca:	6f 83       	std	Y+7, r22	; 0x07
     7cc:	8d 81       	ldd	r24, Y+5	; 0x05
     7ce:	9e 81       	ldd	r25, Y+6	; 0x06
     7d0:	fc 01       	movw	r30, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	21 c0       	rjmp	.+66     	; 0x826 <findGCD+0x76>
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	9a 81       	ldd	r25, Y+2	; 0x02
     7e8:	9c 01       	movw	r18, r24
     7ea:	99 0f       	add	r25, r25
     7ec:	44 0b       	sbc	r20, r20
     7ee:	55 0b       	sbc	r21, r21
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	88 0f       	add	r24, r24
     7f6:	99 1f       	adc	r25, r25
     7f8:	6d 81       	ldd	r22, Y+5	; 0x05
     7fa:	7e 81       	ldd	r23, Y+6	; 0x06
     7fc:	86 0f       	add	r24, r22
     7fe:	97 1f       	adc	r25, r23
     800:	fc 01       	movw	r30, r24
     802:	80 81       	ld	r24, Z
     804:	91 81       	ldd	r25, Z+1	; 0x01
     806:	09 2e       	mov	r0, r25
     808:	00 0c       	add	r0, r0
     80a:	aa 0b       	sbc	r26, r26
     80c:	bb 0b       	sbc	r27, r27
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	81 df       	rcall	.-254    	; 0x716 <gcd>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	9c 81       	ldd	r25, Y+4	; 0x04
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	9c 83       	std	Y+4, r25	; 0x04
     824:	8b 83       	std	Y+3, r24	; 0x03
     826:	2b 81       	ldd	r18, Y+3	; 0x03
     828:	3c 81       	ldd	r19, Y+4	; 0x04
     82a:	8f 81       	ldd	r24, Y+7	; 0x07
     82c:	98 85       	ldd	r25, Y+8	; 0x08
     82e:	28 17       	cp	r18, r24
     830:	39 07       	cpc	r19, r25
     832:	c4 f2       	brlt	.-80     	; 0x7e4 <findGCD+0x34>
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	09 2e       	mov	r0, r25
     83a:	00 0c       	add	r0, r0
     83c:	aa 0b       	sbc	r26, r26
     83e:	bb 0b       	sbc	r27, r27
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	28 96       	adiw	r28, 0x08	; 8
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <LCD_ClearScreen>:
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	1a d0       	rcall	.+52     	; 0x896 <LCD_WriteCommand>
     862:	00 00       	nop
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <LCD_init>:
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	84 e6       	ldi	r24, 0x64	; 100
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	ac d0       	rcall	.+344    	; 0x9d0 <delay_ms>
     878:	88 e3       	ldi	r24, 0x38	; 56
     87a:	0d d0       	rcall	.+26     	; 0x896 <LCD_WriteCommand>
     87c:	86 e0       	ldi	r24, 0x06	; 6
     87e:	0b d0       	rcall	.+22     	; 0x896 <LCD_WriteCommand>
     880:	8f e0       	ldi	r24, 0x0F	; 15
     882:	09 d0       	rcall	.+18     	; 0x896 <LCD_WriteCommand>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	07 d0       	rcall	.+14     	; 0x896 <LCD_WriteCommand>
     888:	8a e0       	ldi	r24, 0x0A	; 10
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	a1 d0       	rcall	.+322    	; 0x9d0 <delay_ms>
     88e:	00 00       	nop
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <LCD_WriteCommand>:
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	1f 92       	push	r1
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	8b e2       	ldi	r24, 0x2B	; 43
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	2b e2       	ldi	r18, 0x2B	; 43
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	2f 7b       	andi	r18, 0xBF	; 191
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	88 e2       	ldi	r24, 0x28	; 40
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	29 81       	ldd	r18, Y+1	; 0x01
     8ba:	fc 01       	movw	r30, r24
     8bc:	20 83       	st	Z, r18
     8be:	8b e2       	ldi	r24, 0x2B	; 43
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	2b e2       	ldi	r18, 0x2B	; 43
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	20 68       	ori	r18, 0x80	; 128
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
     8d0:	00 00       	nop
     8d2:	8b e2       	ldi	r24, 0x2B	; 43
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	2b e2       	ldi	r18, 0x2B	; 43
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	2f 77       	andi	r18, 0x7F	; 127
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	73 d0       	rcall	.+230    	; 0x9d0 <delay_ms>
     8ea:	00 00       	nop
     8ec:	0f 90       	pop	r0
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <LCD_WriteData>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	1f 92       	push	r1
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	89 83       	std	Y+1, r24	; 0x01
     900:	8b e2       	ldi	r24, 0x2B	; 43
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2b e2       	ldi	r18, 0x2B	; 43
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	20 64       	ori	r18, 0x40	; 64
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
     912:	88 e2       	ldi	r24, 0x28	; 40
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	29 81       	ldd	r18, Y+1	; 0x01
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
     91c:	8b e2       	ldi	r24, 0x2B	; 43
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	2b e2       	ldi	r18, 0x2B	; 43
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	20 68       	ori	r18, 0x80	; 128
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
     92e:	00 00       	nop
     930:	8b e2       	ldi	r24, 0x2B	; 43
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	2b e2       	ldi	r18, 0x2B	; 43
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	f9 01       	movw	r30, r18
     93a:	20 81       	ld	r18, Z
     93c:	2f 77       	andi	r18, 0x7F	; 127
     93e:	fc 01       	movw	r30, r24
     940:	20 83       	st	Z, r18
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	44 d0       	rcall	.+136    	; 0x9d0 <delay_ms>
     948:	00 00       	nop
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <LCD_DisplayString>:
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	00 d0       	rcall	.+0      	; 0x958 <LCD_DisplayString+0x6>
     958:	00 d0       	rcall	.+0      	; 0x95a <LCD_DisplayString+0x8>
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	8a 83       	std	Y+2, r24	; 0x02
     960:	7c 83       	std	Y+4, r23	; 0x04
     962:	6b 83       	std	Y+3, r22	; 0x03
     964:	78 df       	rcall	.-272    	; 0x856 <LCD_ClearScreen>
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	0f c0       	rjmp	.+30     	; 0x98a <LCD_DisplayString+0x38>
     96c:	89 81       	ldd	r24, Y+1	; 0x01
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	98 0f       	add	r25, r24
     972:	99 83       	std	Y+1, r25	; 0x01
     974:	18 d0       	rcall	.+48     	; 0x9a6 <LCD_Cursor>
     976:	8b 81       	ldd	r24, Y+3	; 0x03
     978:	9c 81       	ldd	r25, Y+4	; 0x04
     97a:	9c 01       	movw	r18, r24
     97c:	2f 5f       	subi	r18, 0xFF	; 255
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	3c 83       	std	Y+4, r19	; 0x04
     982:	2b 83       	std	Y+3, r18	; 0x03
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	b5 df       	rcall	.-150    	; 0x8f4 <LCD_WriteData>
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	fc 01       	movw	r30, r24
     990:	80 81       	ld	r24, Z
     992:	88 23       	and	r24, r24
     994:	59 f7       	brne	.-42     	; 0x96c <LCD_DisplayString+0x1a>
     996:	00 00       	nop
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	08 95       	ret

000009a6 <LCD_Cursor>:
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	1f 92       	push	r1
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	81 31       	cpi	r24, 0x11	; 17
     9b6:	20 f4       	brcc	.+8      	; 0x9c0 <LCD_Cursor+0x1a>
     9b8:	89 81       	ldd	r24, Y+1	; 0x01
     9ba:	81 58       	subi	r24, 0x81	; 129
     9bc:	6c df       	rcall	.-296    	; 0x896 <LCD_WriteCommand>
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <LCD_Cursor+0x20>
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	81 55       	subi	r24, 0x51	; 81
     9c4:	68 df       	rcall	.-304    	; 0x896 <LCD_WriteCommand>
     9c6:	00 00       	nop
     9c8:	0f 90       	pop	r0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <delay_ms>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <delay_ms+0x6>
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <delay_ms+0x8>
     9d8:	00 d0       	rcall	.+0      	; 0x9da <delay_ms+0xa>
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	9e 83       	std	Y+6, r25	; 0x06
     9e0:	8d 83       	std	Y+5, r24	; 0x05
     9e2:	1a 82       	std	Y+2, r1	; 0x02
     9e4:	19 82       	std	Y+1, r1	; 0x01
     9e6:	13 c0       	rjmp	.+38     	; 0xa0e <delay_ms+0x3e>
     9e8:	1c 82       	std	Y+4, r1	; 0x04
     9ea:	1b 82       	std	Y+3, r1	; 0x03
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <delay_ms+0x2a>
     9ee:	00 00       	nop
     9f0:	8b 81       	ldd	r24, Y+3	; 0x03
     9f2:	9c 81       	ldd	r25, Y+4	; 0x04
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	9c 83       	std	Y+4, r25	; 0x04
     9f8:	8b 83       	std	Y+3, r24	; 0x03
     9fa:	8b 81       	ldd	r24, Y+3	; 0x03
     9fc:	9c 81       	ldd	r25, Y+4	; 0x04
     9fe:	87 30       	cpi	r24, 0x07	; 7
     a00:	93 40       	sbci	r25, 0x03	; 3
     a02:	ac f3       	brlt	.-22     	; 0x9ee <delay_ms+0x1e>
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	9a 81       	ldd	r25, Y+2	; 0x02
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	9a 83       	std	Y+2, r25	; 0x02
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	29 81       	ldd	r18, Y+1	; 0x01
     a10:	3a 81       	ldd	r19, Y+2	; 0x02
     a12:	8d 81       	ldd	r24, Y+5	; 0x05
     a14:	9e 81       	ldd	r25, Y+6	; 0x06
     a16:	28 17       	cp	r18, r24
     a18:	39 07       	cpc	r19, r25
     a1a:	34 f3       	brlt	.-52     	; 0x9e8 <delay_ms+0x18>
     a1c:	00 00       	nop
     a1e:	26 96       	adiw	r28, 0x06	; 6
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	de bf       	out	0x3e, r29	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	cd bf       	out	0x3d, r28	; 61
     a2a:	df 91       	pop	r29
     a2c:	cf 91       	pop	r28
     a2e:	08 95       	ret

00000a30 <hc595transmit_data>:
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	00 d0       	rcall	.+0      	; 0xa3a <hc595transmit_data+0xa>
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	8a 83       	std	Y+2, r24	; 0x02
     a40:	19 82       	std	Y+1, r1	; 0x01
     a42:	36 c0       	rjmp	.+108    	; 0xab0 <hc595transmit_data+0x80>
     a44:	0b e2       	ldi	r16, 0x2B	; 43
     a46:	10 e0       	ldi	r17, 0x00	; 0
     a48:	8b e2       	ldi	r24, 0x2B	; 43
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	fc 01       	movw	r30, r24
     a4e:	80 81       	ld	r24, Z
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	46 db       	rcall	.-2420   	; 0xe2 <setBit>
     a56:	f8 01       	movw	r30, r16
     a58:	80 83       	st	Z, r24
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	88 23       	and	r24, r24
     a5e:	64 f4       	brge	.+24     	; 0xa78 <hc595transmit_data+0x48>
     a60:	0b e2       	ldi	r16, 0x2B	; 43
     a62:	10 e0       	ldi	r17, 0x00	; 0
     a64:	8b e2       	ldi	r24, 0x2B	; 43
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	41 e0       	ldi	r20, 0x01	; 1
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	38 db       	rcall	.-2448   	; 0xe2 <setBit>
     a72:	f8 01       	movw	r30, r16
     a74:	80 83       	st	Z, r24
     a76:	0b c0       	rjmp	.+22     	; 0xa8e <hc595transmit_data+0x5e>
     a78:	0b e2       	ldi	r16, 0x2B	; 43
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	8b e2       	ldi	r24, 0x2B	; 43
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	fc 01       	movw	r30, r24
     a82:	80 81       	ld	r24, Z
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	2c db       	rcall	.-2472   	; 0xe2 <setBit>
     a8a:	f8 01       	movw	r30, r16
     a8c:	80 83       	st	Z, r24
     a8e:	0b e2       	ldi	r16, 0x2B	; 43
     a90:	10 e0       	ldi	r17, 0x00	; 0
     a92:	8b e2       	ldi	r24, 0x2B	; 43
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	fc 01       	movw	r30, r24
     a98:	80 81       	ld	r24, Z
     a9a:	41 e0       	ldi	r20, 0x01	; 1
     a9c:	62 e0       	ldi	r22, 0x02	; 2
     a9e:	21 db       	rcall	.-2494   	; 0xe2 <setBit>
     aa0:	f8 01       	movw	r30, r16
     aa2:	80 83       	st	Z, r24
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	8a 81       	ldd	r24, Y+2	; 0x02
     aac:	88 0f       	add	r24, r24
     aae:	8a 83       	std	Y+2, r24	; 0x02
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	88 30       	cpi	r24, 0x08	; 8
     ab4:	38 f2       	brcs	.-114    	; 0xa44 <hc595transmit_data+0x14>
     ab6:	00 00       	nop
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	08 95       	ret

00000ac6 <sevenseg_write>:
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	1f 92       	push	r1
     ad0:	cd b7       	in	r28, 0x3d	; 61
     ad2:	de b7       	in	r29, 0x3e	; 62
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	0b e2       	ldi	r16, 0x2B	; 43
     ad8:	10 e0       	ldi	r17, 0x00	; 0
     ada:	8b e2       	ldi	r24, 0x2B	; 43
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	fd da       	rcall	.-2566   	; 0xe2 <setBit>
     ae8:	f8 01       	movw	r30, r16
     aea:	80 83       	st	Z, r24
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	88 2f       	mov	r24, r24
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	86 5f       	subi	r24, 0xF6	; 246
     af4:	9e 4f       	sbci	r25, 0xFE	; 254
     af6:	fc 01       	movw	r30, r24
     af8:	80 81       	ld	r24, Z
     afa:	9a df       	rcall	.-204    	; 0xa30 <hc595transmit_data>
     afc:	0b e2       	ldi	r16, 0x2B	; 43
     afe:	10 e0       	ldi	r17, 0x00	; 0
     b00:	8b e2       	ldi	r24, 0x2B	; 43
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	fc 01       	movw	r30, r24
     b06:	80 81       	ld	r24, Z
     b08:	41 e0       	ldi	r20, 0x01	; 1
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	ea da       	rcall	.-2604   	; 0xe2 <setBit>
     b0e:	f8 01       	movw	r30, r16
     b10:	80 83       	st	Z, r24
     b12:	00 00       	nop
     b14:	0f 90       	pop	r0
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	1f 91       	pop	r17
     b1c:	0f 91       	pop	r16
     b1e:	08 95       	ret

00000b20 <sevenseg_clear>:
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	cd df       	rcall	.-102    	; 0xac6 <sevenseg_write>
     b2c:	00 00       	nop
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <sevenseg_init>:
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	82 e2       	ldi	r24, 0x22	; 34
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	fc 01       	movw	r30, r24
     b44:	80 81       	ld	r24, Z
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	cb da       	rcall	.-2666   	; 0xe2 <setBit>
     b4c:	18 2f       	mov	r17, r24
     b4e:	82 e2       	ldi	r24, 0x22	; 34
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	fc 01       	movw	r30, r24
     b54:	80 81       	ld	r24, Z
     b56:	41 e0       	ldi	r20, 0x01	; 1
     b58:	61 e0       	ldi	r22, 0x01	; 1
     b5a:	c3 da       	rcall	.-2682   	; 0xe2 <setBit>
     b5c:	18 2b       	or	r17, r24
     b5e:	82 e2       	ldi	r24, 0x22	; 34
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	fc 01       	movw	r30, r24
     b64:	80 81       	ld	r24, Z
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	62 e0       	ldi	r22, 0x02	; 2
     b6a:	bb da       	rcall	.-2698   	; 0xe2 <setBit>
     b6c:	81 2b       	or	r24, r17
     b6e:	48 2f       	mov	r20, r24
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	8a e2       	ldi	r24, 0x2A	; 42
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	2a e2       	ldi	r18, 0x2A	; 42
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	f9 01       	movw	r30, r18
     b7c:	20 81       	ld	r18, Z
     b7e:	32 2f       	mov	r19, r18
     b80:	24 2f       	mov	r18, r20
     b82:	23 2b       	or	r18, r19
     b84:	fc 01       	movw	r30, r24
     b86:	20 83       	st	Z, r18
     b88:	88 e0       	ldi	r24, 0x08	; 8
     b8a:	9d df       	rcall	.-198    	; 0xac6 <sevenseg_write>
     b8c:	c9 df       	rcall	.-110    	; 0xb20 <sevenseg_clear>
     b8e:	00 00       	nop
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	08 95       	ret

00000b98 <set_PWM>:
     b98:	0f 93       	push	r16
     b9a:	1f 93       	push	r17
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <set_PWM+0xa>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <set_PWM+0xc>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	69 83       	std	Y+1, r22	; 0x01
     baa:	7a 83       	std	Y+2, r23	; 0x02
     bac:	8b 83       	std	Y+3, r24	; 0x03
     bae:	9c 83       	std	Y+4, r25	; 0x04
     bb0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <current_frequency.2187>
     bb4:	90 91 ce 03 	lds	r25, 0x03CE	; 0x8003ce <current_frequency.2187+0x1>
     bb8:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <current_frequency.2187+0x2>
     bbc:	b0 91 d0 03 	lds	r27, 0x03D0	; 0x8003d0 <current_frequency.2187+0x3>
     bc0:	9c 01       	movw	r18, r24
     bc2:	ad 01       	movw	r20, r26
     bc4:	69 81       	ldd	r22, Y+1	; 0x01
     bc6:	7a 81       	ldd	r23, Y+2	; 0x02
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__cmpsf2>
     bd0:	88 23       	and	r24, r24
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <set_PWM+0x3e>
     bd4:	77 c0       	rjmp	.+238    	; 0xcc4 <set_PWM+0x12c>
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	a9 01       	movw	r20, r18
     bdc:	69 81       	ldd	r22, Y+1	; 0x01
     bde:	7a 81       	ldd	r23, Y+2	; 0x02
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__cmpsf2>
     be8:	88 23       	and	r24, r24
     bea:	51 f4       	brne	.+20     	; 0xc00 <set_PWM+0x68>
     bec:	81 e9       	ldi	r24, 0x91	; 145
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	21 e9       	ldi	r18, 0x91	; 145
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	f9 01       	movw	r30, r18
     bf6:	20 81       	ld	r18, Z
     bf8:	28 70       	andi	r18, 0x08	; 8
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	09 c0       	rjmp	.+18     	; 0xc12 <set_PWM+0x7a>
     c00:	81 e9       	ldi	r24, 0x91	; 145
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	21 e9       	ldi	r18, 0x91	; 145
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	f9 01       	movw	r30, r18
     c0a:	20 81       	ld	r18, Z
     c0c:	23 60       	ori	r18, 0x03	; 3
     c0e:	fc 01       	movw	r30, r24
     c10:	20 83       	st	Z, r18
     c12:	28 e5       	ldi	r18, 0x58	; 88
     c14:	39 e3       	ldi	r19, 0x39	; 57
     c16:	44 e7       	ldi	r20, 0x74	; 116
     c18:	5f e3       	ldi	r21, 0x3F	; 63
     c1a:	69 81       	ldd	r22, Y+1	; 0x01
     c1c:	7a 81       	ldd	r23, Y+2	; 0x02
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__cmpsf2>
     c26:	88 23       	and	r24, r24
     c28:	44 f4       	brge	.+16     	; 0xc3a <set_PWM+0xa2>
     c2a:	88 e9       	ldi	r24, 0x98	; 152
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	2f ef       	ldi	r18, 0xFF	; 255
     c30:	3f ef       	ldi	r19, 0xFF	; 255
     c32:	fc 01       	movw	r30, r24
     c34:	31 83       	std	Z+1, r19	; 0x01
     c36:	20 83       	st	Z, r18
     c38:	34 c0       	rjmp	.+104    	; 0xca2 <set_PWM+0x10a>
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	34 e2       	ldi	r19, 0x24	; 36
     c3e:	44 ef       	ldi	r20, 0xF4	; 244
     c40:	56 e4       	ldi	r21, 0x46	; 70
     c42:	69 81       	ldd	r22, Y+1	; 0x01
     c44:	7a 81       	ldd	r23, Y+2	; 0x02
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	0e 94 d5 18 	call	0x31aa	; 0x31aa <__gesf2>
     c4e:	18 16       	cp	r1, r24
     c50:	34 f4       	brge	.+12     	; 0xc5e <set_PWM+0xc6>
     c52:	88 e9       	ldi	r24, 0x98	; 152
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	11 82       	std	Z+1, r1	; 0x01
     c5a:	10 82       	st	Z, r1
     c5c:	22 c0       	rjmp	.+68     	; 0xca2 <set_PWM+0x10a>
     c5e:	08 e9       	ldi	r16, 0x98	; 152
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	20 e0       	ldi	r18, 0x00	; 0
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	40 e0       	ldi	r20, 0x00	; 0
     c68:	53 e4       	ldi	r21, 0x43	; 67
     c6a:	69 81       	ldd	r22, Y+1	; 0x01
     c6c:	7a 81       	ldd	r23, Y+2	; 0x02
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	9c 81       	ldd	r25, Y+4	; 0x04
     c72:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	9c 01       	movw	r18, r24
     c7c:	ad 01       	movw	r20, r26
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	74 e2       	ldi	r23, 0x24	; 36
     c82:	84 ef       	ldi	r24, 0xF4	; 244
     c84:	9a e4       	ldi	r25, 0x4A	; 74
     c86:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <__divsf3>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <__fixsfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f8 01       	movw	r30, r16
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
     ca2:	84 e9       	ldi	r24, 0x94	; 148
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	fc 01       	movw	r30, r24
     ca8:	11 82       	std	Z+1, r1	; 0x01
     caa:	10 82       	st	Z, r1
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	ab 81       	ldd	r26, Y+3	; 0x03
     cb2:	bc 81       	ldd	r27, Y+4	; 0x04
     cb4:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <current_frequency.2187>
     cb8:	90 93 ce 03 	sts	0x03CE, r25	; 0x8003ce <current_frequency.2187+0x1>
     cbc:	a0 93 cf 03 	sts	0x03CF, r26	; 0x8003cf <current_frequency.2187+0x2>
     cc0:	b0 93 d0 03 	sts	0x03D0, r27	; 0x8003d0 <current_frequency.2187+0x3>
     cc4:	00 00       	nop
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <PWM_on>:
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	80 e9       	ldi	r24, 0x90	; 144
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	20 e4       	ldi	r18, 0x40	; 64
     ce6:	fc 01       	movw	r30, r24
     ce8:	20 83       	st	Z, r18
     cea:	81 e9       	ldi	r24, 0x91	; 145
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	2b e0       	ldi	r18, 0x0B	; 11
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	cb 01       	movw	r24, r22
     cfa:	4e df       	rcall	.-356    	; 0xb98 <set_PWM>
     cfc:	00 00       	nop
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <InitSnake>:
	struct Pair head;
	struct Pair foodindex;
} snake;

void InitSnake(void)
{
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	cd b7       	in	r28, 0x3d	; 61
     d0a:	de b7       	in	r29, 0x3e	; 62
	snake.Direction = Right;
     d0c:	84 e0       	ldi	r24, 0x04	; 4
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <snake+0x3>
     d14:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <snake+0x2>
	snake.body = CreateQueue();
     d18:	29 dc       	rcall	.-1966   	; 0x56c <CreateQueue>
     d1a:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <snake+0x1>
     d1e:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <snake>
	Push(snake.body, 1, 1);
     d22:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
     d26:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	50 e0       	ldi	r21, 0x00	; 0
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	3d dc       	rcall	.-1926   	; 0x5ae <Push>
	snake.head.x = 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
     d3c:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
	snake.head.y = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
     d48:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
	snake.foodindex.x = 1;
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <snake+0x9>
     d54:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <snake+0x8>
	snake.foodindex.y = 0;
     d58:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <snake+0xb>
     d5c:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <snake+0xa>
}
     d60:	00 00       	nop
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <ShiftLFSR>:
*    Date: <2013>
*    Availability: <https://www.maximintegrated.com/en/app-notes/index.mvp/id/4400>
*
***************************************************************************************/
int ShiftLFSR(unsigned int *LFSR, unsigned int Mask)
{
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <ShiftLFSR+0x6>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <ShiftLFSR+0x8>
     d70:	00 d0       	rcall	.+0      	; 0xd72 <ShiftLFSR+0xa>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	9c 83       	std	Y+4, r25	; 0x04
     d78:	8b 83       	std	Y+3, r24	; 0x03
     d7a:	7e 83       	std	Y+6, r23	; 0x06
     d7c:	6d 83       	std	Y+5, r22	; 0x05
	int Feedback;
	
	Feedback = *LFSR & 1;
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	fc 01       	movw	r30, r24
     d84:	80 81       	ld	r24, Z
     d86:	91 81       	ldd	r25, Z+1	; 0x01
     d88:	81 70       	andi	r24, 0x01	; 1
     d8a:	99 27       	eor	r25, r25
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
	*LFSR >>= 1;
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	91 81       	ldd	r25, Z+1	; 0x01
     d9a:	9c 01       	movw	r18, r24
     d9c:	36 95       	lsr	r19
     d9e:	27 95       	ror	r18
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	fc 01       	movw	r30, r24
     da6:	31 83       	std	Z+1, r19	; 0x01
     da8:	20 83       	st	Z, r18
	if (Feedback == 1)
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	9a 81       	ldd	r25, Y+2	; 0x02
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	71 f4       	brne	.+28     	; 0xdce <ShiftLFSR+0x66>
	{
		*LFSR ^= Mask;
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	fc 01       	movw	r30, r24
     db8:	20 81       	ld	r18, Z
     dba:	31 81       	ldd	r19, Z+1	; 0x01
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	28 27       	eor	r18, r24
     dc2:	39 27       	eor	r19, r25
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	fc 01       	movw	r30, r24
     dca:	31 83       	std	Z+1, r19	; 0x01
     dcc:	20 83       	st	Z, r18
	}
	
	return *LFSR;
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	9c 81       	ldd	r25, Y+4	; 0x04
     dd2:	fc 01       	movw	r30, r24
     dd4:	80 81       	ld	r24, Z
     dd6:	91 81       	ldd	r25, Z+1	; 0x01
}
     dd8:	26 96       	adiw	r28, 0x06	; 6
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <LFSRInit>:
*    Date: <2013>
*    Availability: <https://www.maximintegrated.com/en/app-notes/index.mvp/id/4400>
*
***************************************************************************************/
void LFSRInit(void)
{
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	LFSR_1 = 0x23456789;
     df2:	89 e8       	ldi	r24, 0x89	; 137
     df4:	97 e6       	ldi	r25, 0x67	; 103
     df6:	90 93 35 04 	sts	0x0435, r25	; 0x800435 <LFSR_1+0x1>
     dfa:	80 93 34 04 	sts	0x0434, r24	; 0x800434 <LFSR_1>
	LFSR_2 = 0xABCDE;
     dfe:	8e ed       	ldi	r24, 0xDE	; 222
     e00:	9c eb       	ldi	r25, 0xBC	; 188
     e02:	90 93 4f 04 	sts	0x044F, r25	; 0x80044f <LFSR_2+0x1>
     e06:	80 93 4e 04 	sts	0x044E, r24	; 0x80044e <LFSR_2>
}
     e0a:	00 00       	nop
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <Random>:
*    Date: <2013>
*    Availability: <https://www.maximintegrated.com/en/app-notes/index.mvp/id/4400>
*
***************************************************************************************/
int Random(void)
{
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
	ShiftLFSR(&LFSR_1, MASK_1);
     e1e:	6c e5       	ldi	r22, 0x5C	; 92
     e20:	73 ed       	ldi	r23, 0xD3	; 211
     e22:	84 e3       	ldi	r24, 0x34	; 52
     e24:	94 e0       	ldi	r25, 0x04	; 4
     e26:	a0 df       	rcall	.-192    	; 0xd68 <ShiftLFSR>
	
	return (ShiftLFSR(&LFSR_1, MASK_1) ^ ShiftLFSR(&LFSR_2, MASK_2)) & 0xFFFF;
     e28:	6c e5       	ldi	r22, 0x5C	; 92
     e2a:	73 ed       	ldi	r23, 0xD3	; 211
     e2c:	84 e3       	ldi	r24, 0x34	; 52
     e2e:	94 e0       	ldi	r25, 0x04	; 4
     e30:	9b df       	rcall	.-202    	; 0xd68 <ShiftLFSR>
     e32:	8c 01       	movw	r16, r24
     e34:	63 ee       	ldi	r22, 0xE3	; 227
     e36:	72 ec       	ldi	r23, 0xC2	; 194
     e38:	8e e4       	ldi	r24, 0x4E	; 78
     e3a:	94 e0       	ldi	r25, 0x04	; 4
     e3c:	95 df       	rcall	.-214    	; 0xd68 <ShiftLFSR>
     e3e:	80 27       	eor	r24, r16
     e40:	91 27       	eor	r25, r17
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <DisplayFood>:

void DisplayFood(void)
{
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	matrix_write(snake.foodindex.x, snake.foodindex.y);
     e54:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <snake+0xa>
     e58:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <snake+0xb>
     e5c:	28 2f       	mov	r18, r24
     e5e:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <snake+0x8>
     e62:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <snake+0x9>
     e66:	62 2f       	mov	r22, r18
     e68:	bd d9       	rcall	.-3206   	; 0x1e4 <matrix_write>
}
     e6a:	00 00       	nop
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	08 95       	ret

00000e72 <DisplaySnake>:

void DisplaySnake(void)
{
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	2e 97       	sbiw	r28, 0x0e	; 14
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
	matrix_clear();
     e86:	d9 d9       	rcall	.-3150   	; 0x23a <matrix_clear>
	
	unsigned char Rows[8];
	
	for (int i = 0; i < 8; ++i)
     e88:	1a 82       	std	Y+2, r1	; 0x02
     e8a:	19 82       	std	Y+1, r1	; 0x01
     e8c:	0e c0       	rjmp	.+28     	; 0xeaa <DisplaySnake+0x38>
	{
		Rows[i] = 0x00;
     e8e:	9e 01       	movw	r18, r28
     e90:	29 5f       	subi	r18, 0xF9	; 249
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	82 0f       	add	r24, r18
     e9a:	93 1f       	adc	r25, r19
     e9c:	fc 01       	movw	r30, r24
     e9e:	10 82       	st	Z, r1
{
	matrix_clear();
	
	unsigned char Rows[8];
	
	for (int i = 0; i < 8; ++i)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	9a 81       	ldd	r25, Y+2	; 0x02
     eae:	08 97       	sbiw	r24, 0x08	; 8
     eb0:	74 f3       	brlt	.-36     	; 0xe8e <DisplaySnake+0x1c>
	{
		Rows[i] = 0x00;
	}
	
	struct Node *n = snake.body->front;
     eb2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
     eb6:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
     eba:	fc 01       	movw	r30, r24
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	9c 83       	std	Y+4, r25	; 0x04
     ec2:	8b 83       	std	Y+3, r24	; 0x03
	
	while (n != NULL)
     ec4:	2a c0       	rjmp	.+84     	; 0xf1a <DisplaySnake+0xa8>
	{
		Rows[n->x - 1] |= n->y;
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	fc 01       	movw	r30, r24
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	2b 81       	ldd	r18, Y+3	; 0x03
     ed4:	3c 81       	ldd	r19, Y+4	; 0x04
     ed6:	f9 01       	movw	r30, r18
     ed8:	20 81       	ld	r18, Z
     eda:	31 81       	ldd	r19, Z+1	; 0x01
     edc:	21 50       	subi	r18, 0x01	; 1
     ede:	31 09       	sbc	r19, r1
     ee0:	ae 01       	movw	r20, r28
     ee2:	49 5f       	subi	r20, 0xF9	; 249
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	24 0f       	add	r18, r20
     ee8:	35 1f       	adc	r19, r21
     eea:	f9 01       	movw	r30, r18
     eec:	20 81       	ld	r18, Z
     eee:	42 2f       	mov	r20, r18
     ef0:	2b 81       	ldd	r18, Y+3	; 0x03
     ef2:	3c 81       	ldd	r19, Y+4	; 0x04
     ef4:	f9 01       	movw	r30, r18
     ef6:	22 81       	ldd	r18, Z+2	; 0x02
     ef8:	33 81       	ldd	r19, Z+3	; 0x03
     efa:	24 2b       	or	r18, r20
     efc:	42 2f       	mov	r20, r18
     efe:	9e 01       	movw	r18, r28
     f00:	29 5f       	subi	r18, 0xF9	; 249
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	fc 01       	movw	r30, r24
     f0a:	40 83       	st	Z, r20
		
		n = n->next;
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	9c 81       	ldd	r25, Y+4	; 0x04
     f10:	fc 01       	movw	r30, r24
     f12:	84 81       	ldd	r24, Z+4	; 0x04
     f14:	95 81       	ldd	r25, Z+5	; 0x05
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
		Rows[i] = 0x00;
	}
	
	struct Node *n = snake.body->front;
	
	while (n != NULL)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	89 2b       	or	r24, r25
		Rows[n->x - 1] |= n->y;
		
		n = n->next;
	}
	
	DisplayFood();
     f20:	91 f6       	brne	.-92     	; 0xec6 <DisplaySnake+0x54>
     f22:	94 df       	rcall	.-216    	; 0xe4c <DisplayFood>
	
	struct Node *m = snake.body->front;
     f24:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
     f28:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
     f2c:	fc 01       	movw	r30, r24
     f2e:	80 81       	ld	r24, Z
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
	
	while (m != NULL)
     f36:	5e c0       	rjmp	.+188    	; 0xff4 <DisplaySnake+0x182>
	{
		if (snake.foodindex.x == m->x)
     f38:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <snake+0x8>
     f3c:	30 91 23 04 	lds	r19, 0x0423	; 0x800423 <snake+0x9>
     f40:	8d 81       	ldd	r24, Y+5	; 0x05
     f42:	9e 81       	ldd	r25, Y+6	; 0x06
     f44:	fc 01       	movw	r30, r24
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
     f4a:	28 17       	cp	r18, r24
     f4c:	39 07       	cpc	r19, r25
     f4e:	b9 f5       	brne	.+110    	; 0xfbe <DisplaySnake+0x14c>
		{
			Rows[m->x - 1] |= snake.foodindex.y;
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	fc 01       	movw	r30, r24
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	2d 81       	ldd	r18, Y+5	; 0x05
     f5e:	3e 81       	ldd	r19, Y+6	; 0x06
     f60:	f9 01       	movw	r30, r18
     f62:	20 81       	ld	r18, Z
     f64:	31 81       	ldd	r19, Z+1	; 0x01
     f66:	21 50       	subi	r18, 0x01	; 1
     f68:	31 09       	sbc	r19, r1
     f6a:	ae 01       	movw	r20, r28
     f6c:	49 5f       	subi	r20, 0xF9	; 249
     f6e:	5f 4f       	sbci	r21, 0xFF	; 255
     f70:	24 0f       	add	r18, r20
     f72:	35 1f       	adc	r19, r21
     f74:	f9 01       	movw	r30, r18
     f76:	20 81       	ld	r18, Z
     f78:	42 2f       	mov	r20, r18
     f7a:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <snake+0xa>
     f7e:	30 91 25 04 	lds	r19, 0x0425	; 0x800425 <snake+0xb>
     f82:	24 2b       	or	r18, r20
     f84:	42 2f       	mov	r20, r18
     f86:	9e 01       	movw	r18, r28
     f88:	29 5f       	subi	r18, 0xF9	; 249
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	82 0f       	add	r24, r18
     f8e:	93 1f       	adc	r25, r19
     f90:	fc 01       	movw	r30, r24
     f92:	40 83       	st	Z, r20
			matrix_write(m->x, Rows[m->x - 1]);
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	91 81       	ldd	r25, Z+1	; 0x01
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	9e 01       	movw	r18, r28
     fa2:	29 5f       	subi	r18, 0xF9	; 249
     fa4:	3f 4f       	sbci	r19, 0xFF	; 255
     fa6:	82 0f       	add	r24, r18
     fa8:	93 1f       	adc	r25, r19
     faa:	fc 01       	movw	r30, r24
     fac:	20 81       	ld	r18, Z
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	91 81       	ldd	r25, Z+1	; 0x01
     fb8:	62 2f       	mov	r22, r18
     fba:	14 d9       	rcall	.-3544   	; 0x1e4 <matrix_write>
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <DisplaySnake+0x174>
		}
		else
		{
			matrix_write(m->x, Rows[m->x - 1]);
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	9e 01       	movw	r18, r28
     fcc:	29 5f       	subi	r18, 0xF9	; 249
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	82 0f       	add	r24, r18
     fd2:	93 1f       	adc	r25, r19
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 81       	ld	r18, Z
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	fc 01       	movw	r30, r24
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	62 2f       	mov	r22, r18
     fe4:	ff d8       	rcall	.-3586   	; 0x1e4 <matrix_write>
		}
		
		m = m->next;
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	fc 01       	movw	r30, r24
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	95 81       	ldd	r25, Z+5	; 0x05
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
	
	DisplayFood();
	
	struct Node *m = snake.body->front;
	
	while (m != NULL)
     ff4:	8d 81       	ldd	r24, Y+5	; 0x05
     ff6:	9e 81       	ldd	r25, Y+6	; 0x06
     ff8:	89 2b       	or	r24, r25
     ffa:	09 f0       	breq	.+2      	; 0xffe <DisplaySnake+0x18c>
     ffc:	9d cf       	rjmp	.-198    	; 0xf38 <DisplaySnake+0xc6>
			matrix_write(m->x, Rows[m->x - 1]);
		}
		
		m = m->next;
	}
}
     ffe:	00 00       	nop
    1000:	2e 96       	adiw	r28, 0x0e	; 14
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <GetDirection>:

int GetDirection(void)
{
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
	if (adc_read(0) <= 600 && adc_read(1) <= 500)
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	46 da       	rcall	.-2932   	; 0x4aa <adc_read>
    101e:	89 35       	cpi	r24, 0x59	; 89
    1020:	92 40       	sbci	r25, 0x02	; 2
    1022:	40 f4       	brcc	.+16     	; 0x1034 <GetDirection+0x22>
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	41 da       	rcall	.-2942   	; 0x4aa <adc_read>
    1028:	85 3f       	cpi	r24, 0xF5	; 245
    102a:	91 40       	sbci	r25, 0x01	; 1
    102c:	18 f4       	brcc	.+6      	; 0x1034 <GetDirection+0x22>
	{
		return Up;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
	}
	else if (adc_read(0) <= 600 && adc_read(1) >= 600)
    1032:	2b c0       	rjmp	.+86     	; 0x108a <GetDirection+0x78>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	39 da       	rcall	.-2958   	; 0x4aa <adc_read>
    1038:	89 35       	cpi	r24, 0x59	; 89
    103a:	92 40       	sbci	r25, 0x02	; 2
    103c:	40 f4       	brcc	.+16     	; 0x104e <GetDirection+0x3c>
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	34 da       	rcall	.-2968   	; 0x4aa <adc_read>
    1042:	88 35       	cpi	r24, 0x58	; 88
    1044:	92 40       	sbci	r25, 0x02	; 2
    1046:	18 f0       	brcs	.+6      	; 0x104e <GetDirection+0x3c>
	{
		return Down;
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	90 e0       	ldi	r25, 0x00	; 0
	}
	else if (adc_read(0) <= 500 && adc_read(1) <= 600)
    104c:	1e c0       	rjmp	.+60     	; 0x108a <GetDirection+0x78>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	2c da       	rcall	.-2984   	; 0x4aa <adc_read>
    1052:	85 3f       	cpi	r24, 0xF5	; 245
    1054:	91 40       	sbci	r25, 0x01	; 1
    1056:	40 f4       	brcc	.+16     	; 0x1068 <GetDirection+0x56>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	27 da       	rcall	.-2994   	; 0x4aa <adc_read>
    105c:	89 35       	cpi	r24, 0x59	; 89
    105e:	92 40       	sbci	r25, 0x02	; 2
	{
		return Left;
    1060:	18 f4       	brcc	.+6      	; 0x1068 <GetDirection+0x56>
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	90 e0       	ldi	r25, 0x00	; 0
	}
	else if (adc_read(0) >= 600 && adc_read(1) <= 600)
    1066:	11 c0       	rjmp	.+34     	; 0x108a <GetDirection+0x78>
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	1f da       	rcall	.-3010   	; 0x4aa <adc_read>
    106c:	88 35       	cpi	r24, 0x58	; 88
    106e:	92 40       	sbci	r25, 0x02	; 2
    1070:	40 f0       	brcs	.+16     	; 0x1082 <GetDirection+0x70>
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	1a da       	rcall	.-3020   	; 0x4aa <adc_read>
    1076:	89 35       	cpi	r24, 0x59	; 89
    1078:	92 40       	sbci	r25, 0x02	; 2
    107a:	18 f4       	brcc	.+6      	; 0x1082 <GetDirection+0x70>
	{
		return Right;
    107c:	84 e0       	ldi	r24, 0x04	; 4
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	04 c0       	rjmp	.+8      	; 0x108a <GetDirection+0x78>
	}
	
	return snake.Direction;
    1082:	80 91 1c 04 	lds	r24, 0x041C	; 0x80041c <snake+0x2>
    1086:	90 91 1d 04 	lds	r25, 0x041D	; 0x80041d <snake+0x3>
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <WallCollision>:

int WallCollision(void)
{
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	if (snake.head.y <= 1 && snake.Direction == Up)
    1098:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    109c:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    10a0:	02 97       	sbiw	r24, 0x02	; 2
    10a2:	64 f4       	brge	.+24     	; 0x10bc <WallCollision+0x2c>
    10a4:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    10a8:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	28 17       	cp	r18, r24
    10b2:	39 07       	cpc	r19, r25
    10b4:	19 f4       	brne	.+6      	; 0x10bc <WallCollision+0x2c>
	{
		return 1;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	39 c0       	rjmp	.+114    	; 0x112e <WallCollision+0x9e>
	}
	else if (snake.head.y >= 128 && snake.Direction == Down)
    10bc:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    10c0:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    10c4:	80 38       	cpi	r24, 0x80	; 128
    10c6:	91 05       	cpc	r25, r1
    10c8:	64 f0       	brlt	.+24     	; 0x10e2 <WallCollision+0x52>
    10ca:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    10ce:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	28 17       	cp	r18, r24
    10d8:	39 07       	cpc	r19, r25
    10da:	19 f4       	brne	.+6      	; 0x10e2 <WallCollision+0x52>
	{
		return 1;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	26 c0       	rjmp	.+76     	; 0x112e <WallCollision+0x9e>
	}
	else if (snake.head.x <= 1 && snake.Direction == Left)
    10e2:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    10e6:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    10ea:	02 97       	sbiw	r24, 0x02	; 2
    10ec:	64 f4       	brge	.+24     	; 0x1106 <WallCollision+0x76>
    10ee:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    10f2:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	28 17       	cp	r18, r24
    10fc:	39 07       	cpc	r19, r25
    10fe:	19 f4       	brne	.+6      	; 0x1106 <WallCollision+0x76>
	{
		return 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	14 c0       	rjmp	.+40     	; 0x112e <WallCollision+0x9e>
	}
	else if (snake.head.x >= 8 && snake.Direction == Right)
    1106:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    110a:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    110e:	08 97       	sbiw	r24, 0x08	; 8
    1110:	64 f0       	brlt	.+24     	; 0x112a <WallCollision+0x9a>
    1112:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1116:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	28 17       	cp	r18, r24
    1120:	39 07       	cpc	r19, r25
    1122:	19 f4       	brne	.+6      	; 0x112a <WallCollision+0x9a>
	{
		return 1;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <WallCollision+0x9e>
	}
	
	return 0;
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
}
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	08 95       	ret

00001134 <SelfCollision>:

int SelfCollision(void)
{
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	00 d0       	rcall	.+0      	; 0x113a <SelfCollision+0x6>
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	if (Size(snake.body) <= 1)
    113e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1142:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1146:	b9 da       	rcall	.-2702   	; 0x6ba <Size>
    1148:	02 97       	sbiw	r24, 0x02	; 2
    114a:	1c f4       	brge	.+6      	; 0x1152 <SelfCollision+0x1e>
	{
		return 0;
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	3a c0       	rjmp	.+116    	; 0x11c6 <SelfCollision+0x92>
	}
	
	for (struct Node *i = snake.body->front; i != snake.body->back; i = i->next)
    1152:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1156:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    115a:	fc 01       	movw	r30, r24
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	22 c0       	rjmp	.+68     	; 0x11aa <SelfCollision+0x76>
	{
		if (i->x == snake.head.x && i->y == snake.head.y)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	fc 01       	movw	r30, r24
    116c:	20 81       	ld	r18, Z
    116e:	31 81       	ldd	r19, Z+1	; 0x01
    1170:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    1174:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    1178:	28 17       	cp	r18, r24
    117a:	39 07       	cpc	r19, r25
    117c:	79 f4       	brne	.+30     	; 0x119c <SelfCollision+0x68>
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	9a 81       	ldd	r25, Y+2	; 0x02
    1182:	fc 01       	movw	r30, r24
    1184:	22 81       	ldd	r18, Z+2	; 0x02
    1186:	33 81       	ldd	r19, Z+3	; 0x03
    1188:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    118c:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    1190:	28 17       	cp	r18, r24
    1192:	39 07       	cpc	r19, r25
    1194:	19 f4       	brne	.+6      	; 0x119c <SelfCollision+0x68>
		{
			return 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	15 c0       	rjmp	.+42     	; 0x11c6 <SelfCollision+0x92>
	if (Size(snake.body) <= 1)
	{
		return 0;
	}
	
	for (struct Node *i = snake.body->front; i != snake.body->back; i = i->next)
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	fc 01       	movw	r30, r24
    11a2:	84 81       	ldd	r24, Z+4	; 0x04
    11a4:	95 81       	ldd	r25, Z+5	; 0x05
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
    11aa:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    11ae:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    11b2:	fc 01       	movw	r30, r24
    11b4:	22 81       	ldd	r18, Z+2	; 0x02
    11b6:	33 81       	ldd	r19, Z+3	; 0x03
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	28 17       	cp	r18, r24
    11be:	39 07       	cpc	r19, r25
    11c0:	91 f6       	brne	.-92     	; 0x1166 <SelfCollision+0x32>
		{
			return 1;
		}
	}
	
	return 0;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	90 e0       	ldi	r25, 0x00	; 0
}
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <FoodCollision>:

int FoodCollision(void)
{
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	if (snake.foodindex.x == snake.head.x && snake.foodindex.y == snake.head.y)
    11d8:	20 91 22 04 	lds	r18, 0x0422	; 0x800422 <snake+0x8>
    11dc:	30 91 23 04 	lds	r19, 0x0423	; 0x800423 <snake+0x9>
    11e0:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    11e4:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    11e8:	28 17       	cp	r18, r24
    11ea:	39 07       	cpc	r19, r25
    11ec:	71 f4       	brne	.+28     	; 0x120a <FoodCollision+0x3a>
    11ee:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <snake+0xa>
    11f2:	30 91 25 04 	lds	r19, 0x0425	; 0x800425 <snake+0xb>
    11f6:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    11fa:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    11fe:	28 17       	cp	r18, r24
    1200:	39 07       	cpc	r19, r25
    1202:	19 f4       	brne	.+6      	; 0x120a <FoodCollision+0x3a>
	{
		return 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <FoodCollision+0x3e>
	}
	
	return 0;
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
}
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret

00001214 <CreateFood>:

void CreateFood(void)
{
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	cc 51       	subi	r28, 0x1C	; 28
    1226:	d1 40       	sbci	r29, 0x01	; 1
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
	}
	
	int index = Random() % size;
	snake.foodindex.x = FreeCols[index];
	snake.foodindex.y = FreeRows[index];
}
    1232:	0d b7       	in	r16, 0x3d	; 61
    1234:	1e b7       	in	r17, 0x3e	; 62
	
	return 0;
}

void CreateFood(void)
{
    1236:	8d b7       	in	r24, 0x3d	; 61
    1238:	9e b7       	in	r25, 0x3e	; 62
    123a:	7c 01       	movw	r14, r24
	unsigned int size = 64 - Size(snake.body) - 1;
    123c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1240:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1244:	3a da       	rcall	.-2956   	; 0x6ba <Size>
    1246:	9c 01       	movw	r18, r24
    1248:	8f e3       	ldi	r24, 0x3F	; 63
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	82 1b       	sub	r24, r18
    124e:	93 0b       	sbc	r25, r19
    1250:	9a 8b       	std	Y+18, r25	; 0x12
    1252:	89 8b       	std	Y+17, r24	; 0x11
	unsigned char Cols[64];
	unsigned char Rows[64];
	unsigned char FreeCols[size];
    1254:	89 89       	ldd	r24, Y+17	; 0x11
    1256:	9a 89       	ldd	r25, Y+18	; 0x12
    1258:	9c 01       	movw	r18, r24
    125a:	21 50       	subi	r18, 0x01	; 1
    125c:	31 09       	sbc	r19, r1
    125e:	3c 8b       	std	Y+20, r19	; 0x14
    1260:	2b 8b       	std	Y+19, r18	; 0x13
    1262:	2d b7       	in	r18, 0x3d	; 61
    1264:	3e b7       	in	r19, 0x3e	; 62
    1266:	28 1b       	sub	r18, r24
    1268:	39 0b       	sbc	r19, r25
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	3e bf       	out	0x3e, r19	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	2d bf       	out	0x3d, r18	; 61
    1274:	8d b7       	in	r24, 0x3d	; 61
    1276:	9e b7       	in	r25, 0x3e	; 62
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	9e 8b       	std	Y+22, r25	; 0x16
    127c:	8d 8b       	std	Y+21, r24	; 0x15
	unsigned char FreeRows[size];
    127e:	89 89       	ldd	r24, Y+17	; 0x11
    1280:	9a 89       	ldd	r25, Y+18	; 0x12
    1282:	9c 01       	movw	r18, r24
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	31 09       	sbc	r19, r1
    1288:	38 8f       	std	Y+24, r19	; 0x18
    128a:	2f 8b       	std	Y+23, r18	; 0x17
    128c:	ed b7       	in	r30, 0x3d	; 61
    128e:	fe b7       	in	r31, 0x3e	; 62
    1290:	e8 1b       	sub	r30, r24
    1292:	f9 0b       	sbc	r31, r25
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	fe bf       	out	0x3e, r31	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	ed bf       	out	0x3d, r30	; 61
    129e:	8d b7       	in	r24, 0x3d	; 61
    12a0:	9e b7       	in	r25, 0x3e	; 62
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	9a 8f       	std	Y+26, r25	; 0x1a
    12a6:	89 8f       	std	Y+25, r24	; 0x19
	unsigned char OccupiedCols[64];
	unsigned char OccupiedRows[64];
	
	int x = 0;
    12a8:	1a 82       	std	Y+2, r1	; 0x02
    12aa:	19 82       	std	Y+1, r1	; 0x01
	
	for (int i = 1; i < 256; i *= 2)
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 83       	std	Y+4, r25	; 0x04
    12b2:	8b 83       	std	Y+3, r24	; 0x03
    12b4:	46 c0       	rjmp	.+140    	; 0x1342 <CreateFood+0x12e>
	{
		for (int j = 1; j < 9; ++j)
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9e 83       	std	Y+6, r25	; 0x06
    12bc:	8d 83       	std	Y+5, r24	; 0x05
    12be:	35 c0       	rjmp	.+106    	; 0x132a <CreateFood+0x116>
		{
			if (x > 63)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	80 34       	cpi	r24, 0x40	; 64
    12c6:	91 05       	cpc	r25, r1
    12c8:	ac f5       	brge	.+106    	; 0x1334 <CreateFood+0x120>
			{
				break;
			}
			Cols[x] = j;
    12ca:	4d 81       	ldd	r20, Y+5	; 0x05
    12cc:	9e 01       	movw	r18, r28
    12ce:	23 5e       	subi	r18, 0xE3	; 227
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	9a 81       	ldd	r25, Y+2	; 0x02
    12d6:	82 0f       	add	r24, r18
    12d8:	93 1f       	adc	r25, r19
    12da:	fc 01       	movw	r30, r24
    12dc:	40 83       	st	Z, r20
			Rows[x] = i;
    12de:	4b 81       	ldd	r20, Y+3	; 0x03
    12e0:	9e 01       	movw	r18, r28
    12e2:	23 5a       	subi	r18, 0xA3	; 163
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	9a 81       	ldd	r25, Y+2	; 0x02
    12ea:	82 0f       	add	r24, r18
    12ec:	93 1f       	adc	r25, r19
    12ee:	fc 01       	movw	r30, r24
    12f0:	40 83       	st	Z, r20
			OccupiedCols[x] = 0;
    12f2:	9e 01       	movw	r18, r28
    12f4:	23 56       	subi	r18, 0x63	; 99
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	9a 81       	ldd	r25, Y+2	; 0x02
    12fc:	82 0f       	add	r24, r18
    12fe:	93 1f       	adc	r25, r19
    1300:	fc 01       	movw	r30, r24
    1302:	10 82       	st	Z, r1
			OccupiedRows[x] = 0;
    1304:	9e 01       	movw	r18, r28
    1306:	23 52       	subi	r18, 0x23	; 35
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	9a 81       	ldd	r25, Y+2	; 0x02
    130e:	82 0f       	add	r24, r18
    1310:	93 1f       	adc	r25, r19
    1312:	fc 01       	movw	r30, r24
    1314:	10 82       	st	Z, r1
			++x;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	9a 83       	std	Y+2, r25	; 0x02
    131e:	89 83       	std	Y+1, r24	; 0x01
	
	int x = 0;
	
	for (int i = 1; i < 256; i *= 2)
	{
		for (int j = 1; j < 9; ++j)
    1320:	8d 81       	ldd	r24, Y+5	; 0x05
    1322:	9e 81       	ldd	r25, Y+6	; 0x06
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	8d 81       	ldd	r24, Y+5	; 0x05
    132c:	9e 81       	ldd	r25, Y+6	; 0x06
    132e:	09 97       	sbiw	r24, 0x09	; 9
    1330:	3c f2       	brlt	.-114    	; 0x12c0 <CreateFood+0xac>
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <CreateFood+0x122>
		{
			if (x > 63)
			{
				break;
    1334:	00 00       	nop
	unsigned char OccupiedCols[64];
	unsigned char OccupiedRows[64];
	
	int x = 0;
	
	for (int i = 1; i < 256; i *= 2)
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	8f 3f       	cpi	r24, 0xFF	; 255
    1348:	91 05       	cpc	r25, r1
    134a:	09 f0       	breq	.+2      	; 0x134e <CreateFood+0x13a>
    134c:	0c f4       	brge	.+2      	; 0x1350 <CreateFood+0x13c>
    134e:	b3 cf       	rjmp	.-154    	; 0x12b6 <CreateFood+0xa2>
			OccupiedRows[x] = 0;
			++x;
		}
	}
	
	struct Node *n = snake.body->front;
    1350:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1354:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1358:	fc 01       	movw	r30, r24
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	98 87       	std	Y+8, r25	; 0x08
    1360:	8f 83       	std	Y+7, r24	; 0x07
	
	while (n != NULL)
    1362:	4f c0       	rjmp	.+158    	; 0x1402 <CreateFood+0x1ee>
	{
		for (int i = 0; i < 64; ++i)
    1364:	1a 86       	std	Y+10, r1	; 0x0a
    1366:	19 86       	std	Y+9, r1	; 0x09
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <CreateFood+0x1d4>
		{
			if (OccupiedCols[i] == n->x && OccupiedRows[i] == n->y)
    136a:	9e 01       	movw	r18, r28
    136c:	23 56       	subi	r18, 0x63	; 99
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	89 85       	ldd	r24, Y+9	; 0x09
    1372:	9a 85       	ldd	r25, Y+10	; 0x0a
    1374:	82 0f       	add	r24, r18
    1376:	93 1f       	adc	r25, r19
    1378:	fc 01       	movw	r30, r24
    137a:	80 81       	ld	r24, Z
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8f 81       	ldd	r24, Y+7	; 0x07
    1382:	98 85       	ldd	r25, Y+8	; 0x08
    1384:	fc 01       	movw	r30, r24
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
    138a:	28 17       	cp	r18, r24
    138c:	39 07       	cpc	r19, r25
    138e:	39 f5       	brne	.+78     	; 0x13de <CreateFood+0x1ca>
    1390:	9e 01       	movw	r18, r28
    1392:	23 52       	subi	r18, 0x23	; 35
    1394:	3f 4f       	sbci	r19, 0xFF	; 255
    1396:	89 85       	ldd	r24, Y+9	; 0x09
    1398:	9a 85       	ldd	r25, Y+10	; 0x0a
    139a:	82 0f       	add	r24, r18
    139c:	93 1f       	adc	r25, r19
    139e:	fc 01       	movw	r30, r24
    13a0:	80 81       	ld	r24, Z
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	8f 81       	ldd	r24, Y+7	; 0x07
    13a8:	98 85       	ldd	r25, Y+8	; 0x08
    13aa:	fc 01       	movw	r30, r24
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	28 17       	cp	r18, r24
    13b2:	39 07       	cpc	r19, r25
    13b4:	a1 f4       	brne	.+40     	; 0x13de <CreateFood+0x1ca>
			{
				OccupiedCols[i] = 1;
    13b6:	9e 01       	movw	r18, r28
    13b8:	23 56       	subi	r18, 0x63	; 99
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c0:	82 0f       	add	r24, r18
    13c2:	93 1f       	adc	r25, r19
    13c4:	21 e0       	ldi	r18, 0x01	; 1
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
				OccupiedRows[i] = 1;
    13ca:	9e 01       	movw	r18, r28
    13cc:	23 52       	subi	r18, 0x23	; 35
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d4:	82 0f       	add	r24, r18
    13d6:	93 1f       	adc	r25, r19
    13d8:	21 e0       	ldi	r18, 0x01	; 1
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
	
	struct Node *n = snake.body->front;
	
	while (n != NULL)
	{
		for (int i = 0; i < 64; ++i)
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	01 96       	adiw	r24, 0x01	; 1
    13e4:	9a 87       	std	Y+10, r25	; 0x0a
    13e6:	89 87       	std	Y+9, r24	; 0x09
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	80 34       	cpi	r24, 0x40	; 64
    13ee:	91 05       	cpc	r25, r1
    13f0:	0c f4       	brge	.+2      	; 0x13f4 <CreateFood+0x1e0>
    13f2:	bb cf       	rjmp	.-138    	; 0x136a <CreateFood+0x156>
				OccupiedCols[i] = 1;
				OccupiedRows[i] = 1;
			}
		}
		
		n = n->next;
    13f4:	8f 81       	ldd	r24, Y+7	; 0x07
    13f6:	98 85       	ldd	r25, Y+8	; 0x08
    13f8:	fc 01       	movw	r30, r24
    13fa:	84 81       	ldd	r24, Z+4	; 0x04
    13fc:	95 81       	ldd	r25, Z+5	; 0x05
    13fe:	98 87       	std	Y+8, r25	; 0x08
    1400:	8f 83       	std	Y+7, r24	; 0x07
		}
	}
	
	struct Node *n = snake.body->front;
	
	while (n != NULL)
    1402:	8f 81       	ldd	r24, Y+7	; 0x07
    1404:	98 85       	ldd	r25, Y+8	; 0x08
    1406:	89 2b       	or	r24, r25
    1408:	09 f0       	breq	.+2      	; 0x140c <CreateFood+0x1f8>
    140a:	ac cf       	rjmp	.-168    	; 0x1364 <CreateFood+0x150>
		}
		
		n = n->next;
	}
	
	int y = 0;
    140c:	1c 86       	std	Y+12, r1	; 0x0c
    140e:	1b 86       	std	Y+11, r1	; 0x0b
	int z = 0;
    1410:	1e 86       	std	Y+14, r1	; 0x0e
    1412:	1d 86       	std	Y+13, r1	; 0x0d
	for (int i = 0; i < 64; ++i)
    1414:	18 8a       	std	Y+16, r1	; 0x10
    1416:	1f 86       	std	Y+15, r1	; 0x0f
    1418:	55 c0       	rjmp	.+170    	; 0x14c4 <CreateFood+0x2b0>
	{
		if (!OccupiedCols[i] && y < size)
    141a:	9e 01       	movw	r18, r28
    141c:	23 56       	subi	r18, 0x63	; 99
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	98 89       	ldd	r25, Y+16	; 0x10
    1424:	82 0f       	add	r24, r18
    1426:	93 1f       	adc	r25, r19
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
    142c:	88 23       	and	r24, r24
    142e:	e9 f4       	brne	.+58     	; 0x146a <CreateFood+0x256>
    1430:	2b 85       	ldd	r18, Y+11	; 0x0b
    1432:	3c 85       	ldd	r19, Y+12	; 0x0c
    1434:	89 89       	ldd	r24, Y+17	; 0x11
    1436:	9a 89       	ldd	r25, Y+18	; 0x12
    1438:	28 17       	cp	r18, r24
    143a:	39 07       	cpc	r19, r25
    143c:	b0 f4       	brcc	.+44     	; 0x146a <CreateFood+0x256>
		{
			FreeCols[y] = Cols[y];
    143e:	9e 01       	movw	r18, r28
    1440:	23 5e       	subi	r18, 0xE3	; 227
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	8b 85       	ldd	r24, Y+11	; 0x0b
    1446:	9c 85       	ldd	r25, Y+12	; 0x0c
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	fc 01       	movw	r30, r24
    144e:	40 81       	ld	r20, Z
    1450:	2d 89       	ldd	r18, Y+21	; 0x15
    1452:	3e 89       	ldd	r19, Y+22	; 0x16
    1454:	8b 85       	ldd	r24, Y+11	; 0x0b
    1456:	9c 85       	ldd	r25, Y+12	; 0x0c
    1458:	82 0f       	add	r24, r18
    145a:	93 1f       	adc	r25, r19
    145c:	fc 01       	movw	r30, r24
    145e:	40 83       	st	Z, r20
			++y;
    1460:	8b 85       	ldd	r24, Y+11	; 0x0b
    1462:	9c 85       	ldd	r25, Y+12	; 0x0c
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	9c 87       	std	Y+12, r25	; 0x0c
    1468:	8b 87       	std	Y+11, r24	; 0x0b
		}
		if (!OccupiedRows[i] && z < size)
    146a:	9e 01       	movw	r18, r28
    146c:	23 52       	subi	r18, 0x23	; 35
    146e:	3f 4f       	sbci	r19, 0xFF	; 255
    1470:	8f 85       	ldd	r24, Y+15	; 0x0f
    1472:	98 89       	ldd	r25, Y+16	; 0x10
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	e9 f4       	brne	.+58     	; 0x14ba <CreateFood+0x2a6>
    1480:	2d 85       	ldd	r18, Y+13	; 0x0d
    1482:	3e 85       	ldd	r19, Y+14	; 0x0e
    1484:	89 89       	ldd	r24, Y+17	; 0x11
    1486:	9a 89       	ldd	r25, Y+18	; 0x12
    1488:	28 17       	cp	r18, r24
    148a:	39 07       	cpc	r19, r25
    148c:	b0 f4       	brcc	.+44     	; 0x14ba <CreateFood+0x2a6>
		{
			FreeRows[z] = Rows[z];
    148e:	9e 01       	movw	r18, r28
    1490:	23 5a       	subi	r18, 0xA3	; 163
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	8d 85       	ldd	r24, Y+13	; 0x0d
    1496:	9e 85       	ldd	r25, Y+14	; 0x0e
    1498:	82 0f       	add	r24, r18
    149a:	93 1f       	adc	r25, r19
    149c:	fc 01       	movw	r30, r24
    149e:	40 81       	ld	r20, Z
    14a0:	29 8d       	ldd	r18, Y+25	; 0x19
    14a2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    14a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a8:	82 0f       	add	r24, r18
    14aa:	93 1f       	adc	r25, r19
    14ac:	fc 01       	movw	r30, r24
    14ae:	40 83       	st	Z, r20
			++z;
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	01 96       	adiw	r24, 0x01	; 1
    14b6:	9e 87       	std	Y+14, r25	; 0x0e
    14b8:	8d 87       	std	Y+13, r24	; 0x0d
		n = n->next;
	}
	
	int y = 0;
	int z = 0;
	for (int i = 0; i < 64; ++i)
    14ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    14bc:	98 89       	ldd	r25, Y+16	; 0x10
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	98 8b       	std	Y+16, r25	; 0x10
    14c2:	8f 87       	std	Y+15, r24	; 0x0f
    14c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c6:	98 89       	ldd	r25, Y+16	; 0x10
    14c8:	80 34       	cpi	r24, 0x40	; 64
    14ca:	91 05       	cpc	r25, r1
    14cc:	0c f4       	brge	.+2      	; 0x14d0 <CreateFood+0x2bc>
			FreeRows[z] = Rows[z];
			++z;
		}
	}
	
	int index = Random() % size;
    14ce:	a5 cf       	rjmp	.-182    	; 0x141a <CreateFood+0x206>
    14d0:	a0 dc       	rcall	.-1728   	; 0xe12 <Random>
    14d2:	29 89       	ldd	r18, Y+17	; 0x11
    14d4:	3a 89       	ldd	r19, Y+18	; 0x12
    14d6:	b9 01       	movw	r22, r18
    14d8:	0e 94 3c 19 	call	0x3278	; 0x3278 <__udivmodhi4>
    14dc:	9c 8f       	std	Y+28, r25	; 0x1c
    14de:	8b 8f       	std	Y+27, r24	; 0x1b
	snake.foodindex.x = FreeCols[index];
    14e0:	2d 89       	ldd	r18, Y+21	; 0x15
    14e2:	3e 89       	ldd	r19, Y+22	; 0x16
    14e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e8:	82 0f       	add	r24, r18
    14ea:	93 1f       	adc	r25, r19
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <snake+0x9>
    14f8:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <snake+0x8>
	snake.foodindex.y = FreeRows[index];
    14fc:	29 8d       	ldd	r18, Y+25	; 0x19
    14fe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1500:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1502:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <snake+0xb>
    1514:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <snake+0xa>
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	fe be       	out	0x3e, r15	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	ed be       	out	0x3d, r14	; 61
}
    1522:	00 00       	nop
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	1e bf       	out	0x3e, r17	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0d bf       	out	0x3d, r16	; 61
    152e:	c4 5e       	subi	r28, 0xE4	; 228
    1530:	de 4f       	sbci	r29, 0xFE	; 254
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	08 95       	ret

0000154a <Game>:

enum GameState { GameInit, GameMainMenu, GameMenuDisplay, GameDifficultyMenu, GameButtonRelease, GameStart, GameDisplayScore, GamePaused, GameEnd, GameEndMessage, GameReset };

int Game(int state)
{
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	28 97       	sbiw	r28, 0x08	; 8
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	98 87       	std	Y+8, r25	; 0x08
    1560:	8f 83       	std	Y+7, r24	; 0x07
	static unsigned int Unpaused;
	unsigned char OnesBuffer[1];
	unsigned char TensBuffer[2];
	static unsigned int CursorCount = 8;
	
	unsigned char Button = ~PINA & 0x3C;
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	fc 01       	movw	r30, r24
    1568:	80 81       	ld	r24, Z
    156a:	80 95       	com	r24
    156c:	8c 73       	andi	r24, 0x3C	; 60
    156e:	8b 83       	std	Y+3, r24	; 0x03
	
	switch (state)
    1570:	8f 81       	ldd	r24, Y+7	; 0x07
    1572:	98 85       	ldd	r25, Y+8	; 0x08
    1574:	09 2e       	mov	r0, r25
    1576:	00 0c       	add	r0, r0
    1578:	aa 0b       	sbc	r26, r26
    157a:	bb 0b       	sbc	r27, r27
    157c:	40 e0       	ldi	r20, 0x00	; 0
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	2a e0       	ldi	r18, 0x0A	; 10
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	84 1b       	sub	r24, r20
    1586:	95 0b       	sbc	r25, r21
    1588:	28 17       	cp	r18, r24
    158a:	39 07       	cpc	r19, r25
    158c:	08 f4       	brcc	.+2      	; 0x1590 <Game+0x46>
    158e:	84 c3       	rjmp	.+1800   	; 0x1c98 <Game+0x74e>
    1590:	8a 5b       	subi	r24, 0xBA	; 186
    1592:	9f 4f       	sbci	r25, 0xFF	; 255
    1594:	fc 01       	movw	r30, r24
    1596:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__tablejump2__>
	{
		case GameInit:
			i = 0;
    159a:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <i.2318+0x1>
    159e:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <i.2318>
			j = 0;
    15a2:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <j.2319+0x1>
    15a6:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <j.2319>
			Options = 0;
    15aa:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <Options.2320+0x1>
    15ae:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <Options.2320>
			StartGame = 0;
    15b2:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <StartGame+0x1>
    15b6:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <StartGame>
			Score = 0;
    15ba:	10 92 d8 03 	sts	0x03D8, r1	; 0x8003d8 <Score.2321+0x1>
    15be:	10 92 d7 03 	sts	0x03D7, r1	; 0x8003d7 <Score.2321>
			Paused = 0;
    15c2:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <Paused+0x1>
    15c6:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <Paused>
			GCD = TempGCD;
    15ca:	80 91 2e 04 	lds	r24, 0x042E	; 0x80042e <TempGCD>
    15ce:	90 91 2f 04 	lds	r25, 0x042F	; 0x80042f <TempGCD+0x1>
    15d2:	a0 91 30 04 	lds	r26, 0x0430	; 0x800430 <TempGCD+0x2>
    15d6:	b0 91 31 04 	lds	r27, 0x0431	; 0x800431 <TempGCD+0x3>
    15da:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <GCD>
    15de:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <GCD+0x1>
    15e2:	a0 93 4c 04 	sts	0x044C, r26	; 0x80044c <GCD+0x2>
    15e6:	b0 93 4d 04 	sts	0x044D, r27	; 0x80044d <GCD+0x3>
			Unpaused = 0;
    15ea:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <Unpaused.2322+0x1>
    15ee:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <Unpaused.2322>
			Impossible = 0;
    15f2:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <Impossible+0x1>
    15f6:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <Impossible>
			sevenseg_clear();
    15fa:	92 da       	rcall	.-2780   	; 0xb20 <sevenseg_clear>
			sevenseg_write(1);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	63 da       	rcall	.-2874   	; 0xac6 <sevenseg_write>
			matrix_clear();
    1600:	0e 94 1d 01 	call	0x23a	; 0x23a <matrix_clear>
			ChangedDifficulty = 0;
    1604:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <ChangedDifficulty+0x1>
    1608:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <ChangedDifficulty>
			state = GameMenuDisplay;
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	98 87       	std	Y+8, r25	; 0x08
    1612:	8f 83       	std	Y+7, r24	; 0x07
			break;
    1614:	44 c3       	rjmp	.+1672   	; 0x1c9e <Game+0x754>
		
		case GameMainMenu:
			if (Button == 0x04)
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	c1 f4       	brne	.+48     	; 0x164c <Game+0x102>
			{
				++i;
    161c:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <i.2318>
    1620:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i.2318+0x1>
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <i.2318+0x1>
    162a:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <i.2318>
				if (i > 2)
    162e:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <i.2318>
    1632:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i.2318+0x1>
    1636:	03 97       	sbiw	r24, 0x03	; 3
    1638:	20 f0       	brcs	.+8      	; 0x1642 <Game+0xf8>
				{
					i = 0;
    163a:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <i.2318+0x1>
    163e:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <i.2318>
				}
			
				state = GameMenuDisplay;
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	98 87       	std	Y+8, r25	; 0x08
    1648:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GameMainMenu;
			}
			break;
    164a:	29 c3       	rjmp	.+1618   	; 0x1c9e <Game+0x754>
					i = 0;
				}
			
				state = GameMenuDisplay;
			}
			else if (Button == 0x08)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	88 30       	cpi	r24, 0x08	; 8
    1650:	09 f5       	brne	.+66     	; 0x1694 <Game+0x14a>
			{
				if (i == 1)
    1652:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <i.2318>
    1656:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i.2318+0x1>
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	29 f4       	brne	.+10     	; 0x1668 <Game+0x11e>
				{
					state = GameButtonRelease;
    165e:	84 e0       	ldi	r24, 0x04	; 4
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	98 87       	std	Y+8, r25	; 0x08
    1664:	8f 83       	std	Y+7, r24	; 0x07
					break;
    1666:	1b c3       	rjmp	.+1590   	; 0x1c9e <Game+0x754>
				}
				else if (i == 2)
    1668:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <i.2318>
    166c:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i.2318+0x1>
    1670:	02 97       	sbiw	r24, 0x02	; 2
    1672:	59 f4       	brne	.+22     	; 0x168a <Game+0x140>
				{
					Options = 1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	90 93 d6 03 	sts	0x03D6, r25	; 0x8003d6 <Options.2320+0x1>
    167c:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <Options.2320>
					state = GameMenuDisplay;
    1680:	82 e0       	ldi	r24, 0x02	; 2
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	98 87       	std	Y+8, r25	; 0x08
    1686:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GameMainMenu;
			}
			break;
    1688:	0a c3       	rjmp	.+1556   	; 0x1c9e <Game+0x754>
					Options = 1;
					state = GameMenuDisplay;
				}
				else
				{
					state = GameMainMenu;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	98 87       	std	Y+8, r25	; 0x08
    1690:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GameMainMenu;
			}
			break;
    1692:	05 c3       	rjmp	.+1546   	; 0x1c9e <Game+0x754>
					state = GameMainMenu;
				}
			}
			else
			{
				state = GameMainMenu;
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	98 87       	std	Y+8, r25	; 0x08
    169a:	8f 83       	std	Y+7, r24	; 0x07
			}
			break;
    169c:	00 c3       	rjmp	.+1536   	; 0x1c9e <Game+0x754>
		
			case GameMenuDisplay:
			if (i == 2 && Options)
    169e:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <i.2318>
    16a2:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i.2318+0x1>
    16a6:	02 97       	sbiw	r24, 0x02	; 2
    16a8:	d1 f4       	brne	.+52     	; 0x16de <Game+0x194>
    16aa:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <Options.2320>
    16ae:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <Options.2320+0x1>
    16b2:	89 2b       	or	r24, r25
			{
				LCD_ClearScreen();
    16b4:	a1 f0       	breq	.+40     	; 0x16de <Game+0x194>
    16b6:	cf d8       	rcall	.-3682   	; 0x856 <LCD_ClearScreen>
				LCD_DisplayString(1, Difficulty[j]);
    16b8:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.2319>
    16bc:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <j.2319+0x1>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	81 5f       	subi	r24, 0xF1	; 241
    16c6:	9e 4f       	sbci	r25, 0xFE	; 254
    16c8:	fc 01       	movw	r30, r24
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	bc 01       	movw	r22, r24
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	3f d9       	rcall	.-3458   	; 0x952 <LCD_DisplayString>
				state = GameDifficultyMenu;
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	98 87       	std	Y+8, r25	; 0x08
			{
				LCD_ClearScreen();
				LCD_DisplayString(1, Menu[i]);
				state = GameMainMenu;
			}
			break;
    16da:	8f 83       	std	Y+7, r24	; 0x07
				LCD_DisplayString(1, Difficulty[j]);
				state = GameDifficultyMenu;
			}
			else
			{
				LCD_ClearScreen();
    16dc:	e0 c2       	rjmp	.+1472   	; 0x1c9e <Game+0x754>
    16de:	bb d8       	rcall	.-3722   	; 0x856 <LCD_ClearScreen>
				LCD_DisplayString(1, Menu[i]);
    16e0:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <i.2318>
    16e4:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <i.2318+0x1>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	87 5e       	subi	r24, 0xE7	; 231
    16ee:	9e 4f       	sbci	r25, 0xFE	; 254
    16f0:	fc 01       	movw	r30, r24
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	bc 01       	movw	r22, r24
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	2b d9       	rcall	.-3498   	; 0x952 <LCD_DisplayString>
				state = GameMainMenu;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	98 87       	std	Y+8, r25	; 0x08
    1702:	8f 83       	std	Y+7, r24	; 0x07
			}
			break;
    1704:	cc c2       	rjmp	.+1432   	; 0x1c9e <Game+0x754>
		
		case GameDifficultyMenu:
			if (Button == 0x04)
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	84 30       	cpi	r24, 0x04	; 4
    170a:	c1 f4       	brne	.+48     	; 0x173c <Game+0x1f2>
			{
				++j;
    170c:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.2319>
    1710:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <j.2319+0x1>
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	90 93 d4 03 	sts	0x03D4, r25	; 0x8003d4 <j.2319+0x1>
    171a:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <j.2319>
				if (j > 4)
    171e:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.2319>
    1722:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <j.2319+0x1>
    1726:	05 97       	sbiw	r24, 0x05	; 5
    1728:	20 f0       	brcs	.+8      	; 0x1732 <Game+0x1e8>
				{
					j = 0;
    172a:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <j.2319+0x1>
    172e:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <j.2319>
				}
			
				state = GameMenuDisplay;
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	98 87       	std	Y+8, r25	; 0x08
    1738:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GameDifficultyMenu;
			}
			break;
    173a:	b1 c2       	rjmp	.+1378   	; 0x1c9e <Game+0x754>
					j = 0;
				}
			
				state = GameMenuDisplay;
			}
			else if (Button == 0x08)
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 30       	cpi	r24, 0x08	; 8
    1740:	09 f0       	breq	.+2      	; 0x1744 <Game+0x1fa>
    1742:	51 c1       	rjmp	.+674    	; 0x19e6 <Game+0x49c>
			{
				if (j == 0)
    1744:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.2319>
    1748:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <j.2319+0x1>
    174c:	89 2b       	or	r24, r25
    174e:	09 f0       	breq	.+2      	; 0x1752 <Game+0x208>
    1750:	4a c0       	rjmp	.+148    	; 0x17e6 <Game+0x29c>
				{
					GameStateCalc = 100;
    1752:	84 e6       	ldi	r24, 0x64	; 100
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <GameStateCalc>
    175e:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <GameStateCalc+0x1>
    1762:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <GameStateCalc+0x2>
    1766:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <GameStateCalc+0x3>
					MoveStateCalc = 100;
    176a:	84 e6       	ldi	r24, 0x64	; 100
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	a0 e0       	ldi	r26, 0x00	; 0
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <MoveStateCalc>
    1776:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <MoveStateCalc+0x1>
    177a:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <MoveStateCalc+0x2>
    177e:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <MoveStateCalc+0x3>
					CollisionStateCalc = 100;
    1782:	84 e6       	ldi	r24, 0x64	; 100
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <CollisionStateCalc>
    178e:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <CollisionStateCalc+0x1>
    1792:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <CollisionStateCalc+0x2>
    1796:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <CollisionStateCalc+0x3>
					FoodStateCalc = 100;
    179a:	84 e6       	ldi	r24, 0x64	; 100
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <FoodStateCalc>
    17a6:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <FoodStateCalc+0x1>
    17aa:	a0 93 38 04 	sts	0x0438, r26	; 0x800438 <FoodStateCalc+0x2>
    17ae:	b0 93 39 04 	sts	0x0439, r27	; 0x800439 <FoodStateCalc+0x3>
					SoundStateCalc = 50;
    17b2:	82 e3       	ldi	r24, 0x32	; 50
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e0       	ldi	r26, 0x00	; 0
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <SoundStateCalc>
    17be:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <SoundStateCalc+0x1>
    17c2:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <SoundStateCalc+0x2>
    17c6:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <SoundStateCalc+0x3>
					Options = 0;
    17ca:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <Options.2320+0x1>
					sevenseg_clear();
    17ce:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <Options.2320>
					sevenseg_write(1);
    17d2:	a6 d9       	rcall	.-3252   	; 0xb20 <sevenseg_clear>
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	77 d9       	rcall	.-3346   	; 0xac6 <sevenseg_write>
					ChangedDifficulty = 1;
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <ChangedDifficulty+0x1>
    17e0:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <ChangedDifficulty>
    17e4:	f7 c0       	rjmp	.+494    	; 0x19d4 <Game+0x48a>
				}
				else if (j == 1)
    17e6:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.2319>
    17ea:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <j.2319+0x1>
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <Game+0x2aa>
    17f2:	4a c0       	rjmp	.+148    	; 0x1888 <Game+0x33e>
				{
					GameStateCalc = 100;
    17f4:	84 e6       	ldi	r24, 0x64	; 100
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e0       	ldi	r26, 0x00	; 0
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <GameStateCalc>
    1800:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <GameStateCalc+0x1>
    1804:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <GameStateCalc+0x2>
    1808:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <GameStateCalc+0x3>
					MoveStateCalc = 75;
    180c:	8b e4       	ldi	r24, 0x4B	; 75
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <MoveStateCalc>
    1818:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <MoveStateCalc+0x1>
    181c:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <MoveStateCalc+0x2>
    1820:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <MoveStateCalc+0x3>
					CollisionStateCalc = 75;
    1824:	8b e4       	ldi	r24, 0x4B	; 75
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <CollisionStateCalc>
    1830:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <CollisionStateCalc+0x1>
    1834:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <CollisionStateCalc+0x2>
    1838:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <CollisionStateCalc+0x3>
					FoodStateCalc = 75;
    183c:	8b e4       	ldi	r24, 0x4B	; 75
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 e0       	ldi	r26, 0x00	; 0
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <FoodStateCalc>
    1848:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <FoodStateCalc+0x1>
    184c:	a0 93 38 04 	sts	0x0438, r26	; 0x800438 <FoodStateCalc+0x2>
    1850:	b0 93 39 04 	sts	0x0439, r27	; 0x800439 <FoodStateCalc+0x3>
					SoundStateCalc = 50;			
    1854:	82 e3       	ldi	r24, 0x32	; 50
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <SoundStateCalc>
    1860:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <SoundStateCalc+0x1>
    1864:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <SoundStateCalc+0x2>
					Options = 0;
    1868:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <SoundStateCalc+0x3>
    186c:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <Options.2320+0x1>
					sevenseg_clear();
    1870:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <Options.2320>
					sevenseg_write(2);	
    1874:	55 d9       	rcall	.-3414   	; 0xb20 <sevenseg_clear>
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	26 d9       	rcall	.-3508   	; 0xac6 <sevenseg_write>
					ChangedDifficulty = 1;			
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <ChangedDifficulty+0x1>
    1882:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <ChangedDifficulty>
    1886:	a6 c0       	rjmp	.+332    	; 0x19d4 <Game+0x48a>
				}
				else if (j == 2)
    1888:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.2319>
    188c:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <j.2319+0x1>
    1890:	02 97       	sbiw	r24, 0x02	; 2
    1892:	09 f0       	breq	.+2      	; 0x1896 <Game+0x34c>
    1894:	4a c0       	rjmp	.+148    	; 0x192a <Game+0x3e0>
				{
					GameStateCalc = 100;
    1896:	84 e6       	ldi	r24, 0x64	; 100
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e0       	ldi	r26, 0x00	; 0
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <GameStateCalc>
    18a2:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <GameStateCalc+0x1>
    18a6:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <GameStateCalc+0x2>
    18aa:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <GameStateCalc+0x3>
					MoveStateCalc = 50;
    18ae:	82 e3       	ldi	r24, 0x32	; 50
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a0 e0       	ldi	r26, 0x00	; 0
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <MoveStateCalc>
    18ba:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <MoveStateCalc+0x1>
    18be:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <MoveStateCalc+0x2>
    18c2:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <MoveStateCalc+0x3>
					CollisionStateCalc = 50;
    18c6:	82 e3       	ldi	r24, 0x32	; 50
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a0 e0       	ldi	r26, 0x00	; 0
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <CollisionStateCalc>
    18d2:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <CollisionStateCalc+0x1>
    18d6:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <CollisionStateCalc+0x2>
    18da:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <CollisionStateCalc+0x3>
					FoodStateCalc = 50;
    18de:	82 e3       	ldi	r24, 0x32	; 50
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 e0       	ldi	r26, 0x00	; 0
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <FoodStateCalc>
    18ea:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <FoodStateCalc+0x1>
    18ee:	a0 93 38 04 	sts	0x0438, r26	; 0x800438 <FoodStateCalc+0x2>
    18f2:	b0 93 39 04 	sts	0x0439, r27	; 0x800439 <FoodStateCalc+0x3>
					SoundStateCalc = 50;			
    18f6:	82 e3       	ldi	r24, 0x32	; 50
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a0 e0       	ldi	r26, 0x00	; 0
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <SoundStateCalc>
    1902:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <SoundStateCalc+0x1>
    1906:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <SoundStateCalc+0x2>
					Options = 0;
    190a:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <SoundStateCalc+0x3>
    190e:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <Options.2320+0x1>
					sevenseg_clear();
    1912:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <Options.2320>
					sevenseg_write(3);		
    1916:	04 d9       	rcall	.-3576   	; 0xb20 <sevenseg_clear>
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	d5 d8       	rcall	.-3670   	; 0xac6 <sevenseg_write>
					ChangedDifficulty = 1;		
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <ChangedDifficulty+0x1>
    1924:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <ChangedDifficulty>
    1928:	55 c0       	rjmp	.+170    	; 0x19d4 <Game+0x48a>
				}
				else if (j == 3)
    192a:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.2319>
    192e:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <j.2319+0x1>
    1932:	03 97       	sbiw	r24, 0x03	; 3
    1934:	09 f0       	breq	.+2      	; 0x1938 <Game+0x3ee>
    1936:	4a c0       	rjmp	.+148    	; 0x19cc <Game+0x482>
				{
					GameStateCalc = 100;
    1938:	84 e6       	ldi	r24, 0x64	; 100
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a0 e0       	ldi	r26, 0x00	; 0
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <GameStateCalc>
    1944:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <GameStateCalc+0x1>
    1948:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <GameStateCalc+0x2>
    194c:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <GameStateCalc+0x3>
					MoveStateCalc = 25;
    1950:	89 e1       	ldi	r24, 0x19	; 25
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e0       	ldi	r26, 0x00	; 0
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <MoveStateCalc>
    195c:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <MoveStateCalc+0x1>
    1960:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <MoveStateCalc+0x2>
    1964:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <MoveStateCalc+0x3>
					CollisionStateCalc = 25;
    1968:	89 e1       	ldi	r24, 0x19	; 25
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	a0 e0       	ldi	r26, 0x00	; 0
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <CollisionStateCalc>
    1974:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <CollisionStateCalc+0x1>
    1978:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <CollisionStateCalc+0x2>
    197c:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <CollisionStateCalc+0x3>
					FoodStateCalc = 25;
    1980:	89 e1       	ldi	r24, 0x19	; 25
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <FoodStateCalc>
    198c:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <FoodStateCalc+0x1>
    1990:	a0 93 38 04 	sts	0x0438, r26	; 0x800438 <FoodStateCalc+0x2>
    1994:	b0 93 39 04 	sts	0x0439, r27	; 0x800439 <FoodStateCalc+0x3>
					SoundStateCalc = 50;
    1998:	82 e3       	ldi	r24, 0x32	; 50
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	a0 e0       	ldi	r26, 0x00	; 0
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <SoundStateCalc>
    19a4:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <SoundStateCalc+0x1>
    19a8:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <SoundStateCalc+0x2>
					Options = 0;
    19ac:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <SoundStateCalc+0x3>
    19b0:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <Options.2320+0x1>
					sevenseg_clear();
    19b4:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <Options.2320>
					sevenseg_write(4);			
    19b8:	b3 d8       	rcall	.-3738   	; 0xb20 <sevenseg_clear>
    19ba:	84 e0       	ldi	r24, 0x04	; 4
    19bc:	84 d8       	rcall	.-3832   	; 0xac6 <sevenseg_write>
					ChangedDifficulty = 1;	
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	90 93 47 04 	sts	0x0447, r25	; 0x800447 <ChangedDifficulty+0x1>
    19c6:	80 93 46 04 	sts	0x0446, r24	; 0x800446 <ChangedDifficulty>
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <Game+0x48a>
				}
				else
				{
					Options = 0;
    19cc:	10 92 d6 03 	sts	0x03D6, r1	; 0x8003d6 <Options.2320+0x1>
    19d0:	10 92 d5 03 	sts	0x03D5, r1	; 0x8003d5 <Options.2320>
				}
			
				j = 0;
    19d4:	10 92 d4 03 	sts	0x03D4, r1	; 0x8003d4 <j.2319+0x1>
    19d8:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <j.2319>
				state = GameMenuDisplay;
    19dc:	82 e0       	ldi	r24, 0x02	; 2
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	98 87       	std	Y+8, r25	; 0x08
    19e2:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GameDifficultyMenu;
			}
			break;
    19e4:	5c c1       	rjmp	.+696    	; 0x1c9e <Game+0x754>
				j = 0;
				state = GameMenuDisplay;
			}
			else
			{
				state = GameDifficultyMenu;
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	98 87       	std	Y+8, r25	; 0x08
    19ec:	8f 83       	std	Y+7, r24	; 0x07
			}
			break;
    19ee:	57 c1       	rjmp	.+686    	; 0x1c9e <Game+0x754>
		
		case GameButtonRelease:
			if (!Button && !Paused)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	88 23       	and	r24, r24
    19f4:	f1 f4       	brne	.+60     	; 0x1a32 <Game+0x4e8>
    19f6:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <Paused>
    19fa:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <Paused+0x1>
    19fe:	89 2b       	or	r24, r25
    1a00:	c1 f4       	brne	.+48     	; 0x1a32 <Game+0x4e8>
			{
				LCD_ClearScreen();
    1a02:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_ClearScreen>
				LCD_DisplayString(1, "Score: ");
    1a06:	6b e3       	ldi	r22, 0x3B	; 59
    1a08:	73 e0       	ldi	r23, 0x03	; 3
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_DisplayString>
				LCD_Cursor(CursorCount);
    1a10:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CursorCount.2325>
    1a14:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <CursorCount.2325+0x1>
    1a18:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCD_Cursor>
				StartGame = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 53 04 	sts	0x0453, r25	; 0x800453 <StartGame+0x1>
    1a24:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <StartGame>
				state = GameDisplayScore;
    1a28:	86 e0       	ldi	r24, 0x06	; 6
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	98 87       	std	Y+8, r25	; 0x08
    1a2e:	8f 83       	std	Y+7, r24	; 0x07
    1a30:	2b c0       	rjmp	.+86     	; 0x1a88 <Game+0x53e>
			}
			else if (!Button && Paused && !Unpaused)
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 23       	and	r24, r24
    1a36:	89 f4       	brne	.+34     	; 0x1a5a <Game+0x510>
    1a38:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <Paused>
    1a3c:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <Paused+0x1>
    1a40:	89 2b       	or	r24, r25
    1a42:	59 f0       	breq	.+22     	; 0x1a5a <Game+0x510>
    1a44:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <Unpaused.2322>
    1a48:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <Unpaused.2322+0x1>
    1a4c:	89 2b       	or	r24, r25
    1a4e:	29 f4       	brne	.+10     	; 0x1a5a <Game+0x510>
			{
				state = GamePaused;
    1a50:	87 e0       	ldi	r24, 0x07	; 7
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	98 87       	std	Y+8, r25	; 0x08
    1a56:	8f 83       	std	Y+7, r24	; 0x07
    1a58:	17 c0       	rjmp	.+46     	; 0x1a88 <Game+0x53e>
			}
			else if (!Button && Unpaused)
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 23       	and	r24, r24
    1a5e:	79 f4       	brne	.+30     	; 0x1a7e <Game+0x534>
    1a60:	80 91 d9 03 	lds	r24, 0x03D9	; 0x8003d9 <Unpaused.2322>
    1a64:	90 91 da 03 	lds	r25, 0x03DA	; 0x8003da <Unpaused.2322+0x1>
    1a68:	89 2b       	or	r24, r25
    1a6a:	49 f0       	breq	.+18     	; 0x1a7e <Game+0x534>
			{
				Paused = 0;
    1a6c:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <Paused+0x1>
    1a70:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <Paused>
				state = GameDisplayScore;
    1a74:	86 e0       	ldi	r24, 0x06	; 6
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	98 87       	std	Y+8, r25	; 0x08
    1a7a:	8f 83       	std	Y+7, r24	; 0x07
    1a7c:	05 c0       	rjmp	.+10     	; 0x1a88 <Game+0x53e>
			}
			else
			{
				state = GameButtonRelease;
    1a7e:	84 e0       	ldi	r24, 0x04	; 4
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	98 87       	std	Y+8, r25	; 0x08
    1a84:	8f 83       	std	Y+7, r24	; 0x07
			}
			break;
    1a86:	0b c1       	rjmp	.+534    	; 0x1c9e <Game+0x754>
    1a88:	0a c1       	rjmp	.+532    	; 0x1c9e <Game+0x754>
		
		case GameStart:
			if (Button == 0x08)
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	88 30       	cpi	r24, 0x08	; 8
    1a8e:	a1 f4       	brne	.+40     	; 0x1ab8 <Game+0x56e>
			{
				Paused = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	90 93 49 04 	sts	0x0449, r25	; 0x800449 <Paused+0x1>
    1a98:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <Paused>
				Unpaused = 0;
    1a9c:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <Unpaused.2322+0x1>
    1aa0:	10 92 d9 03 	sts	0x03D9, r1	; 0x8003d9 <Unpaused.2322>
				LCD_DisplayString(1, "Paused");
    1aa4:	63 e4       	ldi	r22, 0x43	; 67
    1aa6:	73 e0       	ldi	r23, 0x03	; 3
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_DisplayString>
				state = GameButtonRelease;
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	98 87       	std	Y+8, r25	; 0x08
    1ab4:	8f 83       	std	Y+7, r24	; 0x07
				else
				{
					state = GameStart;
				}
			}
			break;
    1ab6:	f3 c0       	rjmp	.+486    	; 0x1c9e <Game+0x754>
				Paused = 1;
				Unpaused = 0;
				LCD_DisplayString(1, "Paused");
				state = GameButtonRelease;
			}
			else if (Button == 0x10)
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	80 31       	cpi	r24, 0x10	; 16
    1abc:	29 f4       	brne	.+10     	; 0x1ac8 <Game+0x57e>
			{
				state = GameReset;
    1abe:	8a e0       	ldi	r24, 0x0A	; 10
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	98 87       	std	Y+8, r25	; 0x08
    1ac4:	8f 83       	std	Y+7, r24	; 0x07
				else
				{
					state = GameStart;
				}
			}
			break;
    1ac6:	eb c0       	rjmp	.+470    	; 0x1c9e <Game+0x754>
			}
			else if (Button == 0x10)
			{
				state = GameReset;
			}
			else if (Button == 0x20)
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	80 32       	cpi	r24, 0x20	; 32
    1acc:	79 f4       	brne	.+30     	; 0x1aec <Game+0x5a2>
			{
				StartGame = 0;
    1ace:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <StartGame+0x1>
    1ad2:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <StartGame>
				Score = 63;
    1ad6:	8f e3       	ldi	r24, 0x3F	; 63
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <Score.2321+0x1>
    1ade:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <Score.2321>
				state = GameEndMessage;
    1ae2:	89 e0       	ldi	r24, 0x09	; 9
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	98 87       	std	Y+8, r25	; 0x08
    1ae8:	8f 83       	std	Y+7, r24	; 0x07
				else
				{
					state = GameStart;
				}
			}
			break;
    1aea:	d9 c0       	rjmp	.+434    	; 0x1c9e <Game+0x754>
				Score = 63;
				state = GameEndMessage;
			}
			else
			{
				if (CollisionFood)
    1aec:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <CollisionFood>
    1af0:	90 91 33 04 	lds	r25, 0x0433	; 0x800433 <CollisionFood+0x1>
    1af4:	89 2b       	or	r24, r25
    1af6:	71 f0       	breq	.+28     	; 0x1b14 <Game+0x5ca>
				{
					++Score;
    1af8:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Score.2321>
    1afc:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <Score.2321+0x1>
    1b00:	01 96       	adiw	r24, 0x01	; 1
    1b02:	90 93 d8 03 	sts	0x03D8, r25	; 0x8003d8 <Score.2321+0x1>
    1b06:	80 93 d7 03 	sts	0x03D7, r24	; 0x8003d7 <Score.2321>
					state = GameDisplayScore;
    1b0a:	86 e0       	ldi	r24, 0x06	; 6
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	98 87       	std	Y+8, r25	; 0x08
    1b10:	8f 83       	std	Y+7, r24	; 0x07
				else
				{
					state = GameStart;
				}
			}
			break;
    1b12:	c5 c0       	rjmp	.+394    	; 0x1c9e <Game+0x754>
				if (CollisionFood)
				{
					++Score;
					state = GameDisplayScore;
				}
				else if (CollisionSelf)
    1b14:	80 91 44 04 	lds	r24, 0x0444	; 0x800444 <CollisionSelf>
    1b18:	90 91 45 04 	lds	r25, 0x0445	; 0x800445 <CollisionSelf+0x1>
    1b1c:	89 2b       	or	r24, r25
    1b1e:	49 f0       	breq	.+18     	; 0x1b32 <Game+0x5e8>
				{
					StartGame = 0;
    1b20:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <StartGame+0x1>
    1b24:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <StartGame>
					state = GameEndMessage;
    1b28:	89 e0       	ldi	r24, 0x09	; 9
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	98 87       	std	Y+8, r25	; 0x08
    1b2e:	8f 83       	std	Y+7, r24	; 0x07
				else
				{
					state = GameStart;
				}
			}
			break;
    1b30:	b6 c0       	rjmp	.+364    	; 0x1c9e <Game+0x754>
					StartGame = 0;
					state = GameEndMessage;
				}
				else
				{
					state = GameStart;
    1b32:	85 e0       	ldi	r24, 0x05	; 5
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	98 87       	std	Y+8, r25	; 0x08
    1b38:	8f 83       	std	Y+7, r24	; 0x07
				}
			}
			break;
    1b3a:	b1 c0       	rjmp	.+354    	; 0x1c9e <Game+0x754>
		
		case GameDisplayScore:
			CursorCount = 8;
    1b3c:	88 e0       	ldi	r24, 0x08	; 8
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <CursorCount.2325+0x1>
    1b44:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <CursorCount.2325>
			LCD_Cursor(CursorCount);
    1b48:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CursorCount.2325>
    1b4c:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <CursorCount.2325+0x1>
    1b50:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCD_Cursor>
			if (Score >= 10)
    1b54:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Score.2321>
    1b58:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <Score.2321+0x1>
    1b5c:	0a 97       	sbiw	r24, 0x0a	; 10
    1b5e:	9c f1       	brlt	.+102    	; 0x1bc6 <Game+0x67c>
			{
				itoa(Score, TensBuffer, 10);
    1b60:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Score.2321>
    1b64:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <Score.2321+0x1>
    1b68:	9e 01       	movw	r18, r28
    1b6a:	2b 5f       	subi	r18, 0xFB	; 251
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	4a e0       	ldi	r20, 0x0A	; 10
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	b9 01       	movw	r22, r18
    1b74:	0e 94 9c 1a 	call	0x3538	; 0x3538 <itoa>
				for (unsigned int i = 0; i < 2; ++i)
    1b78:	1a 82       	std	Y+2, r1	; 0x02
    1b7a:	19 82       	std	Y+1, r1	; 0x01
    1b7c:	1f c0       	rjmp	.+62     	; 0x1bbc <Game+0x672>
				{
					LCD_WriteData(TensBuffer[i]);
    1b7e:	9e 01       	movw	r18, r28
    1b80:	2b 5f       	subi	r18, 0xFB	; 251
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	9a 81       	ldd	r25, Y+2	; 0x02
    1b88:	82 0f       	add	r24, r18
    1b8a:	93 1f       	adc	r25, r19
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	80 81       	ld	r24, Z
    1b90:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_WriteData>
					LCD_Cursor(++CursorCount);
    1b94:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CursorCount.2325>
    1b98:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <CursorCount.2325+0x1>
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <CursorCount.2325+0x1>
    1ba2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <CursorCount.2325>
    1ba6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CursorCount.2325>
    1baa:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <CursorCount.2325+0x1>
    1bae:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <LCD_Cursor>
			CursorCount = 8;
			LCD_Cursor(CursorCount);
			if (Score >= 10)
			{
				itoa(Score, TensBuffer, 10);
				for (unsigned int i = 0; i < 2; ++i)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	9a 83       	std	Y+2, r25	; 0x02
    1bba:	89 83       	std	Y+1, r24	; 0x01
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc0:	02 97       	sbiw	r24, 0x02	; 2
    1bc2:	e8 f2       	brcs	.-70     	; 0x1b7e <Game+0x634>
    1bc4:	0f c0       	rjmp	.+30     	; 0x1be4 <Game+0x69a>
					LCD_Cursor(++CursorCount);
				}
			}
			else
			{
				itoa(Score, OnesBuffer, 10);
    1bc6:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Score.2321>
    1bca:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <Score.2321+0x1>
    1bce:	9e 01       	movw	r18, r28
    1bd0:	2c 5f       	subi	r18, 0xFC	; 252
    1bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd4:	4a e0       	ldi	r20, 0x0A	; 10
    1bd6:	50 e0       	ldi	r21, 0x00	; 0
    1bd8:	b9 01       	movw	r22, r18
    1bda:	0e 94 9c 1a 	call	0x3538	; 0x3538 <itoa>
				LCD_WriteData(OnesBuffer[0]);
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_WriteData>
			}
			if (Score >= 63)
    1be4:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Score.2321>
    1be8:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <Score.2321+0x1>
    1bec:	cf 97       	sbiw	r24, 0x3f	; 63
    1bee:	2c f0       	brlt	.+10     	; 0x1bfa <Game+0x6b0>
			{
				state = GameEndMessage;
    1bf0:	89 e0       	ldi	r24, 0x09	; 9
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	98 87       	std	Y+8, r25	; 0x08
    1bf6:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GameStart;
			}
			break;
    1bf8:	52 c0       	rjmp	.+164    	; 0x1c9e <Game+0x754>
			{
				state = GameEndMessage;
			}
			else
			{
				state = GameStart;
    1bfa:	85 e0       	ldi	r24, 0x05	; 5
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	98 87       	std	Y+8, r25	; 0x08
    1c00:	8f 83       	std	Y+7, r24	; 0x07
			}
			break;
    1c02:	4d c0       	rjmp	.+154    	; 0x1c9e <Game+0x754>
		
		case GamePaused:
			if (Button == 0x08)
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	91 f4       	brne	.+36     	; 0x1c2e <Game+0x6e4>
			{
				LCD_ClearScreen();
    1c0a:	0e 94 2b 04 	call	0x856	; 0x856 <LCD_ClearScreen>
				LCD_DisplayString(1, "Score: ");
    1c0e:	6b e3       	ldi	r22, 0x3B	; 59
    1c10:	73 e0       	ldi	r23, 0x03	; 3
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_DisplayString>
				Unpaused = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <Unpaused.2322+0x1>
    1c20:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <Unpaused.2322>
				state = GameButtonRelease;
    1c24:	84 e0       	ldi	r24, 0x04	; 4
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	98 87       	std	Y+8, r25	; 0x08
    1c2a:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GamePaused;
			}
			break;
    1c2c:	38 c0       	rjmp	.+112    	; 0x1c9e <Game+0x754>
				LCD_ClearScreen();
				LCD_DisplayString(1, "Score: ");
				Unpaused = 1;
				state = GameButtonRelease;
			}
			else if (Button == 0x10)
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	80 31       	cpi	r24, 0x10	; 16
    1c32:	29 f4       	brne	.+10     	; 0x1c3e <Game+0x6f4>
			{
				state = GameReset;
    1c34:	8a e0       	ldi	r24, 0x0A	; 10
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	98 87       	std	Y+8, r25	; 0x08
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GamePaused;
			}
			break;
    1c3c:	30 c0       	rjmp	.+96     	; 0x1c9e <Game+0x754>
			{
				state = GameReset;
			}
			else
			{
				state = GamePaused;
    1c3e:	87 e0       	ldi	r24, 0x07	; 7
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	98 87       	std	Y+8, r25	; 0x08
    1c44:	8f 83       	std	Y+7, r24	; 0x07
			}
			break;
    1c46:	2b c0       	rjmp	.+86     	; 0x1c9e <Game+0x754>
		
		case GameEnd:
			if (Button != 0x10)
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	80 31       	cpi	r24, 0x10	; 16
    1c4c:	29 f0       	breq	.+10     	; 0x1c58 <Game+0x70e>
			{
				state = GameEnd;
    1c4e:	88 e0       	ldi	r24, 0x08	; 8
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	8f 83       	std	Y+7, r24	; 0x07
			}
			else
			{
				state = GameInit;
			}
			break;
    1c56:	23 c0       	rjmp	.+70     	; 0x1c9e <Game+0x754>
			{
				state = GameEnd;
			}
			else
			{
				state = GameInit;
    1c58:	18 86       	std	Y+8, r1	; 0x08
    1c5a:	1f 82       	std	Y+7, r1	; 0x07
			}
			break;
    1c5c:	20 c0       	rjmp	.+64     	; 0x1c9e <Game+0x754>
		
		case GameEndMessage:
			if (Score >= 63)
    1c5e:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <Score.2321>
    1c62:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <Score.2321+0x1>
    1c66:	cf 97       	sbiw	r24, 0x3f	; 63
    1c68:	34 f0       	brlt	.+12     	; 0x1c76 <Game+0x72c>
			{
				LCD_DisplayString(1, "Congratulations!You win!");
    1c6a:	6a e4       	ldi	r22, 0x4A	; 74
    1c6c:	73 e0       	ldi	r23, 0x03	; 3
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_DisplayString>
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <Game+0x736>
			}
			else
			{
				LCD_DisplayString(1, "You lose!       Nice try!");
    1c76:	63 e6       	ldi	r22, 0x63	; 99
    1c78:	73 e0       	ldi	r23, 0x03	; 3
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_DisplayString>
			}
			state = GameEnd;
    1c80:	88 e0       	ldi	r24, 0x08	; 8
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	98 87       	std	Y+8, r25	; 0x08
    1c86:	8f 83       	std	Y+7, r24	; 0x07
			break;
    1c88:	0a c0       	rjmp	.+20     	; 0x1c9e <Game+0x754>
		
		case GameReset:
			StartGame = 0;
    1c8a:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <StartGame+0x1>
    1c8e:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <StartGame>
			state = GameInit;
    1c92:	18 86       	std	Y+8, r1	; 0x08
    1c94:	1f 82       	std	Y+7, r1	; 0x07
			break;
    1c96:	03 c0       	rjmp	.+6      	; 0x1c9e <Game+0x754>
		
		default:
			state = GameInit;
    1c98:	18 86       	std	Y+8, r1	; 0x08
    1c9a:	1f 82       	std	Y+7, r1	; 0x07
			break;
    1c9c:	00 00       	nop
	}
	
	return state;
    1c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca0:	98 85       	ldd	r25, Y+8	; 0x08
}
    1ca2:	28 96       	adiw	r28, 0x08	; 8
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <Move>:

enum MoveState { MoveInit, MoveWait, MoveDisplace };

int Move(int state)
{
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <Move+0x6>
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	9a 83       	std	Y+2, r25	; 0x02
    1cc0:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc6:	81 30       	cpi	r24, 0x01	; 1
    1cc8:	91 05       	cpc	r25, r1
    1cca:	b1 f0       	breq	.+44     	; 0x1cf8 <Move+0x44>
    1ccc:	82 30       	cpi	r24, 0x02	; 2
    1cce:	91 05       	cpc	r25, r1
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <Move+0x20>
    1cd2:	8e c0       	rjmp	.+284    	; 0x1df0 <Move+0x13c>
    1cd4:	89 2b       	or	r24, r25
    1cd6:	09 f0       	breq	.+2      	; 0x1cda <Move+0x26>
    1cd8:	ce c1       	rjmp	.+924    	; 0x2076 <Move+0x3c2>
	{
		case MoveInit:
		if (StartGame)
    1cda:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    1cde:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    1ce2:	89 2b       	or	r24, r25
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <Move+0x3e>
		{
			InitSnake();
    1ce6:	0e d8       	rcall	.-4068   	; 0xd04 <InitSnake>
			state = MoveWait;
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			state = MoveInit;
		}
		break;
    1cf0:	c6 c1       	rjmp	.+908    	; 0x207e <Move+0x3ca>
			InitSnake();
			state = MoveWait;
		}
		else
		{
			state = MoveInit;
    1cf2:	1a 82       	std	Y+2, r1	; 0x02
    1cf4:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
    1cf6:	c3 c1       	rjmp	.+902    	; 0x207e <Move+0x3ca>
		
		case MoveWait:
		if (StartGame && !Paused)
    1cf8:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    1cfc:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    1d00:	89 2b       	or	r24, r25
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <Move+0x52>
    1d04:	67 c0       	rjmp	.+206    	; 0x1dd4 <Move+0x120>
    1d06:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <Paused>
    1d0a:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <Paused+0x1>
    1d0e:	89 2b       	or	r24, r25
    1d10:	09 f0       	breq	.+2      	; 0x1d14 <Move+0x60>
    1d12:	60 c0       	rjmp	.+192    	; 0x1dd4 <Move+0x120>
		{
			if (GetDirection() == Up && snake.Direction != Down)
    1d14:	7e d9       	rcall	.-3332   	; 0x1012 <GetDirection>
    1d16:	9c 01       	movw	r18, r24
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	28 17       	cp	r18, r24
    1d1e:	39 07       	cpc	r19, r25
    1d20:	81 f4       	brne	.+32     	; 0x1d42 <Move+0x8e>
    1d22:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1d26:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	28 17       	cp	r18, r24
    1d30:	39 07       	cpc	r19, r25
    1d32:	39 f0       	breq	.+14     	; 0x1d42 <Move+0x8e>
			{
				snake.Direction = Up;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <snake+0x3>
    1d3c:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <snake+0x2>
			}
			else if (GetDirection() == Down && snake.Direction != Up)
    1d40:	44 c0       	rjmp	.+136    	; 0x1dca <Move+0x116>
    1d42:	67 d9       	rcall	.-3378   	; 0x1012 <GetDirection>
    1d44:	9c 01       	movw	r18, r24
    1d46:	82 e0       	ldi	r24, 0x02	; 2
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	28 17       	cp	r18, r24
    1d4c:	39 07       	cpc	r19, r25
    1d4e:	81 f4       	brne	.+32     	; 0x1d70 <Move+0xbc>
    1d50:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1d54:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	28 17       	cp	r18, r24
    1d5e:	39 07       	cpc	r19, r25
    1d60:	39 f0       	breq	.+14     	; 0x1d70 <Move+0xbc>
			{
				snake.Direction = Down;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <snake+0x3>
    1d6a:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <snake+0x2>
			}
			else if (GetDirection() == Left && snake.Direction != Right)
    1d6e:	2d c0       	rjmp	.+90     	; 0x1dca <Move+0x116>
    1d70:	50 d9       	rcall	.-3424   	; 0x1012 <GetDirection>
    1d72:	9c 01       	movw	r18, r24
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	28 17       	cp	r18, r24
    1d7a:	39 07       	cpc	r19, r25
    1d7c:	81 f4       	brne	.+32     	; 0x1d9e <Move+0xea>
    1d7e:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1d82:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1d86:	84 e0       	ldi	r24, 0x04	; 4
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	28 17       	cp	r18, r24
    1d8c:	39 07       	cpc	r19, r25
    1d8e:	39 f0       	breq	.+14     	; 0x1d9e <Move+0xea>
			{
				snake.Direction = Left;
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <snake+0x3>
    1d98:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <snake+0x2>
			}
			else if (GetDirection() == Right && snake.Direction != Left)
    1d9c:	16 c0       	rjmp	.+44     	; 0x1dca <Move+0x116>
    1d9e:	39 d9       	rcall	.-3470   	; 0x1012 <GetDirection>
    1da0:	9c 01       	movw	r18, r24
    1da2:	84 e0       	ldi	r24, 0x04	; 4
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	28 17       	cp	r18, r24
    1da8:	39 07       	cpc	r19, r25
    1daa:	79 f4       	brne	.+30     	; 0x1dca <Move+0x116>
    1dac:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1db0:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	28 17       	cp	r18, r24
    1dba:	39 07       	cpc	r19, r25
    1dbc:	31 f0       	breq	.+12     	; 0x1dca <Move+0x116>
			{
				snake.Direction = Right;
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	90 93 1d 04 	sts	0x041D, r25	; 0x80041d <snake+0x3>
    1dc6:	80 93 1c 04 	sts	0x041C, r24	; 0x80041c <snake+0x2>
			}

			state = MoveDisplace;
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	04 c0       	rjmp	.+8      	; 0x1ddc <Move+0x128>
		}
		else
		{
			state = MoveWait;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	9a 83       	std	Y+2, r25	; 0x02
    1dda:	89 83       	std	Y+1, r24	; 0x01
		}
		if (!StartGame)
    1ddc:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    1de0:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    1de4:	89 2b       	or	r24, r25
    1de6:	09 f0       	breq	.+2      	; 0x1dea <Move+0x136>
		{
			state = MoveInit;
    1de8:	49 c1       	rjmp	.+658    	; 0x207c <Move+0x3c8>
    1dea:	1a 82       	std	Y+2, r1	; 0x02
			break;
    1dec:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		
		case MoveDisplace:
		if (!WallCollision())
    1dee:	47 c1       	rjmp	.+654    	; 0x207e <Move+0x3ca>
    1df0:	4f d9       	rcall	.-3426   	; 0x1090 <WallCollision>
    1df2:	89 2b       	or	r24, r25
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <Move+0x144>
    1df6:	a3 c0       	rjmp	.+326    	; 0x1f3e <Move+0x28a>
		{
			if (snake.Direction == Up)
    1df8:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1dfc:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	01 f5       	brne	.+64     	; 0x1e4a <Move+0x196>
			{
				snake.head.y >>= 1;
    1e0a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    1e0e:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    1e12:	95 95       	asr	r25
    1e14:	87 95       	ror	r24
    1e16:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    1e1a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				
				Pop(snake.body);
    1e1e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1e22:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1e26:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    1e2a:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    1e2e:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    1e32:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    1e36:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    1e3a:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1e3e:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1e42:	b9 01       	movw	r22, r18
    1e44:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    1e48:	11 c1       	rjmp	.+546    	; 0x206c <Move+0x3b8>
			}
			else if (snake.Direction == Down)
    1e4a:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1e4e:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	28 17       	cp	r18, r24
    1e58:	39 07       	cpc	r19, r25
    1e5a:	01 f5       	brne	.+64     	; 0x1e9c <Move+0x1e8>
			{
				snake.head.y <<= 1;
    1e5c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    1e60:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    1e6c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				
				Pop(snake.body);
    1e70:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1e74:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1e78:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    1e7c:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    1e80:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    1e84:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    1e88:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    1e8c:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1e90:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1e94:	b9 01       	movw	r22, r18
    1e96:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    1e9a:	e8 c0       	rjmp	.+464    	; 0x206c <Move+0x3b8>
			}
			else if (snake.Direction == Left)
    1e9c:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1ea0:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	28 17       	cp	r18, r24
    1eaa:	39 07       	cpc	r19, r25
    1eac:	f9 f4       	brne	.+62     	; 0x1eec <Move+0x238>
			{
				--snake.head.x;
    1eae:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    1eb2:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    1ebc:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				
				Pop(snake.body);
    1ec0:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1ec4:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1ec8:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    1ecc:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    1ed0:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    1ed4:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    1ed8:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    1edc:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1ee0:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1ee4:	b9 01       	movw	r22, r18
    1ee6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    1eea:	c0 c0       	rjmp	.+384    	; 0x206c <Move+0x3b8>
			}
			else if (snake.Direction == Right)
    1eec:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1ef0:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1ef4:	84 e0       	ldi	r24, 0x04	; 4
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	28 17       	cp	r18, r24
    1efa:	39 07       	cpc	r19, r25
    1efc:	09 f0       	breq	.+2      	; 0x1f00 <Move+0x24c>
    1efe:	b6 c0       	rjmp	.+364    	; 0x206c <Move+0x3b8>
			{
				++snake.head.x;
    1f00:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    1f04:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    1f0e:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				
				Pop(snake.body);
    1f12:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1f16:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1f1a:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    1f1e:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    1f22:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    1f26:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    1f2a:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    1f2e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1f32:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1f36:	b9 01       	movw	r22, r18
    1f38:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
			}
		}
		else if (WallCollision())
    1f3c:	97 c0       	rjmp	.+302    	; 0x206c <Move+0x3b8>
    1f3e:	a8 d8       	rcall	.-3760   	; 0x1090 <WallCollision>
    1f40:	89 2b       	or	r24, r25
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <Move+0x292>
    1f44:	93 c0       	rjmp	.+294    	; 0x206c <Move+0x3b8>
		{
			if (snake.Direction == Up)
    1f46:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1f4a:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	28 17       	cp	r18, r24
    1f54:	39 07       	cpc	r19, r25
    1f56:	e1 f4       	brne	.+56     	; 0x1f90 <Move+0x2dc>
			{
				snake.head.y = 128;
    1f58:	80 e8       	ldi	r24, 0x80	; 128
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    1f60:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				
				Pop(snake.body);
    1f64:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1f68:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1f6c:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    1f70:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    1f74:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    1f78:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    1f7c:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    1f80:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1f84:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1f88:	b9 01       	movw	r22, r18
    1f8a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    1f8e:	6e c0       	rjmp	.+220    	; 0x206c <Move+0x3b8>
			}
			else if (snake.Direction == Down)
    1f90:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1f94:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	28 17       	cp	r18, r24
    1f9e:	39 07       	cpc	r19, r25
    1fa0:	e1 f4       	brne	.+56     	; 0x1fda <Move+0x326>
			{
				snake.head.y = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    1faa:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				
				Pop(snake.body);
    1fae:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1fb2:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1fb6:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    1fba:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    1fbe:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    1fc2:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    1fc6:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    1fca:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1fce:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    1fd8:	49 c0       	rjmp	.+146    	; 0x206c <Move+0x3b8>
			}
			else if (snake.Direction == Left)
    1fda:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    1fde:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	28 17       	cp	r18, r24
    1fe8:	39 07       	cpc	r19, r25
    1fea:	e1 f4       	brne	.+56     	; 0x2024 <Move+0x370>
			{
				snake.head.x = 8;
    1fec:	88 e0       	ldi	r24, 0x08	; 8
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    1ff4:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				
				Pop(snake.body);
    1ff8:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    1ffc:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    2000:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    2004:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    2008:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    200c:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    2010:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    2014:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    2018:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    201c:	b9 01       	movw	r22, r18
    201e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    2022:	24 c0       	rjmp	.+72     	; 0x206c <Move+0x3b8>
			}
			else if (snake.Direction == Right)
    2024:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    2028:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	28 17       	cp	r18, r24
    2032:	39 07       	cpc	r19, r25
    2034:	d9 f4       	brne	.+54     	; 0x206c <Move+0x3b8>
			{
				snake.head.x = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    203e:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				
				Pop(snake.body);
    2042:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    2046:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    204a:	0e 94 22 03 	call	0x644	; 0x644 <Pop>
				Push(snake.body, snake.head.x, snake.head.y);
    204e:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    2052:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    2056:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    205a:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    205e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    2062:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    2066:	b9 01       	movw	r22, r18
    2068:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
			}
		}
		
		state = MoveWait;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
		break;
    2074:	04 c0       	rjmp	.+8      	; 0x207e <Move+0x3ca>
		
		default:
		state = MoveInit;
    2076:	1a 82       	std	Y+2, r1	; 0x02
    2078:	19 82       	std	Y+1, r1	; 0x01
		break;
    207a:	01 c0       	rjmp	.+2      	; 0x207e <Move+0x3ca>
		if (!StartGame)
		{
			state = MoveInit;
			break;
		}
		break;
    207c:	00 00       	nop
		default:
		state = MoveInit;
		break;
	}
	
	return state;
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	08 95       	ret

0000208c <Collision>:

enum CollisionState { CollisionInit, CollisionCheck };

int Collision(int state)
{
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	00 d0       	rcall	.+0      	; 0x2092 <Collision+0x6>
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	9a 81       	ldd	r25, Y+2	; 0x02
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	19 f0       	breq	.+6      	; 0x20a8 <Collision+0x1c>
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	a1 f0       	breq	.+40     	; 0x20ce <Collision+0x42>
    20a6:	3a c0       	rjmp	.+116    	; 0x211c <Collision+0x90>
	{
		case CollisionInit:
		CollisionSelf = 0;
    20a8:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <CollisionSelf+0x1>
    20ac:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <CollisionSelf>
		CollisionFood = 0;
    20b0:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <CollisionFood+0x1>
    20b4:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <CollisionFood>
		
		if (StartGame)
    20b8:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    20bc:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    20c0:	89 2b       	or	r24, r25
    20c2:	79 f1       	breq	.+94     	; 0x2122 <Collision+0x96>
		{
			state = CollisionCheck;
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	9a 83       	std	Y+2, r25	; 0x02
    20ca:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
    20cc:	2a c0       	rjmp	.+84     	; 0x2122 <Collision+0x96>
		
		case CollisionCheck:
		if (StartGame && !Paused)
    20ce:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    20d2:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    20d6:	89 2b       	or	r24, r25
    20d8:	a1 f0       	breq	.+40     	; 0x2102 <Collision+0x76>
    20da:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <Paused>
    20de:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <Paused+0x1>
    20e2:	89 2b       	or	r24, r25
    20e4:	71 f4       	brne	.+28     	; 0x2102 <Collision+0x76>
		{
			if (SelfCollision())
    20e6:	26 d8       	rcall	.-4020   	; 0x1134 <SelfCollision>
    20e8:	89 2b       	or	r24, r25
    20ea:	31 f0       	breq	.+12     	; 0x20f8 <Collision+0x6c>
			{
				CollisionSelf = 1;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	90 93 45 04 	sts	0x0445, r25	; 0x800445 <CollisionSelf+0x1>
    20f4:	80 93 44 04 	sts	0x0444, r24	; 0x800444 <CollisionSelf>
			}
			
			state = CollisionCheck;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9a 83       	std	Y+2, r25	; 0x02
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	04 c0       	rjmp	.+8      	; 0x210a <Collision+0x7e>
		}
		else
		{
			state = CollisionCheck;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
		}
		if (!StartGame)
    210a:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    210e:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    2112:	89 2b       	or	r24, r25
    2114:	41 f4       	brne	.+16     	; 0x2126 <Collision+0x9a>
		{
			state = CollisionInit;
    2116:	1a 82       	std	Y+2, r1	; 0x02
    2118:	19 82       	std	Y+1, r1	; 0x01
			break;
    211a:	06 c0       	rjmp	.+12     	; 0x2128 <Collision+0x9c>
		}
		break;
		
		default:
		state = CollisionInit;
    211c:	1a 82       	std	Y+2, r1	; 0x02
    211e:	19 82       	std	Y+1, r1	; 0x01
		break;
    2120:	03 c0       	rjmp	.+6      	; 0x2128 <Collision+0x9c>
		
		if (StartGame)
		{
			state = CollisionCheck;
		}
		break;
    2122:	00 00       	nop
    2124:	01 c0       	rjmp	.+2      	; 0x2128 <Collision+0x9c>
		if (!StartGame)
		{
			state = CollisionInit;
			break;
		}
		break;
    2126:	00 00       	nop
		default:
		state = CollisionInit;
		break;
	}
	
	return state;
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	df 91       	pop	r29
    2132:	cf 91       	pop	r28
    2134:	08 95       	ret

00002136 <Food>:

enum FoodState { FoodInit, FoodWait, FoodGrowSnake } foodstate;

int Food(int state)
{
    2136:	cf 93       	push	r28
    2138:	df 93       	push	r29
    213a:	00 d0       	rcall	.+0      	; 0x213c <Food+0x6>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
	switch (state)
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	b1 f0       	breq	.+44     	; 0x217a <Food+0x44>
    214e:	82 30       	cpi	r24, 0x02	; 2
    2150:	91 05       	cpc	r25, r1
    2152:	09 f4       	brne	.+2      	; 0x2156 <Food+0x20>
    2154:	41 c0       	rjmp	.+130    	; 0x21d8 <Food+0xa2>
    2156:	89 2b       	or	r24, r25
    2158:	09 f0       	breq	.+2      	; 0x215c <Food+0x26>
    215a:	54 c1       	rjmp	.+680    	; 0x2404 <Food+0x2ce>
	{
		case FoodInit:
		if (StartGame)
    215c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    2160:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    2164:	89 2b       	or	r24, r25
    2166:	31 f0       	breq	.+12     	; 0x2174 <Food+0x3e>
		{
			CreateFood();
    2168:	55 d8       	rcall	.-3926   	; 0x1214 <CreateFood>
			state = FoodWait;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9a 83       	std	Y+2, r25	; 0x02
    2170:	89 83       	std	Y+1, r24	; 0x01
		}
		else
		{
			state = FoodInit;
		}
		break;
    2172:	4c c1       	rjmp	.+664    	; 0x240c <Food+0x2d6>
			CreateFood();
			state = FoodWait;
		}
		else
		{
			state = FoodInit;
    2174:	1a 82       	std	Y+2, r1	; 0x02
    2176:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
    2178:	49 c1       	rjmp	.+658    	; 0x240c <Food+0x2d6>
		
		case FoodWait:
		if (StartGame && !Paused)
    217a:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    217e:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    2182:	89 2b       	or	r24, r25
    2184:	d9 f0       	breq	.+54     	; 0x21bc <Food+0x86>
    2186:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <Paused>
    218a:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <Paused+0x1>
    218e:	89 2b       	or	r24, r25
		{
			if (FoodCollision())
    2190:	a9 f4       	brne	.+42     	; 0x21bc <Food+0x86>
    2192:	1e d8       	rcall	.-4036   	; 0x11d0 <FoodCollision>
    2194:	89 2b       	or	r24, r25
    2196:	59 f0       	breq	.+22     	; 0x21ae <Food+0x78>
			{
				CollisionFood = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <CollisionFood+0x1>
    21a0:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <CollisionFood>
				state = FoodGrowSnake;
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <Food+0x80>
			}
			else
			{
				state = FoodWait;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
			}
			
			DisplaySnake();
    21b6:	0e 94 39 07 	call	0xe72	; 0xe72 <DisplaySnake>
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <Food+0x8e>
		}
		else
		{
			state = FoodWait;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9a 83       	std	Y+2, r25	; 0x02
    21c2:	89 83       	std	Y+1, r24	; 0x01
		}
		if (!StartGame)
    21c4:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    21c8:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    21cc:	89 2b       	or	r24, r25
    21ce:	09 f0       	breq	.+2      	; 0x21d2 <Food+0x9c>
    21d0:	1c c1       	rjmp	.+568    	; 0x240a <Food+0x2d4>
		{
			state = FoodInit;
    21d2:	1a 82       	std	Y+2, r1	; 0x02
    21d4:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
    21d6:	19 c1       	rjmp	.+562    	; 0x240a <Food+0x2d4>
		
		case FoodGrowSnake:
		if (!WallCollision())
    21d8:	0e 94 48 08 	call	0x1090	; 0x1090 <WallCollision>
    21dc:	89 2b       	or	r24, r25
    21de:	09 f0       	breq	.+2      	; 0x21e2 <Food+0xac>
    21e0:	8b c0       	rjmp	.+278    	; 0x22f8 <Food+0x1c2>
		{
			if (snake.Direction == Up)
    21e2:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    21e6:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	28 17       	cp	r18, r24
    21f0:	39 07       	cpc	r19, r25
    21f2:	d1 f4       	brne	.+52     	; 0x2228 <Food+0xf2>
			{
				snake.head.y >>= 1;
    21f4:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    21f8:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    21fc:	95 95       	asr	r25
    21fe:	87 95       	ror	r24
    2200:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    2204:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				Push(snake.body, snake.head.x, snake.head.y);
    2208:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    220c:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    2210:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    2214:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    2218:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    221c:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    2220:	b9 01       	movw	r22, r18
    2222:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    2226:	e3 c0       	rjmp	.+454    	; 0x23ee <Food+0x2b8>
			}
			else if (snake.Direction == Down)
    2228:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    222c:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	28 17       	cp	r18, r24
    2236:	39 07       	cpc	r19, r25
    2238:	d1 f4       	brne	.+52     	; 0x226e <Food+0x138>
			{
				snake.head.y <<= 1;
    223a:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <snake+0x6>
    223e:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <snake+0x7>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    224a:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				Push(snake.body, snake.head.x, snake.head.y);
    224e:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    2252:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    2256:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    225a:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    225e:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    2262:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    2266:	b9 01       	movw	r22, r18
    2268:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    226c:	c0 c0       	rjmp	.+384    	; 0x23ee <Food+0x2b8>
			}
			else if (snake.Direction == Left)
    226e:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    2272:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    2276:	83 e0       	ldi	r24, 0x03	; 3
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	28 17       	cp	r18, r24
    227c:	39 07       	cpc	r19, r25
    227e:	c9 f4       	brne	.+50     	; 0x22b2 <Food+0x17c>
			{
				--snake.head.x;
    2280:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    2284:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    228e:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				Push(snake.body, snake.head.x, snake.head.y);
    2292:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    2296:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    229a:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    229e:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    22a2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    22a6:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    22aa:	b9 01       	movw	r22, r18
    22ac:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    22b0:	9e c0       	rjmp	.+316    	; 0x23ee <Food+0x2b8>
			}
			else if (snake.Direction == Right)
    22b2:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    22b6:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    22ba:	84 e0       	ldi	r24, 0x04	; 4
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	28 17       	cp	r18, r24
    22c0:	39 07       	cpc	r19, r25
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <Food+0x190>
    22c4:	94 c0       	rjmp	.+296    	; 0x23ee <Food+0x2b8>
			{
				++snake.head.x;
    22c6:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <snake+0x4>
    22ca:	90 91 1f 04 	lds	r25, 0x041F	; 0x80041f <snake+0x5>
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    22d4:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				Push(snake.body, snake.head.x, snake.head.y);
    22d8:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    22dc:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    22e0:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    22e4:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    22e8:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    22ec:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    22f0:	b9 01       	movw	r22, r18
    22f2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    22f6:	7b c0       	rjmp	.+246    	; 0x23ee <Food+0x2b8>
			}
		}
		else
		{
			if (snake.Direction == Up)
    22f8:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    22fc:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	28 17       	cp	r18, r24
    2306:	39 07       	cpc	r19, r25
    2308:	b1 f4       	brne	.+44     	; 0x2336 <Food+0x200>
			{
				snake.head.y = 128;
    230a:	80 e8       	ldi	r24, 0x80	; 128
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    2312:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				Push(snake.body, snake.head.x, snake.head.y);
    2316:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    231a:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    231e:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    2322:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    2326:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    232a:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    232e:	b9 01       	movw	r22, r18
    2330:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    2334:	5c c0       	rjmp	.+184    	; 0x23ee <Food+0x2b8>
			}
			else if (snake.Direction == Down)
    2336:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    233a:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	28 17       	cp	r18, r24
    2344:	39 07       	cpc	r19, r25
    2346:	b1 f4       	brne	.+44     	; 0x2374 <Food+0x23e>
			{
				snake.head.y = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <snake+0x7>
    2350:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <snake+0x6>
				Push(snake.body, snake.head.x, snake.head.y);
    2354:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    2358:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    235c:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    2360:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    2364:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    2368:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    236c:	b9 01       	movw	r22, r18
    236e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    2372:	3d c0       	rjmp	.+122    	; 0x23ee <Food+0x2b8>
			}
			else if (snake.Direction == Left)
    2374:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    2378:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    237c:	83 e0       	ldi	r24, 0x03	; 3
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	28 17       	cp	r18, r24
    2382:	39 07       	cpc	r19, r25
    2384:	b1 f4       	brne	.+44     	; 0x23b2 <Food+0x27c>
			{
				snake.head.x = 8;
    2386:	88 e0       	ldi	r24, 0x08	; 8
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    238e:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				Push(snake.body, snake.head.x, snake.head.y);
    2392:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    2396:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    239a:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    239e:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    23a2:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    23a6:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    23aa:	b9 01       	movw	r22, r18
    23ac:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
    23b0:	1e c0       	rjmp	.+60     	; 0x23ee <Food+0x2b8>
			}
			else if (snake.Direction == Right)
    23b2:	20 91 1c 04 	lds	r18, 0x041C	; 0x80041c <snake+0x2>
    23b6:	30 91 1d 04 	lds	r19, 0x041D	; 0x80041d <snake+0x3>
    23ba:	84 e0       	ldi	r24, 0x04	; 4
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	28 17       	cp	r18, r24
    23c0:	39 07       	cpc	r19, r25
    23c2:	a9 f4       	brne	.+42     	; 0x23ee <Food+0x2b8>
			{
				snake.head.x = 1;
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	90 93 1f 04 	sts	0x041F, r25	; 0x80041f <snake+0x5>
    23cc:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <snake+0x4>
				Push(snake.body, snake.head.x, snake.head.y);
    23d0:	40 91 20 04 	lds	r20, 0x0420	; 0x800420 <snake+0x6>
    23d4:	50 91 21 04 	lds	r21, 0x0421	; 0x800421 <snake+0x7>
    23d8:	20 91 1e 04 	lds	r18, 0x041E	; 0x80041e <snake+0x4>
    23dc:	30 91 1f 04 	lds	r19, 0x041F	; 0x80041f <snake+0x5>
    23e0:	80 91 1a 04 	lds	r24, 0x041A	; 0x80041a <snake>
    23e4:	90 91 1b 04 	lds	r25, 0x041B	; 0x80041b <snake+0x1>
    23e8:	b9 01       	movw	r22, r18
    23ea:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Push>
			}
		}
		
		CollisionFood = 0;
    23ee:	10 92 33 04 	sts	0x0433, r1	; 0x800433 <CollisionFood+0x1>
    23f2:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <CollisionFood>
		CreateFood();
    23f6:	0e 94 0a 09 	call	0x1214	; 0x1214 <CreateFood>
		state = FoodWait;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
		break;
    2402:	04 c0       	rjmp	.+8      	; 0x240c <Food+0x2d6>
		
		default:
		state = FoodInit;
    2404:	1a 82       	std	Y+2, r1	; 0x02
    2406:	19 82       	std	Y+1, r1	; 0x01
		break;
    2408:	01 c0       	rjmp	.+2      	; 0x240c <Food+0x2d6>
		}
		if (!StartGame)
		{
			state = FoodInit;
		}
		break;
    240a:	00 00       	nop
		default:
		state = FoodInit;
		break;
	}
	
	return state;
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	08 95       	ret

0000241a <Sound>:

enum SoundState { SoundInit, SoundPlay, SoundButtonRelease, SoundChange };

int Sound(int state)
{
    241a:	cf 93       	push	r28
    241c:	df 93       	push	r29
    241e:	00 d0       	rcall	.+0      	; 0x2420 <Sound+0x6>
    2420:	1f 92       	push	r1
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	9b 83       	std	Y+3, r25	; 0x03
    2428:	8a 83       	std	Y+2, r24	; 0x02
    static unsigned int Index = 0;							   
	static short Count = 0;
	static unsigned int SongIterator = 0;
	static unsigned int ChangedSongs;
	
	unsigned char Button = ~PINA & 0x04;
    242a:	80 e2       	ldi	r24, 0x20	; 32
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	fc 01       	movw	r30, r24
    2430:	80 81       	ld	r24, Z
    2432:	80 95       	com	r24
    2434:	84 70       	andi	r24, 0x04	; 4
    2436:	89 83       	std	Y+1, r24	; 0x01
	
	switch (state)
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	9b 81       	ldd	r25, Y+3	; 0x03
    243c:	81 30       	cpi	r24, 0x01	; 1
    243e:	91 05       	cpc	r25, r1
    2440:	09 f4       	brne	.+2      	; 0x2444 <Sound+0x2a>
    2442:	53 c0       	rjmp	.+166    	; 0x24ea <Sound+0xd0>
    2444:	82 30       	cpi	r24, 0x02	; 2
    2446:	91 05       	cpc	r25, r1
    2448:	1c f4       	brge	.+6      	; 0x2450 <Sound+0x36>
    244a:	89 2b       	or	r24, r25
    244c:	49 f0       	breq	.+18     	; 0x2460 <Sound+0x46>
    244e:	4d c1       	rjmp	.+666    	; 0x26ea <Sound+0x2d0>
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	91 05       	cpc	r25, r1
    2454:	09 f4       	brne	.+2      	; 0x2458 <Sound+0x3e>
    2456:	e1 c0       	rjmp	.+450    	; 0x261a <Sound+0x200>
    2458:	03 97       	sbiw	r24, 0x03	; 3
    245a:	09 f4       	brne	.+2      	; 0x245e <Sound+0x44>
    245c:	00 c1       	rjmp	.+512    	; 0x265e <Sound+0x244>
    245e:	45 c1       	rjmp	.+650    	; 0x26ea <Sound+0x2d0>
	{
		case SoundInit:
			set_PWM(0);
    2460:	60 e0       	ldi	r22, 0x00	; 0
    2462:	70 e0       	ldi	r23, 0x00	; 0
    2464:	cb 01       	movw	r24, r22
    2466:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_PWM>
			Count = 0;
    246a:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <Count.2397+0x1>
    246e:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <Count.2397>
			Index = 0;
    2472:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <Index.2396+0x1>
    2476:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <Index.2396>
			SongIterator = 0;
    247a:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <SongIterator.2398+0x1>
    247e:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <SongIterator.2398>
			ChangedSongs = 0;
    2482:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <ChangedSongs.2399+0x1>
    2486:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <ChangedSongs.2399>
			if (StartGame)
    248a:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    248e:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    2492:	89 2b       	or	r24, r25
    2494:	39 f1       	breq	.+78     	; 0x24e4 <Sound+0xca>
			{
				set_PWM(SongList[SongIterator][Index]);
    2496:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <SongIterator.2398>
    249a:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <SongIterator.2398+0x1>
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	8f 5d       	subi	r24, 0xDF	; 223
    24a4:	9e 4f       	sbci	r25, 0xFE	; 254
    24a6:	fc 01       	movw	r30, r24
    24a8:	20 81       	ld	r18, Z
    24aa:	31 81       	ldd	r19, Z+1	; 0x01
    24ac:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <Index.2396>
    24b0:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <Index.2396+0x1>
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	82 0f       	add	r24, r18
    24ba:	93 1f       	adc	r25, r19
    24bc:	fc 01       	movw	r30, r24
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	cc 01       	movw	r24, r24
    24c4:	a0 e0       	ldi	r26, 0x00	; 0
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	bc d5       	rcall	.+2936   	; 0x3046 <__floatunsisf>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_PWM>
				state = SoundPlay;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9b 83       	std	Y+3, r25	; 0x03
    24e0:	8a 83       	std	Y+2, r24	; 0x02
			}
			else
			{
				state = SoundInit;
			}
			break;
    24e2:	07 c1       	rjmp	.+526    	; 0x26f2 <Sound+0x2d8>
				set_PWM(SongList[SongIterator][Index]);
				state = SoundPlay;
			}
			else
			{
				state = SoundInit;
    24e4:	1b 82       	std	Y+3, r1	; 0x03
    24e6:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
    24e8:	04 c1       	rjmp	.+520    	; 0x26f2 <Sound+0x2d8>
		
		case SoundPlay:
			if (!Paused)
    24ea:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <Paused>
    24ee:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <Paused+0x1>
    24f2:	89 2b       	or	r24, r25
    24f4:	09 f0       	breq	.+2      	; 0x24f8 <Sound+0xde>
    24f6:	7e c0       	rjmp	.+252    	; 0x25f4 <Sound+0x1da>
			{
				if (Button)
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	88 23       	and	r24, r24
    24fc:	59 f0       	breq	.+22     	; 0x2514 <Sound+0xfa>
				{
					ChangedSongs = 1;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <ChangedSongs.2399+0x1>
    2506:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <ChangedSongs.2399>
					state = SoundButtonRelease;
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	9b 83       	std	Y+3, r25	; 0x03
    2510:	8a 83       	std	Y+2, r24	; 0x02
					break;
    2512:	ef c0       	rjmp	.+478    	; 0x26f2 <Sound+0x2d8>
				}
				if (DurationList[SongIterator][Index] == Count)
    2514:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <SongIterator.2398>
    2518:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <SongIterator.2398+0x1>
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	89 5d       	subi	r24, 0xD9	; 217
    2522:	9e 4f       	sbci	r25, 0xFE	; 254
    2524:	fc 01       	movw	r30, r24
    2526:	20 81       	ld	r18, Z
    2528:	31 81       	ldd	r19, Z+1	; 0x01
    252a:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <Index.2396>
    252e:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <Index.2396+0x1>
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	82 0f       	add	r24, r18
    2538:	93 1f       	adc	r25, r19
    253a:	fc 01       	movw	r30, r24
    253c:	80 81       	ld	r24, Z
    253e:	91 81       	ldd	r25, Z+1	; 0x01
    2540:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <Count.2397>
    2544:	30 91 dc 03 	lds	r19, 0x03DC	; 0x8003dc <Count.2397+0x1>
    2548:	82 17       	cp	r24, r18
    254a:	93 07       	cpc	r25, r19
    254c:	69 f4       	brne	.+26     	; 0x2568 <Sound+0x14e>
				{
					++Index;
    254e:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <Index.2396>
    2552:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <Index.2396+0x1>
    2556:	01 96       	adiw	r24, 0x01	; 1
    2558:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <Index.2396+0x1>
    255c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <Index.2396>
					Count = 0;
    2560:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <Count.2397+0x1>
    2564:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <Count.2397>
				}
				if (Index >= SongSizeList[SongIterator])
    2568:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <SongIterator.2398>
    256c:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <SongIterator.2398+0x1>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	83 5d       	subi	r24, 0xD3	; 211
    2576:	9e 4f       	sbci	r25, 0xFE	; 254
    2578:	fc 01       	movw	r30, r24
    257a:	20 81       	ld	r18, Z
    257c:	31 81       	ldd	r19, Z+1	; 0x01
    257e:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <Index.2396>
    2582:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <Index.2396+0x1>
    2586:	82 17       	cp	r24, r18
    2588:	93 07       	cpc	r25, r19
    258a:	20 f0       	brcs	.+8      	; 0x2594 <Sound+0x17a>
				{
					Index = 0;
    258c:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <Index.2396+0x1>
    2590:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <Index.2396>
				}
				
				set_PWM(SongList[SongIterator][Index]);
    2594:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <SongIterator.2398>
    2598:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <SongIterator.2398+0x1>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	8f 5d       	subi	r24, 0xDF	; 223
    25a2:	9e 4f       	sbci	r25, 0xFE	; 254
    25a4:	fc 01       	movw	r30, r24
    25a6:	20 81       	ld	r18, Z
    25a8:	31 81       	ldd	r19, Z+1	; 0x01
    25aa:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <Index.2396>
    25ae:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <Index.2396+0x1>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	82 0f       	add	r24, r18
    25b8:	93 1f       	adc	r25, r19
    25ba:	fc 01       	movw	r30, r24
    25bc:	80 81       	ld	r24, Z
    25be:	91 81       	ldd	r25, Z+1	; 0x01
    25c0:	cc 01       	movw	r24, r24
    25c2:	a0 e0       	ldi	r26, 0x00	; 0
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	3d d5       	rcall	.+2682   	; 0x3046 <__floatunsisf>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_PWM>
				Count += 50;
    25d8:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <Count.2397>
    25dc:	90 91 dc 03 	lds	r25, 0x03DC	; 0x8003dc <Count.2397+0x1>
    25e0:	c2 96       	adiw	r24, 0x32	; 50
    25e2:	90 93 dc 03 	sts	0x03DC, r25	; 0x8003dc <Count.2397+0x1>
    25e6:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <Count.2397>
				state = SoundPlay;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9b 83       	std	Y+3, r25	; 0x03
    25f0:	8a 83       	std	Y+2, r24	; 0x02
    25f2:	09 c0       	rjmp	.+18     	; 0x2606 <Sound+0x1ec>
			}
			else
			{
				set_PWM(0);
    25f4:	60 e0       	ldi	r22, 0x00	; 0
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	cb 01       	movw	r24, r22
    25fa:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_PWM>
				state = SoundPlay;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9b 83       	std	Y+3, r25	; 0x03
    2604:	8a 83       	std	Y+2, r24	; 0x02
			}
			if (!StartGame)
    2606:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <StartGame>
    260a:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <StartGame+0x1>
    260e:	89 2b       	or	r24, r25
    2610:	09 f0       	breq	.+2      	; 0x2614 <Sound+0x1fa>
    2612:	6e c0       	rjmp	.+220    	; 0x26f0 <Sound+0x2d6>
			{
				state = SoundInit;
    2614:	1b 82       	std	Y+3, r1	; 0x03
    2616:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
    2618:	6b c0       	rjmp	.+214    	; 0x26f0 <Sound+0x2d6>
		
		case SoundButtonRelease:
			if (!Button && ChangedSongs)
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	88 23       	and	r24, r24
    261e:	59 f4       	brne	.+22     	; 0x2636 <Sound+0x21c>
    2620:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <ChangedSongs.2399>
    2624:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <ChangedSongs.2399+0x1>
    2628:	89 2b       	or	r24, r25
    262a:	29 f0       	breq	.+10     	; 0x2636 <Sound+0x21c>
			{
				state = SoundChange;
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	9b 83       	std	Y+3, r25	; 0x03
    2632:	8a 83       	std	Y+2, r24	; 0x02
    2634:	13 c0       	rjmp	.+38     	; 0x265c <Sound+0x242>
			}
			else if (!Button && !ChangedSongs)
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	88 23       	and	r24, r24
    263a:	59 f4       	brne	.+22     	; 0x2652 <Sound+0x238>
    263c:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <ChangedSongs.2399>
    2640:	90 91 e2 03 	lds	r25, 0x03E2	; 0x8003e2 <ChangedSongs.2399+0x1>
    2644:	89 2b       	or	r24, r25
    2646:	29 f4       	brne	.+10     	; 0x2652 <Sound+0x238>
			{
				state = SoundPlay;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9b 83       	std	Y+3, r25	; 0x03
    264e:	8a 83       	std	Y+2, r24	; 0x02
    2650:	05 c0       	rjmp	.+10     	; 0x265c <Sound+0x242>
			}
			else
			{
				state = SoundButtonRelease;
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9b 83       	std	Y+3, r25	; 0x03
    2658:	8a 83       	std	Y+2, r24	; 0x02
			}
			break;
    265a:	4b c0       	rjmp	.+150    	; 0x26f2 <Sound+0x2d8>
    265c:	4a c0       	rjmp	.+148    	; 0x26f2 <Sound+0x2d8>
		
		case SoundChange:
			++SongIterator;
    265e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <SongIterator.2398>
    2662:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <SongIterator.2398+0x1>
    2666:	01 96       	adiw	r24, 0x01	; 1
    2668:	90 93 e0 03 	sts	0x03E0, r25	; 0x8003e0 <SongIterator.2398+0x1>
    266c:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <SongIterator.2398>
			if (SongIterator >= 3)
    2670:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <SongIterator.2398>
    2674:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <SongIterator.2398+0x1>
    2678:	03 97       	sbiw	r24, 0x03	; 3
    267a:	20 f0       	brcs	.+8      	; 0x2684 <Sound+0x26a>
			{
				SongIterator = 0;
    267c:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <SongIterator.2398+0x1>
    2680:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <SongIterator.2398>
			}
			Index = 0;
    2684:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <Index.2396+0x1>
    2688:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <Index.2396>
			Count = 0;
    268c:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <Count.2397+0x1>
    2690:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <Count.2397>
			set_PWM(SongList[SongIterator][Index]);
    2694:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <SongIterator.2398>
    2698:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <SongIterator.2398+0x1>
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	8f 5d       	subi	r24, 0xDF	; 223
    26a2:	9e 4f       	sbci	r25, 0xFE	; 254
    26a4:	fc 01       	movw	r30, r24
    26a6:	20 81       	ld	r18, Z
    26a8:	31 81       	ldd	r19, Z+1	; 0x01
    26aa:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <Index.2396>
    26ae:	90 91 de 03 	lds	r25, 0x03DE	; 0x8003de <Index.2396+0x1>
    26b2:	88 0f       	add	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	fc 01       	movw	r30, r24
    26bc:	80 81       	ld	r24, Z
    26be:	91 81       	ldd	r25, Z+1	; 0x01
    26c0:	cc 01       	movw	r24, r24
    26c2:	a0 e0       	ldi	r26, 0x00	; 0
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	bd d4       	rcall	.+2426   	; 0x3046 <__floatunsisf>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	0e 94 cc 05 	call	0xb98	; 0xb98 <set_PWM>
			ChangedSongs = 0;
    26d8:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <ChangedSongs.2399+0x1>
    26dc:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <ChangedSongs.2399>
			state = SoundPlay;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9b 83       	std	Y+3, r25	; 0x03
    26e6:	8a 83       	std	Y+2, r24	; 0x02
			break;	
    26e8:	04 c0       	rjmp	.+8      	; 0x26f2 <Sound+0x2d8>
			
		default:
			state = SoundInit;
    26ea:	1b 82       	std	Y+3, r1	; 0x03
    26ec:	1a 82       	std	Y+2, r1	; 0x02
			break;
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <Sound+0x2d8>
			}
			if (!StartGame)
			{
				state = SoundInit;
			}
			break;
    26f0:	00 00       	nop
		default:
			state = SoundInit;
			break;
	}
	
	return state;
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	08 95       	ret

00002702 <main>:

int main(void)
{
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	ea 97       	sbiw	r28, 0x3a	; 58
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00;
    271a:	81 e2       	ldi	r24, 0x21	; 33
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	fc 01       	movw	r30, r24
    2720:	10 82       	st	Z, r1
	PORTA = 0xFF;
    2722:	82 e2       	ldi	r24, 0x22	; 34
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	2f ef       	ldi	r18, 0xFF	; 255
    2728:	fc 01       	movw	r30, r24
    272a:	20 83       	st	Z, r18
	DDRB = 0xFF;
    272c:	84 e2       	ldi	r24, 0x24	; 36
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	2f ef       	ldi	r18, 0xFF	; 255
    2732:	fc 01       	movw	r30, r24
    2734:	20 83       	st	Z, r18
	PORTB = 0x00;
    2736:	85 e2       	ldi	r24, 0x25	; 37
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	fc 01       	movw	r30, r24
    273c:	10 82       	st	Z, r1
	DDRC = 0xFF;
    273e:	87 e2       	ldi	r24, 0x27	; 39
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	2f ef       	ldi	r18, 0xFF	; 255
    2744:	fc 01       	movw	r30, r24
    2746:	20 83       	st	Z, r18
	PORTC = 0x00;
    2748:	88 e2       	ldi	r24, 0x28	; 40
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	fc 01       	movw	r30, r24
    274e:	10 82       	st	Z, r1
	DDRD = 0xFF;
    2750:	8a e2       	ldi	r24, 0x2A	; 42
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	2f ef       	ldi	r18, 0xFF	; 255
    2756:	fc 01       	movw	r30, r24
    2758:	20 83       	st	Z, r18
	PORTD = 0x00;
    275a:	8b e2       	ldi	r24, 0x2B	; 43
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	fc 01       	movw	r30, r24
    2760:	10 82       	st	Z, r1

	matrix_init();
    2762:	0e 94 33 01 	call	0x266	; 0x266 <matrix_init>
	adc_init();
    2766:	0e 94 43 02 	call	0x486	; 0x486 <adc_init>
	LCD_init();
    276a:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_init>
	LFSRInit();
    276e:	0e 94 f5 06 	call	0xdea	; 0xdea <LFSRInit>
	sevenseg_init();
    2772:	0e 94 9a 05 	call	0xb34	; 0xb34 <sevenseg_init>
	
	GameStateCalc = 100;
    2776:	84 e6       	ldi	r24, 0x64	; 100
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a0 e0       	ldi	r26, 0x00	; 0
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <GameStateCalc>
    2782:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <GameStateCalc+0x1>
    2786:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <GameStateCalc+0x2>
    278a:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <GameStateCalc+0x3>
	MoveStateCalc = 100;
    278e:	84 e6       	ldi	r24, 0x64	; 100
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	a0 e0       	ldi	r26, 0x00	; 0
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <MoveStateCalc>
    279a:	90 93 41 04 	sts	0x0441, r25	; 0x800441 <MoveStateCalc+0x1>
    279e:	a0 93 42 04 	sts	0x0442, r26	; 0x800442 <MoveStateCalc+0x2>
    27a2:	b0 93 43 04 	sts	0x0443, r27	; 0x800443 <MoveStateCalc+0x3>
	CollisionStateCalc = 100;
    27a6:	84 e6       	ldi	r24, 0x64	; 100
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e0       	ldi	r26, 0x00	; 0
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <CollisionStateCalc>
    27b2:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <CollisionStateCalc+0x1>
    27b6:	a0 93 28 04 	sts	0x0428, r26	; 0x800428 <CollisionStateCalc+0x2>
    27ba:	b0 93 29 04 	sts	0x0429, r27	; 0x800429 <CollisionStateCalc+0x3>
	FoodStateCalc = 100;
    27be:	84 e6       	ldi	r24, 0x64	; 100
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a0 e0       	ldi	r26, 0x00	; 0
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <FoodStateCalc>
    27ca:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <FoodStateCalc+0x1>
    27ce:	a0 93 38 04 	sts	0x0438, r26	; 0x800438 <FoodStateCalc+0x2>
    27d2:	b0 93 39 04 	sts	0x0439, r27	; 0x800439 <FoodStateCalc+0x3>
	SoundStateCalc = 50;
    27d6:	82 e3       	ldi	r24, 0x32	; 50
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	a0 e0       	ldi	r26, 0x00	; 0
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <SoundStateCalc>
    27e2:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <SoundStateCalc+0x1>
    27e6:	a0 93 2c 04 	sts	0x042C, r26	; 0x80042c <SoundStateCalc+0x2>
    27ea:	b0 93 2d 04 	sts	0x042D, r27	; 0x80042d <SoundStateCalc+0x3>
	
	unsigned long int tmpGCD = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	8b 83       	std	Y+3, r24	; 0x03
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	ad 83       	std	Y+5, r26	; 0x05
    27fc:	be 83       	std	Y+6, r27	; 0x06
	int GCDArray[] = { GameStateCalc, MoveStateCalc, CollisionStateCalc, FoodStateCalc, SoundStateCalc };
    27fe:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <GameStateCalc>
    2802:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <GameStateCalc+0x1>
    2806:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <GameStateCalc+0x2>
    280a:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <GameStateCalc+0x3>
    280e:	9e 8f       	std	Y+30, r25	; 0x1e
    2810:	8d 8f       	std	Y+29, r24	; 0x1d
    2812:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <MoveStateCalc>
    2816:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <MoveStateCalc+0x1>
    281a:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <MoveStateCalc+0x2>
    281e:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <MoveStateCalc+0x3>
    2822:	98 a3       	std	Y+32, r25	; 0x20
    2824:	8f 8f       	std	Y+31, r24	; 0x1f
    2826:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <CollisionStateCalc>
    282a:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <CollisionStateCalc+0x1>
    282e:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <CollisionStateCalc+0x2>
    2832:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <CollisionStateCalc+0x3>
    2836:	9a a3       	std	Y+34, r25	; 0x22
    2838:	89 a3       	std	Y+33, r24	; 0x21
    283a:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <FoodStateCalc>
    283e:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <FoodStateCalc+0x1>
    2842:	a0 91 38 04 	lds	r26, 0x0438	; 0x800438 <FoodStateCalc+0x2>
    2846:	b0 91 39 04 	lds	r27, 0x0439	; 0x800439 <FoodStateCalc+0x3>
    284a:	9c a3       	std	Y+36, r25	; 0x24
    284c:	8b a3       	std	Y+35, r24	; 0x23
    284e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <SoundStateCalc>
    2852:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <SoundStateCalc+0x1>
    2856:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <SoundStateCalc+0x2>
    285a:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <SoundStateCalc+0x3>
    285e:	9e a3       	std	Y+38, r25	; 0x26
    2860:	8d a3       	std	Y+37, r24	; 0x25
	tmpGCD = findGCD(GCDArray, 5);
    2862:	ce 01       	movw	r24, r28
    2864:	4d 96       	adiw	r24, 0x1d	; 29
    2866:	65 e0       	ldi	r22, 0x05	; 5
    2868:	70 e0       	ldi	r23, 0x00	; 0
    286a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <findGCD>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	8b 83       	std	Y+3, r24	; 0x03
    2874:	9c 83       	std	Y+4, r25	; 0x04
    2876:	ad 83       	std	Y+5, r26	; 0x05
    2878:	be 83       	std	Y+6, r27	; 0x06
	GCD = tmpGCD;
    287a:	8b 81       	ldd	r24, Y+3	; 0x03
    287c:	9c 81       	ldd	r25, Y+4	; 0x04
    287e:	ad 81       	ldd	r26, Y+5	; 0x05
    2880:	be 81       	ldd	r27, Y+6	; 0x06
    2882:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <GCD>
    2886:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <GCD+0x1>
    288a:	a0 93 4c 04 	sts	0x044C, r26	; 0x80044c <GCD+0x2>
    288e:	b0 93 4d 04 	sts	0x044D, r27	; 0x80044d <GCD+0x3>
	
	unsigned long int GameStatePeriod = GameStateCalc / GCD;
    2892:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <GameStateCalc>
    2896:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <GameStateCalc+0x1>
    289a:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <GameStateCalc+0x2>
    289e:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <GameStateCalc+0x3>
    28a2:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    28a6:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    28aa:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    28ae:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	f4 d4       	rcall	.+2536   	; 0x32a0 <__udivmodsi4>
    28b8:	da 01       	movw	r26, r20
    28ba:	c9 01       	movw	r24, r18
    28bc:	8f 83       	std	Y+7, r24	; 0x07
    28be:	98 87       	std	Y+8, r25	; 0x08
    28c0:	a9 87       	std	Y+9, r26	; 0x09
    28c2:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int MoveStatePeriod = MoveStateCalc / GCD;
    28c4:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <MoveStateCalc>
    28c8:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <MoveStateCalc+0x1>
    28cc:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <MoveStateCalc+0x2>
    28d0:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <MoveStateCalc+0x3>
    28d4:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    28d8:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    28dc:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    28e0:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    28e4:	bc 01       	movw	r22, r24
    28e6:	cd 01       	movw	r24, r26
    28e8:	db d4       	rcall	.+2486   	; 0x32a0 <__udivmodsi4>
    28ea:	da 01       	movw	r26, r20
    28ec:	c9 01       	movw	r24, r18
    28ee:	8b 87       	std	Y+11, r24	; 0x0b
    28f0:	9c 87       	std	Y+12, r25	; 0x0c
    28f2:	ad 87       	std	Y+13, r26	; 0x0d
    28f4:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int CollisionStatePeriod = CollisionStateCalc / GCD;
    28f6:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <CollisionStateCalc>
    28fa:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <CollisionStateCalc+0x1>
    28fe:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <CollisionStateCalc+0x2>
    2902:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <CollisionStateCalc+0x3>
    2906:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    290a:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    290e:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2912:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    2916:	bc 01       	movw	r22, r24
    2918:	cd 01       	movw	r24, r26
    291a:	c2 d4       	rcall	.+2436   	; 0x32a0 <__udivmodsi4>
    291c:	da 01       	movw	r26, r20
    291e:	c9 01       	movw	r24, r18
    2920:	8f 87       	std	Y+15, r24	; 0x0f
    2922:	98 8b       	std	Y+16, r25	; 0x10
    2924:	a9 8b       	std	Y+17, r26	; 0x11
    2926:	ba 8b       	std	Y+18, r27	; 0x12
	unsigned long int FoodStatePeriod = FoodStateCalc / GCD;
    2928:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <FoodStateCalc>
    292c:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <FoodStateCalc+0x1>
    2930:	a0 91 38 04 	lds	r26, 0x0438	; 0x800438 <FoodStateCalc+0x2>
    2934:	b0 91 39 04 	lds	r27, 0x0439	; 0x800439 <FoodStateCalc+0x3>
    2938:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    293c:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    2940:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2944:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    2948:	bc 01       	movw	r22, r24
    294a:	cd 01       	movw	r24, r26
    294c:	a9 d4       	rcall	.+2386   	; 0x32a0 <__udivmodsi4>
    294e:	da 01       	movw	r26, r20
    2950:	c9 01       	movw	r24, r18
    2952:	8b 8b       	std	Y+19, r24	; 0x13
    2954:	9c 8b       	std	Y+20, r25	; 0x14
    2956:	ad 8b       	std	Y+21, r26	; 0x15
    2958:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int SoundStatePeriod = SoundStateCalc / GCD;
    295a:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <SoundStateCalc>
    295e:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <SoundStateCalc+0x1>
    2962:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <SoundStateCalc+0x2>
    2966:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <SoundStateCalc+0x3>
    296a:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    296e:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    2972:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2976:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	90 d4       	rcall	.+2336   	; 0x32a0 <__udivmodsi4>
    2980:	da 01       	movw	r26, r20
    2982:	c9 01       	movw	r24, r18
    2984:	8f 8b       	std	Y+23, r24	; 0x17
    2986:	98 8f       	std	Y+24, r25	; 0x18
    2988:	a9 8f       	std	Y+25, r26	; 0x19
    298a:	ba 8f       	std	Y+26, r27	; 0x1a
	
	static task gamestate, movestate, collisionstate, foodstate, soundstate;
	task *tasks[] = { &gamestate, &movestate, &collisionstate, &foodstate, &soundstate };
    298c:	8a e0       	ldi	r24, 0x0A	; 10
    298e:	ed e7       	ldi	r30, 0x7D	; 125
    2990:	f3 e0       	ldi	r31, 0x03	; 3
    2992:	de 01       	movw	r26, r28
    2994:	97 96       	adiw	r26, 0x27	; 39
    2996:	01 90       	ld	r0, Z+
    2998:	0d 92       	st	X+, r0
    299a:	8a 95       	dec	r24
    299c:	e1 f7       	brne	.-8      	; 0x2996 <main+0x294>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task *);
    299e:	85 e0       	ldi	r24, 0x05	; 5
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	9c 8f       	std	Y+28, r25	; 0x1c
    29a4:	8b 8f       	std	Y+27, r24	; 0x1b

	gamestate.state = GameInit;
    29a6:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <gamestate.2417>
	gamestate.period = GameStatePeriod;
    29aa:	8f 81       	ldd	r24, Y+7	; 0x07
    29ac:	98 85       	ldd	r25, Y+8	; 0x08
    29ae:	a9 85       	ldd	r26, Y+9	; 0x09
    29b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    29b2:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <gamestate.2417+0x1>
    29b6:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <gamestate.2417+0x2>
    29ba:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <gamestate.2417+0x3>
    29be:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <gamestate.2417+0x4>
	gamestate.elapsedTime = GameStatePeriod;
    29c2:	8f 81       	ldd	r24, Y+7	; 0x07
    29c4:	98 85       	ldd	r25, Y+8	; 0x08
    29c6:	a9 85       	ldd	r26, Y+9	; 0x09
    29c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    29ca:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <gamestate.2417+0x5>
    29ce:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <gamestate.2417+0x6>
    29d2:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <gamestate.2417+0x7>
    29d6:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <gamestate.2417+0x8>
	gamestate.TickFct = &Game;
    29da:	85 ea       	ldi	r24, 0xA5	; 165
    29dc:	9a e0       	ldi	r25, 0x0A	; 10
    29de:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <gamestate.2417+0xa>
    29e2:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <gamestate.2417+0x9>

	movestate.state = MoveInit;
    29e6:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <movestate.2418>
	movestate.period = MoveStatePeriod;
    29ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    29ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    29ee:	ad 85       	ldd	r26, Y+13	; 0x0d
    29f0:	be 85       	ldd	r27, Y+14	; 0x0e
    29f2:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <movestate.2418+0x1>
    29f6:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <movestate.2418+0x2>
    29fa:	a0 93 f1 03 	sts	0x03F1, r26	; 0x8003f1 <movestate.2418+0x3>
    29fe:	b0 93 f2 03 	sts	0x03F2, r27	; 0x8003f2 <movestate.2418+0x4>
	movestate.elapsedTime = MoveStatePeriod;
    2a02:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a04:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a06:	ad 85       	ldd	r26, Y+13	; 0x0d
    2a08:	be 85       	ldd	r27, Y+14	; 0x0e
    2a0a:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <movestate.2418+0x5>
    2a0e:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <movestate.2418+0x6>
    2a12:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <movestate.2418+0x7>
    2a16:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <movestate.2418+0x8>
	movestate.TickFct = &Move;
    2a1a:	8a e5       	ldi	r24, 0x5A	; 90
    2a1c:	9e e0       	ldi	r25, 0x0E	; 14
    2a1e:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <movestate.2418+0xa>
    2a22:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <movestate.2418+0x9>
	
	collisionstate.state = CollisionInit;
    2a26:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <collisionstate.2419>
	collisionstate.period = CollisionStatePeriod;
    2a2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a2c:	98 89       	ldd	r25, Y+16	; 0x10
    2a2e:	a9 89       	ldd	r26, Y+17	; 0x11
    2a30:	ba 89       	ldd	r27, Y+18	; 0x12
    2a32:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <collisionstate.2419+0x1>
    2a36:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <collisionstate.2419+0x2>
    2a3a:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <collisionstate.2419+0x3>
    2a3e:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <collisionstate.2419+0x4>
	collisionstate.elapsedTime = CollisionStatePeriod;
    2a42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a44:	98 89       	ldd	r25, Y+16	; 0x10
    2a46:	a9 89       	ldd	r26, Y+17	; 0x11
    2a48:	ba 89       	ldd	r27, Y+18	; 0x12
    2a4a:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <collisionstate.2419+0x5>
    2a4e:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <collisionstate.2419+0x6>
    2a52:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <collisionstate.2419+0x7>
    2a56:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <collisionstate.2419+0x8>
	collisionstate.TickFct = &Collision;
    2a5a:	86 e4       	ldi	r24, 0x46	; 70
    2a5c:	90 e1       	ldi	r25, 0x10	; 16
    2a5e:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <collisionstate.2419+0xa>
    2a62:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <collisionstate.2419+0x9>
	
	foodstate.state = FoodInit;
    2a66:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <foodstate.2420>
	foodstate.period = FoodStatePeriod;
    2a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6e:	ad 89       	ldd	r26, Y+21	; 0x15
    2a70:	be 89       	ldd	r27, Y+22	; 0x16
    2a72:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <foodstate.2420+0x1>
    2a76:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <foodstate.2420+0x2>
    2a7a:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <foodstate.2420+0x3>
    2a7e:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <foodstate.2420+0x4>
	foodstate.elapsedTime = FoodStatePeriod;
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	ad 89       	ldd	r26, Y+21	; 0x15
    2a88:	be 89       	ldd	r27, Y+22	; 0x16
    2a8a:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <foodstate.2420+0x5>
    2a8e:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <foodstate.2420+0x6>
    2a92:	a0 93 0b 04 	sts	0x040B, r26	; 0x80040b <foodstate.2420+0x7>
    2a96:	b0 93 0c 04 	sts	0x040C, r27	; 0x80040c <foodstate.2420+0x8>
	foodstate.TickFct = &Food;
    2a9a:	8b e9       	ldi	r24, 0x9B	; 155
    2a9c:	90 e1       	ldi	r25, 0x10	; 16
    2a9e:	90 93 0e 04 	sts	0x040E, r25	; 0x80040e <foodstate.2420+0xa>
    2aa2:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <foodstate.2420+0x9>
	
	soundstate.state = SoundInit;
    2aa6:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <soundstate.2421>
	soundstate.period = SoundStatePeriod;
    2aaa:	8f 89       	ldd	r24, Y+23	; 0x17
    2aac:	98 8d       	ldd	r25, Y+24	; 0x18
    2aae:	a9 8d       	ldd	r26, Y+25	; 0x19
    2ab0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2ab2:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <soundstate.2421+0x1>
    2ab6:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <soundstate.2421+0x2>
    2aba:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <soundstate.2421+0x3>
    2abe:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <soundstate.2421+0x4>
	soundstate.elapsedTime = SoundStatePeriod;
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac6:	a9 8d       	ldd	r26, Y+25	; 0x19
    2ac8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2aca:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <soundstate.2421+0x5>
    2ace:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <soundstate.2421+0x6>
    2ad2:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <soundstate.2421+0x7>
    2ad6:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <soundstate.2421+0x8>
	soundstate.TickFct = &Sound;	
    2ada:	8d e0       	ldi	r24, 0x0D	; 13
    2adc:	92 e1       	ldi	r25, 0x12	; 18
    2ade:	90 93 19 04 	sts	0x0419, r25	; 0x800419 <soundstate.2421+0xa>
    2ae2:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <soundstate.2421+0x9>
	
	PWM_on();
    2ae6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <PWM_on>
	TimerOn();
    2aea:	0e 94 72 01 	call	0x2e4	; 0x2e4 <TimerOn>
	TempGCD = GCD;
    2aee:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <GCD>
    2af2:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <GCD+0x1>
    2af6:	a0 91 4c 04 	lds	r26, 0x044C	; 0x80044c <GCD+0x2>
    2afa:	b0 91 4d 04 	lds	r27, 0x044D	; 0x80044d <GCD+0x3>
    2afe:	80 93 2e 04 	sts	0x042E, r24	; 0x80042e <TempGCD>
    2b02:	90 93 2f 04 	sts	0x042F, r25	; 0x80042f <TempGCD+0x1>
    2b06:	a0 93 30 04 	sts	0x0430, r26	; 0x800430 <TempGCD+0x2>
    2b0a:	b0 93 31 04 	sts	0x0431, r27	; 0x800431 <TempGCD+0x3>
	
	while(1)
	{
		TimerSet(GCD);
    2b0e:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <GCD>
    2b12:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <GCD+0x1>
    2b16:	a0 91 4c 04 	lds	r26, 0x044C	; 0x80044c <GCD+0x2>
    2b1a:	b0 91 4d 04 	lds	r27, 0x044D	; 0x80044d <GCD+0x3>
    2b1e:	bc 01       	movw	r22, r24
    2b20:	cd 01       	movw	r24, r26
    2b22:	0e 94 15 02 	call	0x42a	; 0x42a <TimerSet>
		
		for (unsigned short i = 0; i < numTasks; ++i)
    2b26:	1a 82       	std	Y+2, r1	; 0x02
    2b28:	19 82       	std	Y+1, r1	; 0x01
    2b2a:	8e c0       	rjmp	.+284    	; 0x2c48 <main+0x546>
		{
			// Task is ready to tick
			if (tasks[i]->elapsedTime == tasks[i]->period)
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b30:	88 0f       	add	r24, r24
    2b32:	99 1f       	adc	r25, r25
    2b34:	9e 01       	movw	r18, r28
    2b36:	2f 5f       	subi	r18, 0xFF	; 255
    2b38:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3a:	82 0f       	add	r24, r18
    2b3c:	93 1f       	adc	r25, r19
    2b3e:	86 96       	adiw	r24, 0x26	; 38
    2b40:	fc 01       	movw	r30, r24
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	fc 01       	movw	r30, r24
    2b48:	25 81       	ldd	r18, Z+5	; 0x05
    2b4a:	36 81       	ldd	r19, Z+6	; 0x06
    2b4c:	47 81       	ldd	r20, Z+7	; 0x07
    2b4e:	50 85       	ldd	r21, Z+8	; 0x08
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	9a 81       	ldd	r25, Y+2	; 0x02
    2b54:	88 0f       	add	r24, r24
    2b56:	99 1f       	adc	r25, r25
    2b58:	be 01       	movw	r22, r28
    2b5a:	6f 5f       	subi	r22, 0xFF	; 255
    2b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b5e:	86 0f       	add	r24, r22
    2b60:	97 1f       	adc	r25, r23
    2b62:	86 96       	adiw	r24, 0x26	; 38
    2b64:	fc 01       	movw	r30, r24
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	81 81       	ldd	r24, Z+1	; 0x01
    2b6e:	92 81       	ldd	r25, Z+2	; 0x02
    2b70:	a3 81       	ldd	r26, Z+3	; 0x03
    2b72:	b4 81       	ldd	r27, Z+4	; 0x04
    2b74:	28 17       	cp	r18, r24
    2b76:	39 07       	cpc	r19, r25
    2b78:	4a 07       	cpc	r20, r26
    2b7a:	5b 07       	cpc	r21, r27
    2b7c:	09 f0       	breq	.+2      	; 0x2b80 <main+0x47e>
    2b7e:	45 c0       	rjmp	.+138    	; 0x2c0a <main+0x508>
			{
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	9a 81       	ldd	r25, Y+2	; 0x02
    2b84:	88 0f       	add	r24, r24
    2b86:	99 1f       	adc	r25, r25
    2b88:	9e 01       	movw	r18, r28
    2b8a:	2f 5f       	subi	r18, 0xFF	; 255
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	82 0f       	add	r24, r18
    2b90:	93 1f       	adc	r25, r19
    2b92:	86 96       	adiw	r24, 0x26	; 38
    2b94:	fc 01       	movw	r30, r24
    2b96:	00 81       	ld	r16, Z
    2b98:	11 81       	ldd	r17, Z+1	; 0x01
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	9e 01       	movw	r18, r28
    2ba4:	2f 5f       	subi	r18, 0xFF	; 255
    2ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba8:	82 0f       	add	r24, r18
    2baa:	93 1f       	adc	r25, r19
    2bac:	86 96       	adiw	r24, 0x26	; 38
    2bae:	fc 01       	movw	r30, r24
    2bb0:	80 81       	ld	r24, Z
    2bb2:	91 81       	ldd	r25, Z+1	; 0x01
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	21 85       	ldd	r18, Z+9	; 0x09
    2bb8:	32 85       	ldd	r19, Z+10	; 0x0a
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	ae 01       	movw	r20, r28
    2bc4:	4f 5f       	subi	r20, 0xFF	; 255
    2bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc8:	84 0f       	add	r24, r20
    2bca:	95 1f       	adc	r25, r21
    2bcc:	86 96       	adiw	r24, 0x26	; 38
    2bce:	fc 01       	movw	r30, r24
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	80 81       	ld	r24, Z
    2bd8:	08 2e       	mov	r0, r24
    2bda:	00 0c       	add	r0, r0
    2bdc:	99 0b       	sbc	r25, r25
    2bde:	f9 01       	movw	r30, r18
    2be0:	09 95       	icall
    2be2:	f8 01       	movw	r30, r16
    2be4:	80 83       	st	Z, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	9e 01       	movw	r18, r28
    2bf0:	2f 5f       	subi	r18, 0xFF	; 255
    2bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf4:	82 0f       	add	r24, r18
    2bf6:	93 1f       	adc	r25, r19
    2bf8:	86 96       	adiw	r24, 0x26	; 38
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	fc 01       	movw	r30, r24
    2c02:	15 82       	std	Z+5, r1	; 0x05
    2c04:	16 82       	std	Z+6, r1	; 0x06
    2c06:	17 82       	std	Z+7, r1	; 0x07
    2c08:	10 86       	std	Z+8, r1	; 0x08
			}
			
			++tasks[i]->elapsedTime;
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	9e 01       	movw	r18, r28
    2c14:	2f 5f       	subi	r18, 0xFF	; 255
    2c16:	3f 4f       	sbci	r19, 0xFF	; 255
    2c18:	82 0f       	add	r24, r18
    2c1a:	93 1f       	adc	r25, r19
    2c1c:	86 96       	adiw	r24, 0x26	; 38
    2c1e:	fc 01       	movw	r30, r24
    2c20:	20 81       	ld	r18, Z
    2c22:	31 81       	ldd	r19, Z+1	; 0x01
    2c24:	f9 01       	movw	r30, r18
    2c26:	85 81       	ldd	r24, Z+5	; 0x05
    2c28:	96 81       	ldd	r25, Z+6	; 0x06
    2c2a:	a7 81       	ldd	r26, Z+7	; 0x07
    2c2c:	b0 85       	ldd	r27, Z+8	; 0x08
    2c2e:	01 96       	adiw	r24, 0x01	; 1
    2c30:	a1 1d       	adc	r26, r1
    2c32:	b1 1d       	adc	r27, r1
    2c34:	f9 01       	movw	r30, r18
    2c36:	85 83       	std	Z+5, r24	; 0x05
    2c38:	96 83       	std	Z+6, r25	; 0x06
    2c3a:	a7 83       	std	Z+7, r26	; 0x07
    2c3c:	b0 87       	std	Z+8, r27	; 0x08
	
	while(1)
	{
		TimerSet(GCD);
		
		for (unsigned short i = 0; i < numTasks; ++i)
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	9a 81       	ldd	r25, Y+2	; 0x02
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	9a 83       	std	Y+2, r25	; 0x02
    2c46:	89 83       	std	Y+1, r24	; 0x01
    2c48:	29 81       	ldd	r18, Y+1	; 0x01
    2c4a:	3a 81       	ldd	r19, Y+2	; 0x02
    2c4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c50:	28 17       	cp	r18, r24
    2c52:	39 07       	cpc	r19, r25
    2c54:	08 f4       	brcc	.+2      	; 0x2c58 <main+0x556>
    2c56:	6a cf       	rjmp	.-300    	; 0x2b2c <main+0x42a>
			}
			
			++tasks[i]->elapsedTime;
		}
		
		if (ChangedDifficulty)
    2c58:	80 91 46 04 	lds	r24, 0x0446	; 0x800446 <ChangedDifficulty>
    2c5c:	90 91 47 04 	lds	r25, 0x0447	; 0x800447 <ChangedDifficulty+0x1>
    2c60:	89 2b       	or	r24, r25
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <main+0x564>
    2c64:	4b c1       	rjmp	.+662    	; 0x2efc <main+0x7fa>
		{
			int TempGCDArray[] = { GameStateCalc, MoveStateCalc, CollisionStateCalc, FoodStateCalc, SoundStateCalc };
    2c66:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <GameStateCalc>
    2c6a:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <GameStateCalc+0x1>
    2c6e:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <GameStateCalc+0x2>
    2c72:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <GameStateCalc+0x3>
    2c76:	9a ab       	std	Y+50, r25	; 0x32
    2c78:	89 ab       	std	Y+49, r24	; 0x31
    2c7a:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <MoveStateCalc>
    2c7e:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <MoveStateCalc+0x1>
    2c82:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <MoveStateCalc+0x2>
    2c86:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <MoveStateCalc+0x3>
    2c8a:	9c ab       	std	Y+52, r25	; 0x34
    2c8c:	8b ab       	std	Y+51, r24	; 0x33
    2c8e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <CollisionStateCalc>
    2c92:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <CollisionStateCalc+0x1>
    2c96:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <CollisionStateCalc+0x2>
    2c9a:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <CollisionStateCalc+0x3>
    2c9e:	9e ab       	std	Y+54, r25	; 0x36
    2ca0:	8d ab       	std	Y+53, r24	; 0x35
    2ca2:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <FoodStateCalc>
    2ca6:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <FoodStateCalc+0x1>
    2caa:	a0 91 38 04 	lds	r26, 0x0438	; 0x800438 <FoodStateCalc+0x2>
    2cae:	b0 91 39 04 	lds	r27, 0x0439	; 0x800439 <FoodStateCalc+0x3>
    2cb2:	98 af       	std	Y+56, r25	; 0x38
    2cb4:	8f ab       	std	Y+55, r24	; 0x37
    2cb6:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <SoundStateCalc>
    2cba:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <SoundStateCalc+0x1>
    2cbe:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <SoundStateCalc+0x2>
    2cc2:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <SoundStateCalc+0x3>
    2cc6:	9a af       	std	Y+58, r25	; 0x3a
    2cc8:	89 af       	std	Y+57, r24	; 0x39
			
			tmpGCD = 1;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a0 e0       	ldi	r26, 0x00	; 0
    2cd0:	b0 e0       	ldi	r27, 0x00	; 0
    2cd2:	8b 83       	std	Y+3, r24	; 0x03
    2cd4:	9c 83       	std	Y+4, r25	; 0x04
    2cd6:	ad 83       	std	Y+5, r26	; 0x05
    2cd8:	be 83       	std	Y+6, r27	; 0x06
			tmpGCD = findGCD(TempGCDArray, 5);
    2cda:	ce 01       	movw	r24, r28
    2cdc:	c1 96       	adiw	r24, 0x31	; 49
    2cde:	65 e0       	ldi	r22, 0x05	; 5
    2ce0:	70 e0       	ldi	r23, 0x00	; 0
    2ce2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <findGCD>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8b 83       	std	Y+3, r24	; 0x03
    2cec:	9c 83       	std	Y+4, r25	; 0x04
    2cee:	ad 83       	std	Y+5, r26	; 0x05
    2cf0:	be 83       	std	Y+6, r27	; 0x06
			GCD = tmpGCD;
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf6:	ad 81       	ldd	r26, Y+5	; 0x05
    2cf8:	be 81       	ldd	r27, Y+6	; 0x06
    2cfa:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <GCD>
    2cfe:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <GCD+0x1>
    2d02:	a0 93 4c 04 	sts	0x044C, r26	; 0x80044c <GCD+0x2>
    2d06:	b0 93 4d 04 	sts	0x044D, r27	; 0x80044d <GCD+0x3>
			
			GameStatePeriod = GameStateCalc / GCD;
    2d0a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <GameStateCalc>
    2d0e:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <GameStateCalc+0x1>
    2d12:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <GameStateCalc+0x2>
    2d16:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <GameStateCalc+0x3>
    2d1a:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    2d1e:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    2d22:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2d26:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    2d2a:	bc 01       	movw	r22, r24
    2d2c:	cd 01       	movw	r24, r26
    2d2e:	b8 d2       	rcall	.+1392   	; 0x32a0 <__udivmodsi4>
    2d30:	da 01       	movw	r26, r20
    2d32:	c9 01       	movw	r24, r18
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	a9 87       	std	Y+9, r26	; 0x09
    2d3a:	ba 87       	std	Y+10, r27	; 0x0a
			MoveStatePeriod = MoveStateCalc / GCD;
    2d3c:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <MoveStateCalc>
    2d40:	90 91 41 04 	lds	r25, 0x0441	; 0x800441 <MoveStateCalc+0x1>
    2d44:	a0 91 42 04 	lds	r26, 0x0442	; 0x800442 <MoveStateCalc+0x2>
    2d48:	b0 91 43 04 	lds	r27, 0x0443	; 0x800443 <MoveStateCalc+0x3>
    2d4c:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    2d50:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    2d54:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2d58:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    2d5c:	bc 01       	movw	r22, r24
    2d5e:	cd 01       	movw	r24, r26
    2d60:	9f d2       	rcall	.+1342   	; 0x32a0 <__udivmodsi4>
    2d62:	da 01       	movw	r26, r20
    2d64:	c9 01       	movw	r24, r18
    2d66:	8b 87       	std	Y+11, r24	; 0x0b
    2d68:	9c 87       	std	Y+12, r25	; 0x0c
    2d6a:	ad 87       	std	Y+13, r26	; 0x0d
    2d6c:	be 87       	std	Y+14, r27	; 0x0e
			CollisionStatePeriod = CollisionStateCalc / GCD;
    2d6e:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <CollisionStateCalc>
    2d72:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <CollisionStateCalc+0x1>
    2d76:	a0 91 28 04 	lds	r26, 0x0428	; 0x800428 <CollisionStateCalc+0x2>
    2d7a:	b0 91 29 04 	lds	r27, 0x0429	; 0x800429 <CollisionStateCalc+0x3>
    2d7e:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    2d82:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    2d86:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2d8a:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	86 d2       	rcall	.+1292   	; 0x32a0 <__udivmodsi4>
    2d94:	da 01       	movw	r26, r20
    2d96:	c9 01       	movw	r24, r18
    2d98:	8f 87       	std	Y+15, r24	; 0x0f
    2d9a:	98 8b       	std	Y+16, r25	; 0x10
    2d9c:	a9 8b       	std	Y+17, r26	; 0x11
    2d9e:	ba 8b       	std	Y+18, r27	; 0x12
			FoodStatePeriod = FoodStateCalc / GCD;
    2da0:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <FoodStateCalc>
    2da4:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <FoodStateCalc+0x1>
    2da8:	a0 91 38 04 	lds	r26, 0x0438	; 0x800438 <FoodStateCalc+0x2>
    2dac:	b0 91 39 04 	lds	r27, 0x0439	; 0x800439 <FoodStateCalc+0x3>
    2db0:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    2db4:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    2db8:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2dbc:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    2dc0:	bc 01       	movw	r22, r24
    2dc2:	cd 01       	movw	r24, r26
    2dc4:	6d d2       	rcall	.+1242   	; 0x32a0 <__udivmodsi4>
    2dc6:	da 01       	movw	r26, r20
    2dc8:	c9 01       	movw	r24, r18
    2dca:	8b 8b       	std	Y+19, r24	; 0x13
    2dcc:	9c 8b       	std	Y+20, r25	; 0x14
    2dce:	ad 8b       	std	Y+21, r26	; 0x15
    2dd0:	be 8b       	std	Y+22, r27	; 0x16
			SoundStatePeriod = SoundStateCalc / GCD;
    2dd2:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <SoundStateCalc>
    2dd6:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <SoundStateCalc+0x1>
    2dda:	a0 91 2c 04 	lds	r26, 0x042C	; 0x80042c <SoundStateCalc+0x2>
    2dde:	b0 91 2d 04 	lds	r27, 0x042D	; 0x80042d <SoundStateCalc+0x3>
    2de2:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <GCD>
    2de6:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <GCD+0x1>
    2dea:	40 91 4c 04 	lds	r20, 0x044C	; 0x80044c <GCD+0x2>
    2dee:	50 91 4d 04 	lds	r21, 0x044D	; 0x80044d <GCD+0x3>
    2df2:	bc 01       	movw	r22, r24
    2df4:	cd 01       	movw	r24, r26
    2df6:	54 d2       	rcall	.+1192   	; 0x32a0 <__udivmodsi4>
    2df8:	da 01       	movw	r26, r20
    2dfa:	c9 01       	movw	r24, r18
    2dfc:	8f 8b       	std	Y+23, r24	; 0x17
    2dfe:	98 8f       	std	Y+24, r25	; 0x18
    2e00:	a9 8f       	std	Y+25, r26	; 0x19
    2e02:	ba 8f       	std	Y+26, r27	; 0x1a
			
			gamestate.period = GameStatePeriod;
    2e04:	8f 81       	ldd	r24, Y+7	; 0x07
    2e06:	98 85       	ldd	r25, Y+8	; 0x08
    2e08:	a9 85       	ldd	r26, Y+9	; 0x09
    2e0a:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e0c:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <gamestate.2417+0x1>
    2e10:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <gamestate.2417+0x2>
    2e14:	a0 93 e6 03 	sts	0x03E6, r26	; 0x8003e6 <gamestate.2417+0x3>
    2e18:	b0 93 e7 03 	sts	0x03E7, r27	; 0x8003e7 <gamestate.2417+0x4>
			gamestate.elapsedTime = GameStatePeriod;
    2e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e1e:	98 85       	ldd	r25, Y+8	; 0x08
    2e20:	a9 85       	ldd	r26, Y+9	; 0x09
    2e22:	ba 85       	ldd	r27, Y+10	; 0x0a
    2e24:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <gamestate.2417+0x5>
    2e28:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <gamestate.2417+0x6>
    2e2c:	a0 93 ea 03 	sts	0x03EA, r26	; 0x8003ea <gamestate.2417+0x7>
    2e30:	b0 93 eb 03 	sts	0x03EB, r27	; 0x8003eb <gamestate.2417+0x8>
			
			movestate.period = MoveStatePeriod;
    2e34:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e36:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e38:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e3a:	be 85       	ldd	r27, Y+14	; 0x0e
    2e3c:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <movestate.2418+0x1>
    2e40:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <movestate.2418+0x2>
    2e44:	a0 93 f1 03 	sts	0x03F1, r26	; 0x8003f1 <movestate.2418+0x3>
    2e48:	b0 93 f2 03 	sts	0x03F2, r27	; 0x8003f2 <movestate.2418+0x4>
			movestate.elapsedTime = MoveStatePeriod;
    2e4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e50:	ad 85       	ldd	r26, Y+13	; 0x0d
    2e52:	be 85       	ldd	r27, Y+14	; 0x0e
    2e54:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <movestate.2418+0x5>
    2e58:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <movestate.2418+0x6>
    2e5c:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <movestate.2418+0x7>
    2e60:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <movestate.2418+0x8>
			
			collisionstate.period = CollisionStatePeriod;
    2e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e66:	98 89       	ldd	r25, Y+16	; 0x10
    2e68:	a9 89       	ldd	r26, Y+17	; 0x11
    2e6a:	ba 89       	ldd	r27, Y+18	; 0x12
    2e6c:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <collisionstate.2419+0x1>
    2e70:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <collisionstate.2419+0x2>
    2e74:	a0 93 fc 03 	sts	0x03FC, r26	; 0x8003fc <collisionstate.2419+0x3>
    2e78:	b0 93 fd 03 	sts	0x03FD, r27	; 0x8003fd <collisionstate.2419+0x4>
			collisionstate.elapsedTime = CollisionStatePeriod;
    2e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e7e:	98 89       	ldd	r25, Y+16	; 0x10
    2e80:	a9 89       	ldd	r26, Y+17	; 0x11
    2e82:	ba 89       	ldd	r27, Y+18	; 0x12
    2e84:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <collisionstate.2419+0x5>
    2e88:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <collisionstate.2419+0x6>
    2e8c:	a0 93 00 04 	sts	0x0400, r26	; 0x800400 <collisionstate.2419+0x7>
    2e90:	b0 93 01 04 	sts	0x0401, r27	; 0x800401 <collisionstate.2419+0x8>
			
			foodstate.period = FoodStatePeriod;
    2e94:	8b 89       	ldd	r24, Y+19	; 0x13
    2e96:	9c 89       	ldd	r25, Y+20	; 0x14
    2e98:	ad 89       	ldd	r26, Y+21	; 0x15
    2e9a:	be 89       	ldd	r27, Y+22	; 0x16
    2e9c:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <foodstate.2420+0x1>
    2ea0:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <foodstate.2420+0x2>
    2ea4:	a0 93 07 04 	sts	0x0407, r26	; 0x800407 <foodstate.2420+0x3>
    2ea8:	b0 93 08 04 	sts	0x0408, r27	; 0x800408 <foodstate.2420+0x4>
			foodstate.elapsedTime = FoodStatePeriod;
    2eac:	8b 89       	ldd	r24, Y+19	; 0x13
    2eae:	9c 89       	ldd	r25, Y+20	; 0x14
    2eb0:	ad 89       	ldd	r26, Y+21	; 0x15
    2eb2:	be 89       	ldd	r27, Y+22	; 0x16
    2eb4:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <foodstate.2420+0x5>
    2eb8:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <foodstate.2420+0x6>
    2ebc:	a0 93 0b 04 	sts	0x040B, r26	; 0x80040b <foodstate.2420+0x7>
    2ec0:	b0 93 0c 04 	sts	0x040C, r27	; 0x80040c <foodstate.2420+0x8>
			
			soundstate.period = SoundStatePeriod;
    2ec4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ec6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ec8:	a9 8d       	ldd	r26, Y+25	; 0x19
    2eca:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2ecc:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <soundstate.2421+0x1>
    2ed0:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <soundstate.2421+0x2>
    2ed4:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <soundstate.2421+0x3>
    2ed8:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <soundstate.2421+0x4>
			soundstate.elapsedTime = SoundStatePeriod;
    2edc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ede:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee0:	a9 8d       	ldd	r26, Y+25	; 0x19
    2ee2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2ee4:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <soundstate.2421+0x5>
    2ee8:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <soundstate.2421+0x6>
    2eec:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <soundstate.2421+0x7>
    2ef0:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <soundstate.2421+0x8>
			
			ChangedDifficulty = 0;
    2ef4:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <ChangedDifficulty+0x1>
    2ef8:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <ChangedDifficulty>
		}
		
		while (!TimerFlag);
    2efc:	00 00       	nop
    2efe:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <__data_end>
    2f02:	88 23       	and	r24, r24
    2f04:	e1 f3       	breq	.-8      	; 0x2efe <main+0x7fc>
		TimerFlag = 0;
    2f06:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <__data_end>
	}
    2f0a:	01 ce       	rjmp	.-1022   	; 0x2b0e <main+0x40c>

00002f0c <__cmpsf2>:
    2f0c:	d9 d0       	rcall	.+434    	; 0x30c0 <__fp_cmp>
    2f0e:	08 f4       	brcc	.+2      	; 0x2f12 <__cmpsf2+0x6>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	08 95       	ret

00002f14 <__divsf3>:
    2f14:	0c d0       	rcall	.+24     	; 0x2f2e <__divsf3x>
    2f16:	0f c1       	rjmp	.+542    	; 0x3136 <__fp_round>
    2f18:	07 d1       	rcall	.+526    	; 0x3128 <__fp_pscB>
    2f1a:	40 f0       	brcs	.+16     	; 0x2f2c <__divsf3+0x18>
    2f1c:	fe d0       	rcall	.+508    	; 0x311a <__fp_pscA>
    2f1e:	30 f0       	brcs	.+12     	; 0x2f2c <__divsf3+0x18>
    2f20:	21 f4       	brne	.+8      	; 0x2f2a <__divsf3+0x16>
    2f22:	5f 3f       	cpi	r21, 0xFF	; 255
    2f24:	19 f0       	breq	.+6      	; 0x2f2c <__divsf3+0x18>
    2f26:	f0 c0       	rjmp	.+480    	; 0x3108 <__fp_inf>
    2f28:	51 11       	cpse	r21, r1
    2f2a:	39 c1       	rjmp	.+626    	; 0x319e <__fp_szero>
    2f2c:	f3 c0       	rjmp	.+486    	; 0x3114 <__fp_nan>

00002f2e <__divsf3x>:
    2f2e:	14 d1       	rcall	.+552    	; 0x3158 <__fp_split3>
    2f30:	98 f3       	brcs	.-26     	; 0x2f18 <__divsf3+0x4>

00002f32 <__divsf3_pse>:
    2f32:	99 23       	and	r25, r25
    2f34:	c9 f3       	breq	.-14     	; 0x2f28 <__divsf3+0x14>
    2f36:	55 23       	and	r21, r21
    2f38:	b1 f3       	breq	.-20     	; 0x2f26 <__divsf3+0x12>
    2f3a:	95 1b       	sub	r25, r21
    2f3c:	55 0b       	sbc	r21, r21
    2f3e:	bb 27       	eor	r27, r27
    2f40:	aa 27       	eor	r26, r26
    2f42:	62 17       	cp	r22, r18
    2f44:	73 07       	cpc	r23, r19
    2f46:	84 07       	cpc	r24, r20
    2f48:	38 f0       	brcs	.+14     	; 0x2f58 <__divsf3_pse+0x26>
    2f4a:	9f 5f       	subi	r25, 0xFF	; 255
    2f4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4e:	22 0f       	add	r18, r18
    2f50:	33 1f       	adc	r19, r19
    2f52:	44 1f       	adc	r20, r20
    2f54:	aa 1f       	adc	r26, r26
    2f56:	a9 f3       	breq	.-22     	; 0x2f42 <__divsf3_pse+0x10>
    2f58:	33 d0       	rcall	.+102    	; 0x2fc0 <__divsf3_pse+0x8e>
    2f5a:	0e 2e       	mov	r0, r30
    2f5c:	3a f0       	brmi	.+14     	; 0x2f6c <__divsf3_pse+0x3a>
    2f5e:	e0 e8       	ldi	r30, 0x80	; 128
    2f60:	30 d0       	rcall	.+96     	; 0x2fc2 <__divsf3_pse+0x90>
    2f62:	91 50       	subi	r25, 0x01	; 1
    2f64:	50 40       	sbci	r21, 0x00	; 0
    2f66:	e6 95       	lsr	r30
    2f68:	00 1c       	adc	r0, r0
    2f6a:	ca f7       	brpl	.-14     	; 0x2f5e <__divsf3_pse+0x2c>
    2f6c:	29 d0       	rcall	.+82     	; 0x2fc0 <__divsf3_pse+0x8e>
    2f6e:	fe 2f       	mov	r31, r30
    2f70:	27 d0       	rcall	.+78     	; 0x2fc0 <__divsf3_pse+0x8e>
    2f72:	66 0f       	add	r22, r22
    2f74:	77 1f       	adc	r23, r23
    2f76:	88 1f       	adc	r24, r24
    2f78:	bb 1f       	adc	r27, r27
    2f7a:	26 17       	cp	r18, r22
    2f7c:	37 07       	cpc	r19, r23
    2f7e:	48 07       	cpc	r20, r24
    2f80:	ab 07       	cpc	r26, r27
    2f82:	b0 e8       	ldi	r27, 0x80	; 128
    2f84:	09 f0       	breq	.+2      	; 0x2f88 <__divsf3_pse+0x56>
    2f86:	bb 0b       	sbc	r27, r27
    2f88:	80 2d       	mov	r24, r0
    2f8a:	bf 01       	movw	r22, r30
    2f8c:	ff 27       	eor	r31, r31
    2f8e:	93 58       	subi	r25, 0x83	; 131
    2f90:	5f 4f       	sbci	r21, 0xFF	; 255
    2f92:	2a f0       	brmi	.+10     	; 0x2f9e <__divsf3_pse+0x6c>
    2f94:	9e 3f       	cpi	r25, 0xFE	; 254
    2f96:	51 05       	cpc	r21, r1
    2f98:	68 f0       	brcs	.+26     	; 0x2fb4 <__divsf3_pse+0x82>
    2f9a:	b6 c0       	rjmp	.+364    	; 0x3108 <__fp_inf>
    2f9c:	00 c1       	rjmp	.+512    	; 0x319e <__fp_szero>
    2f9e:	5f 3f       	cpi	r21, 0xFF	; 255
    2fa0:	ec f3       	brlt	.-6      	; 0x2f9c <__divsf3_pse+0x6a>
    2fa2:	98 3e       	cpi	r25, 0xE8	; 232
    2fa4:	dc f3       	brlt	.-10     	; 0x2f9c <__divsf3_pse+0x6a>
    2fa6:	86 95       	lsr	r24
    2fa8:	77 95       	ror	r23
    2faa:	67 95       	ror	r22
    2fac:	b7 95       	ror	r27
    2fae:	f7 95       	ror	r31
    2fb0:	9f 5f       	subi	r25, 0xFF	; 255
    2fb2:	c9 f7       	brne	.-14     	; 0x2fa6 <__divsf3_pse+0x74>
    2fb4:	88 0f       	add	r24, r24
    2fb6:	91 1d       	adc	r25, r1
    2fb8:	96 95       	lsr	r25
    2fba:	87 95       	ror	r24
    2fbc:	97 f9       	bld	r25, 7
    2fbe:	08 95       	ret
    2fc0:	e1 e0       	ldi	r30, 0x01	; 1
    2fc2:	66 0f       	add	r22, r22
    2fc4:	77 1f       	adc	r23, r23
    2fc6:	88 1f       	adc	r24, r24
    2fc8:	bb 1f       	adc	r27, r27
    2fca:	62 17       	cp	r22, r18
    2fcc:	73 07       	cpc	r23, r19
    2fce:	84 07       	cpc	r24, r20
    2fd0:	ba 07       	cpc	r27, r26
    2fd2:	20 f0       	brcs	.+8      	; 0x2fdc <__divsf3_pse+0xaa>
    2fd4:	62 1b       	sub	r22, r18
    2fd6:	73 0b       	sbc	r23, r19
    2fd8:	84 0b       	sbc	r24, r20
    2fda:	ba 0b       	sbc	r27, r26
    2fdc:	ee 1f       	adc	r30, r30
    2fde:	88 f7       	brcc	.-30     	; 0x2fc2 <__divsf3_pse+0x90>
    2fe0:	e0 95       	com	r30
    2fe2:	08 95       	ret

00002fe4 <__fixsfsi>:
    2fe4:	04 d0       	rcall	.+8      	; 0x2fee <__fixunssfsi>
    2fe6:	68 94       	set
    2fe8:	b1 11       	cpse	r27, r1
    2fea:	d9 c0       	rjmp	.+434    	; 0x319e <__fp_szero>
    2fec:	08 95       	ret

00002fee <__fixunssfsi>:
    2fee:	bc d0       	rcall	.+376    	; 0x3168 <__fp_splitA>
    2ff0:	88 f0       	brcs	.+34     	; 0x3014 <__fixunssfsi+0x26>
    2ff2:	9f 57       	subi	r25, 0x7F	; 127
    2ff4:	90 f0       	brcs	.+36     	; 0x301a <__fixunssfsi+0x2c>
    2ff6:	b9 2f       	mov	r27, r25
    2ff8:	99 27       	eor	r25, r25
    2ffa:	b7 51       	subi	r27, 0x17	; 23
    2ffc:	a0 f0       	brcs	.+40     	; 0x3026 <__fixunssfsi+0x38>
    2ffe:	d1 f0       	breq	.+52     	; 0x3034 <__fixunssfsi+0x46>
    3000:	66 0f       	add	r22, r22
    3002:	77 1f       	adc	r23, r23
    3004:	88 1f       	adc	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	1a f0       	brmi	.+6      	; 0x3010 <__fixunssfsi+0x22>
    300a:	ba 95       	dec	r27
    300c:	c9 f7       	brne	.-14     	; 0x3000 <__fixunssfsi+0x12>
    300e:	12 c0       	rjmp	.+36     	; 0x3034 <__fixunssfsi+0x46>
    3010:	b1 30       	cpi	r27, 0x01	; 1
    3012:	81 f0       	breq	.+32     	; 0x3034 <__fixunssfsi+0x46>
    3014:	c3 d0       	rcall	.+390    	; 0x319c <__fp_zero>
    3016:	b1 e0       	ldi	r27, 0x01	; 1
    3018:	08 95       	ret
    301a:	c0 c0       	rjmp	.+384    	; 0x319c <__fp_zero>
    301c:	67 2f       	mov	r22, r23
    301e:	78 2f       	mov	r23, r24
    3020:	88 27       	eor	r24, r24
    3022:	b8 5f       	subi	r27, 0xF8	; 248
    3024:	39 f0       	breq	.+14     	; 0x3034 <__fixunssfsi+0x46>
    3026:	b9 3f       	cpi	r27, 0xF9	; 249
    3028:	cc f3       	brlt	.-14     	; 0x301c <__fixunssfsi+0x2e>
    302a:	86 95       	lsr	r24
    302c:	77 95       	ror	r23
    302e:	67 95       	ror	r22
    3030:	b3 95       	inc	r27
    3032:	d9 f7       	brne	.-10     	; 0x302a <__fixunssfsi+0x3c>
    3034:	3e f4       	brtc	.+14     	; 0x3044 <__fixunssfsi+0x56>
    3036:	90 95       	com	r25
    3038:	80 95       	com	r24
    303a:	70 95       	com	r23
    303c:	61 95       	neg	r22
    303e:	7f 4f       	sbci	r23, 0xFF	; 255
    3040:	8f 4f       	sbci	r24, 0xFF	; 255
    3042:	9f 4f       	sbci	r25, 0xFF	; 255
    3044:	08 95       	ret

00003046 <__floatunsisf>:
    3046:	e8 94       	clt
    3048:	09 c0       	rjmp	.+18     	; 0x305c <__floatsisf+0x12>

0000304a <__floatsisf>:
    304a:	97 fb       	bst	r25, 7
    304c:	3e f4       	brtc	.+14     	; 0x305c <__floatsisf+0x12>
    304e:	90 95       	com	r25
    3050:	80 95       	com	r24
    3052:	70 95       	com	r23
    3054:	61 95       	neg	r22
    3056:	7f 4f       	sbci	r23, 0xFF	; 255
    3058:	8f 4f       	sbci	r24, 0xFF	; 255
    305a:	9f 4f       	sbci	r25, 0xFF	; 255
    305c:	99 23       	and	r25, r25
    305e:	a9 f0       	breq	.+42     	; 0x308a <__floatsisf+0x40>
    3060:	f9 2f       	mov	r31, r25
    3062:	96 e9       	ldi	r25, 0x96	; 150
    3064:	bb 27       	eor	r27, r27
    3066:	93 95       	inc	r25
    3068:	f6 95       	lsr	r31
    306a:	87 95       	ror	r24
    306c:	77 95       	ror	r23
    306e:	67 95       	ror	r22
    3070:	b7 95       	ror	r27
    3072:	f1 11       	cpse	r31, r1
    3074:	f8 cf       	rjmp	.-16     	; 0x3066 <__floatsisf+0x1c>
    3076:	fa f4       	brpl	.+62     	; 0x30b6 <__floatsisf+0x6c>
    3078:	bb 0f       	add	r27, r27
    307a:	11 f4       	brne	.+4      	; 0x3080 <__floatsisf+0x36>
    307c:	60 ff       	sbrs	r22, 0
    307e:	1b c0       	rjmp	.+54     	; 0x30b6 <__floatsisf+0x6c>
    3080:	6f 5f       	subi	r22, 0xFF	; 255
    3082:	7f 4f       	sbci	r23, 0xFF	; 255
    3084:	8f 4f       	sbci	r24, 0xFF	; 255
    3086:	9f 4f       	sbci	r25, 0xFF	; 255
    3088:	16 c0       	rjmp	.+44     	; 0x30b6 <__floatsisf+0x6c>
    308a:	88 23       	and	r24, r24
    308c:	11 f0       	breq	.+4      	; 0x3092 <__floatsisf+0x48>
    308e:	96 e9       	ldi	r25, 0x96	; 150
    3090:	11 c0       	rjmp	.+34     	; 0x30b4 <__floatsisf+0x6a>
    3092:	77 23       	and	r23, r23
    3094:	21 f0       	breq	.+8      	; 0x309e <__floatsisf+0x54>
    3096:	9e e8       	ldi	r25, 0x8E	; 142
    3098:	87 2f       	mov	r24, r23
    309a:	76 2f       	mov	r23, r22
    309c:	05 c0       	rjmp	.+10     	; 0x30a8 <__floatsisf+0x5e>
    309e:	66 23       	and	r22, r22
    30a0:	71 f0       	breq	.+28     	; 0x30be <__floatsisf+0x74>
    30a2:	96 e8       	ldi	r25, 0x86	; 134
    30a4:	86 2f       	mov	r24, r22
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	2a f0       	brmi	.+10     	; 0x30b6 <__floatsisf+0x6c>
    30ac:	9a 95       	dec	r25
    30ae:	66 0f       	add	r22, r22
    30b0:	77 1f       	adc	r23, r23
    30b2:	88 1f       	adc	r24, r24
    30b4:	da f7       	brpl	.-10     	; 0x30ac <__floatsisf+0x62>
    30b6:	88 0f       	add	r24, r24
    30b8:	96 95       	lsr	r25
    30ba:	87 95       	ror	r24
    30bc:	97 f9       	bld	r25, 7
    30be:	08 95       	ret

000030c0 <__fp_cmp>:
    30c0:	99 0f       	add	r25, r25
    30c2:	00 08       	sbc	r0, r0
    30c4:	55 0f       	add	r21, r21
    30c6:	aa 0b       	sbc	r26, r26
    30c8:	e0 e8       	ldi	r30, 0x80	; 128
    30ca:	fe ef       	ldi	r31, 0xFE	; 254
    30cc:	16 16       	cp	r1, r22
    30ce:	17 06       	cpc	r1, r23
    30d0:	e8 07       	cpc	r30, r24
    30d2:	f9 07       	cpc	r31, r25
    30d4:	c0 f0       	brcs	.+48     	; 0x3106 <__fp_cmp+0x46>
    30d6:	12 16       	cp	r1, r18
    30d8:	13 06       	cpc	r1, r19
    30da:	e4 07       	cpc	r30, r20
    30dc:	f5 07       	cpc	r31, r21
    30de:	98 f0       	brcs	.+38     	; 0x3106 <__fp_cmp+0x46>
    30e0:	62 1b       	sub	r22, r18
    30e2:	73 0b       	sbc	r23, r19
    30e4:	84 0b       	sbc	r24, r20
    30e6:	95 0b       	sbc	r25, r21
    30e8:	39 f4       	brne	.+14     	; 0x30f8 <__fp_cmp+0x38>
    30ea:	0a 26       	eor	r0, r26
    30ec:	61 f0       	breq	.+24     	; 0x3106 <__fp_cmp+0x46>
    30ee:	23 2b       	or	r18, r19
    30f0:	24 2b       	or	r18, r20
    30f2:	25 2b       	or	r18, r21
    30f4:	21 f4       	brne	.+8      	; 0x30fe <__fp_cmp+0x3e>
    30f6:	08 95       	ret
    30f8:	0a 26       	eor	r0, r26
    30fa:	09 f4       	brne	.+2      	; 0x30fe <__fp_cmp+0x3e>
    30fc:	a1 40       	sbci	r26, 0x01	; 1
    30fe:	a6 95       	lsr	r26
    3100:	8f ef       	ldi	r24, 0xFF	; 255
    3102:	81 1d       	adc	r24, r1
    3104:	81 1d       	adc	r24, r1
    3106:	08 95       	ret

00003108 <__fp_inf>:
    3108:	97 f9       	bld	r25, 7
    310a:	9f 67       	ori	r25, 0x7F	; 127
    310c:	80 e8       	ldi	r24, 0x80	; 128
    310e:	70 e0       	ldi	r23, 0x00	; 0
    3110:	60 e0       	ldi	r22, 0x00	; 0
    3112:	08 95       	ret

00003114 <__fp_nan>:
    3114:	9f ef       	ldi	r25, 0xFF	; 255
    3116:	80 ec       	ldi	r24, 0xC0	; 192
    3118:	08 95       	ret

0000311a <__fp_pscA>:
    311a:	00 24       	eor	r0, r0
    311c:	0a 94       	dec	r0
    311e:	16 16       	cp	r1, r22
    3120:	17 06       	cpc	r1, r23
    3122:	18 06       	cpc	r1, r24
    3124:	09 06       	cpc	r0, r25
    3126:	08 95       	ret

00003128 <__fp_pscB>:
    3128:	00 24       	eor	r0, r0
    312a:	0a 94       	dec	r0
    312c:	12 16       	cp	r1, r18
    312e:	13 06       	cpc	r1, r19
    3130:	14 06       	cpc	r1, r20
    3132:	05 06       	cpc	r0, r21
    3134:	08 95       	ret

00003136 <__fp_round>:
    3136:	09 2e       	mov	r0, r25
    3138:	03 94       	inc	r0
    313a:	00 0c       	add	r0, r0
    313c:	11 f4       	brne	.+4      	; 0x3142 <__fp_round+0xc>
    313e:	88 23       	and	r24, r24
    3140:	52 f0       	brmi	.+20     	; 0x3156 <__fp_round+0x20>
    3142:	bb 0f       	add	r27, r27
    3144:	40 f4       	brcc	.+16     	; 0x3156 <__fp_round+0x20>
    3146:	bf 2b       	or	r27, r31
    3148:	11 f4       	brne	.+4      	; 0x314e <__fp_round+0x18>
    314a:	60 ff       	sbrs	r22, 0
    314c:	04 c0       	rjmp	.+8      	; 0x3156 <__fp_round+0x20>
    314e:	6f 5f       	subi	r22, 0xFF	; 255
    3150:	7f 4f       	sbci	r23, 0xFF	; 255
    3152:	8f 4f       	sbci	r24, 0xFF	; 255
    3154:	9f 4f       	sbci	r25, 0xFF	; 255
    3156:	08 95       	ret

00003158 <__fp_split3>:
    3158:	57 fd       	sbrc	r21, 7
    315a:	90 58       	subi	r25, 0x80	; 128
    315c:	44 0f       	add	r20, r20
    315e:	55 1f       	adc	r21, r21
    3160:	59 f0       	breq	.+22     	; 0x3178 <__fp_splitA+0x10>
    3162:	5f 3f       	cpi	r21, 0xFF	; 255
    3164:	71 f0       	breq	.+28     	; 0x3182 <__fp_splitA+0x1a>
    3166:	47 95       	ror	r20

00003168 <__fp_splitA>:
    3168:	88 0f       	add	r24, r24
    316a:	97 fb       	bst	r25, 7
    316c:	99 1f       	adc	r25, r25
    316e:	61 f0       	breq	.+24     	; 0x3188 <__fp_splitA+0x20>
    3170:	9f 3f       	cpi	r25, 0xFF	; 255
    3172:	79 f0       	breq	.+30     	; 0x3192 <__fp_splitA+0x2a>
    3174:	87 95       	ror	r24
    3176:	08 95       	ret
    3178:	12 16       	cp	r1, r18
    317a:	13 06       	cpc	r1, r19
    317c:	14 06       	cpc	r1, r20
    317e:	55 1f       	adc	r21, r21
    3180:	f2 cf       	rjmp	.-28     	; 0x3166 <__fp_split3+0xe>
    3182:	46 95       	lsr	r20
    3184:	f1 df       	rcall	.-30     	; 0x3168 <__fp_splitA>
    3186:	08 c0       	rjmp	.+16     	; 0x3198 <__fp_splitA+0x30>
    3188:	16 16       	cp	r1, r22
    318a:	17 06       	cpc	r1, r23
    318c:	18 06       	cpc	r1, r24
    318e:	99 1f       	adc	r25, r25
    3190:	f1 cf       	rjmp	.-30     	; 0x3174 <__fp_splitA+0xc>
    3192:	86 95       	lsr	r24
    3194:	71 05       	cpc	r23, r1
    3196:	61 05       	cpc	r22, r1
    3198:	08 94       	sec
    319a:	08 95       	ret

0000319c <__fp_zero>:
    319c:	e8 94       	clt

0000319e <__fp_szero>:
    319e:	bb 27       	eor	r27, r27
    31a0:	66 27       	eor	r22, r22
    31a2:	77 27       	eor	r23, r23
    31a4:	cb 01       	movw	r24, r22
    31a6:	97 f9       	bld	r25, 7
    31a8:	08 95       	ret

000031aa <__gesf2>:
    31aa:	8a df       	rcall	.-236    	; 0x30c0 <__fp_cmp>
    31ac:	08 f4       	brcc	.+2      	; 0x31b0 <__gesf2+0x6>
    31ae:	8f ef       	ldi	r24, 0xFF	; 255
    31b0:	08 95       	ret

000031b2 <__mulsf3>:
    31b2:	0b d0       	rcall	.+22     	; 0x31ca <__mulsf3x>
    31b4:	c0 cf       	rjmp	.-128    	; 0x3136 <__fp_round>
    31b6:	b1 df       	rcall	.-158    	; 0x311a <__fp_pscA>
    31b8:	28 f0       	brcs	.+10     	; 0x31c4 <__mulsf3+0x12>
    31ba:	b6 df       	rcall	.-148    	; 0x3128 <__fp_pscB>
    31bc:	18 f0       	brcs	.+6      	; 0x31c4 <__mulsf3+0x12>
    31be:	95 23       	and	r25, r21
    31c0:	09 f0       	breq	.+2      	; 0x31c4 <__mulsf3+0x12>
    31c2:	a2 cf       	rjmp	.-188    	; 0x3108 <__fp_inf>
    31c4:	a7 cf       	rjmp	.-178    	; 0x3114 <__fp_nan>
    31c6:	11 24       	eor	r1, r1
    31c8:	ea cf       	rjmp	.-44     	; 0x319e <__fp_szero>

000031ca <__mulsf3x>:
    31ca:	c6 df       	rcall	.-116    	; 0x3158 <__fp_split3>
    31cc:	a0 f3       	brcs	.-24     	; 0x31b6 <__mulsf3+0x4>

000031ce <__mulsf3_pse>:
    31ce:	95 9f       	mul	r25, r21
    31d0:	d1 f3       	breq	.-12     	; 0x31c6 <__mulsf3+0x14>
    31d2:	95 0f       	add	r25, r21
    31d4:	50 e0       	ldi	r21, 0x00	; 0
    31d6:	55 1f       	adc	r21, r21
    31d8:	62 9f       	mul	r22, r18
    31da:	f0 01       	movw	r30, r0
    31dc:	72 9f       	mul	r23, r18
    31de:	bb 27       	eor	r27, r27
    31e0:	f0 0d       	add	r31, r0
    31e2:	b1 1d       	adc	r27, r1
    31e4:	63 9f       	mul	r22, r19
    31e6:	aa 27       	eor	r26, r26
    31e8:	f0 0d       	add	r31, r0
    31ea:	b1 1d       	adc	r27, r1
    31ec:	aa 1f       	adc	r26, r26
    31ee:	64 9f       	mul	r22, r20
    31f0:	66 27       	eor	r22, r22
    31f2:	b0 0d       	add	r27, r0
    31f4:	a1 1d       	adc	r26, r1
    31f6:	66 1f       	adc	r22, r22
    31f8:	82 9f       	mul	r24, r18
    31fa:	22 27       	eor	r18, r18
    31fc:	b0 0d       	add	r27, r0
    31fe:	a1 1d       	adc	r26, r1
    3200:	62 1f       	adc	r22, r18
    3202:	73 9f       	mul	r23, r19
    3204:	b0 0d       	add	r27, r0
    3206:	a1 1d       	adc	r26, r1
    3208:	62 1f       	adc	r22, r18
    320a:	83 9f       	mul	r24, r19
    320c:	a0 0d       	add	r26, r0
    320e:	61 1d       	adc	r22, r1
    3210:	22 1f       	adc	r18, r18
    3212:	74 9f       	mul	r23, r20
    3214:	33 27       	eor	r19, r19
    3216:	a0 0d       	add	r26, r0
    3218:	61 1d       	adc	r22, r1
    321a:	23 1f       	adc	r18, r19
    321c:	84 9f       	mul	r24, r20
    321e:	60 0d       	add	r22, r0
    3220:	21 1d       	adc	r18, r1
    3222:	82 2f       	mov	r24, r18
    3224:	76 2f       	mov	r23, r22
    3226:	6a 2f       	mov	r22, r26
    3228:	11 24       	eor	r1, r1
    322a:	9f 57       	subi	r25, 0x7F	; 127
    322c:	50 40       	sbci	r21, 0x00	; 0
    322e:	8a f0       	brmi	.+34     	; 0x3252 <__mulsf3_pse+0x84>
    3230:	e1 f0       	breq	.+56     	; 0x326a <__mulsf3_pse+0x9c>
    3232:	88 23       	and	r24, r24
    3234:	4a f0       	brmi	.+18     	; 0x3248 <__mulsf3_pse+0x7a>
    3236:	ee 0f       	add	r30, r30
    3238:	ff 1f       	adc	r31, r31
    323a:	bb 1f       	adc	r27, r27
    323c:	66 1f       	adc	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	88 1f       	adc	r24, r24
    3242:	91 50       	subi	r25, 0x01	; 1
    3244:	50 40       	sbci	r21, 0x00	; 0
    3246:	a9 f7       	brne	.-22     	; 0x3232 <__mulsf3_pse+0x64>
    3248:	9e 3f       	cpi	r25, 0xFE	; 254
    324a:	51 05       	cpc	r21, r1
    324c:	70 f0       	brcs	.+28     	; 0x326a <__mulsf3_pse+0x9c>
    324e:	5c cf       	rjmp	.-328    	; 0x3108 <__fp_inf>
    3250:	a6 cf       	rjmp	.-180    	; 0x319e <__fp_szero>
    3252:	5f 3f       	cpi	r21, 0xFF	; 255
    3254:	ec f3       	brlt	.-6      	; 0x3250 <__mulsf3_pse+0x82>
    3256:	98 3e       	cpi	r25, 0xE8	; 232
    3258:	dc f3       	brlt	.-10     	; 0x3250 <__mulsf3_pse+0x82>
    325a:	86 95       	lsr	r24
    325c:	77 95       	ror	r23
    325e:	67 95       	ror	r22
    3260:	b7 95       	ror	r27
    3262:	f7 95       	ror	r31
    3264:	e7 95       	ror	r30
    3266:	9f 5f       	subi	r25, 0xFF	; 255
    3268:	c1 f7       	brne	.-16     	; 0x325a <__mulsf3_pse+0x8c>
    326a:	fe 2b       	or	r31, r30
    326c:	88 0f       	add	r24, r24
    326e:	91 1d       	adc	r25, r1
    3270:	96 95       	lsr	r25
    3272:	87 95       	ror	r24
    3274:	97 f9       	bld	r25, 7
    3276:	08 95       	ret

00003278 <__udivmodhi4>:
    3278:	aa 1b       	sub	r26, r26
    327a:	bb 1b       	sub	r27, r27
    327c:	51 e1       	ldi	r21, 0x11	; 17
    327e:	07 c0       	rjmp	.+14     	; 0x328e <__udivmodhi4_ep>

00003280 <__udivmodhi4_loop>:
    3280:	aa 1f       	adc	r26, r26
    3282:	bb 1f       	adc	r27, r27
    3284:	a6 17       	cp	r26, r22
    3286:	b7 07       	cpc	r27, r23
    3288:	10 f0       	brcs	.+4      	; 0x328e <__udivmodhi4_ep>
    328a:	a6 1b       	sub	r26, r22
    328c:	b7 0b       	sbc	r27, r23

0000328e <__udivmodhi4_ep>:
    328e:	88 1f       	adc	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	5a 95       	dec	r21
    3294:	a9 f7       	brne	.-22     	; 0x3280 <__udivmodhi4_loop>
    3296:	80 95       	com	r24
    3298:	90 95       	com	r25
    329a:	bc 01       	movw	r22, r24
    329c:	cd 01       	movw	r24, r26
    329e:	08 95       	ret

000032a0 <__udivmodsi4>:
    32a0:	a1 e2       	ldi	r26, 0x21	; 33
    32a2:	1a 2e       	mov	r1, r26
    32a4:	aa 1b       	sub	r26, r26
    32a6:	bb 1b       	sub	r27, r27
    32a8:	fd 01       	movw	r30, r26
    32aa:	0d c0       	rjmp	.+26     	; 0x32c6 <__udivmodsi4_ep>

000032ac <__udivmodsi4_loop>:
    32ac:	aa 1f       	adc	r26, r26
    32ae:	bb 1f       	adc	r27, r27
    32b0:	ee 1f       	adc	r30, r30
    32b2:	ff 1f       	adc	r31, r31
    32b4:	a2 17       	cp	r26, r18
    32b6:	b3 07       	cpc	r27, r19
    32b8:	e4 07       	cpc	r30, r20
    32ba:	f5 07       	cpc	r31, r21
    32bc:	20 f0       	brcs	.+8      	; 0x32c6 <__udivmodsi4_ep>
    32be:	a2 1b       	sub	r26, r18
    32c0:	b3 0b       	sbc	r27, r19
    32c2:	e4 0b       	sbc	r30, r20
    32c4:	f5 0b       	sbc	r31, r21

000032c6 <__udivmodsi4_ep>:
    32c6:	66 1f       	adc	r22, r22
    32c8:	77 1f       	adc	r23, r23
    32ca:	88 1f       	adc	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	1a 94       	dec	r1
    32d0:	69 f7       	brne	.-38     	; 0x32ac <__udivmodsi4_loop>
    32d2:	60 95       	com	r22
    32d4:	70 95       	com	r23
    32d6:	80 95       	com	r24
    32d8:	90 95       	com	r25
    32da:	9b 01       	movw	r18, r22
    32dc:	ac 01       	movw	r20, r24
    32de:	bd 01       	movw	r22, r26
    32e0:	cf 01       	movw	r24, r30
    32e2:	08 95       	ret

000032e4 <__tablejump2__>:
    32e4:	ee 0f       	add	r30, r30
    32e6:	ff 1f       	adc	r31, r31
    32e8:	00 24       	eor	r0, r0
    32ea:	00 1c       	adc	r0, r0
    32ec:	0b be       	out	0x3b, r0	; 59
    32ee:	07 90       	elpm	r0, Z+
    32f0:	f6 91       	elpm	r31, Z
    32f2:	e0 2d       	mov	r30, r0
    32f4:	09 94       	ijmp

000032f6 <malloc>:
    32f6:	0f 93       	push	r16
    32f8:	1f 93       	push	r17
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	82 30       	cpi	r24, 0x02	; 2
    3300:	91 05       	cpc	r25, r1
    3302:	10 f4       	brcc	.+4      	; 0x3308 <malloc+0x12>
    3304:	82 e0       	ldi	r24, 0x02	; 2
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <__flp>
    330c:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <__flp+0x1>
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	a0 e0       	ldi	r26, 0x00	; 0
    3316:	b0 e0       	ldi	r27, 0x00	; 0
    3318:	30 97       	sbiw	r30, 0x00	; 0
    331a:	19 f1       	breq	.+70     	; 0x3362 <malloc+0x6c>
    331c:	40 81       	ld	r20, Z
    331e:	51 81       	ldd	r21, Z+1	; 0x01
    3320:	02 81       	ldd	r16, Z+2	; 0x02
    3322:	13 81       	ldd	r17, Z+3	; 0x03
    3324:	48 17       	cp	r20, r24
    3326:	59 07       	cpc	r21, r25
    3328:	c8 f0       	brcs	.+50     	; 0x335c <malloc+0x66>
    332a:	84 17       	cp	r24, r20
    332c:	95 07       	cpc	r25, r21
    332e:	69 f4       	brne	.+26     	; 0x334a <malloc+0x54>
    3330:	10 97       	sbiw	r26, 0x00	; 0
    3332:	31 f0       	breq	.+12     	; 0x3340 <malloc+0x4a>
    3334:	12 96       	adiw	r26, 0x02	; 2
    3336:	0c 93       	st	X, r16
    3338:	12 97       	sbiw	r26, 0x02	; 2
    333a:	13 96       	adiw	r26, 0x03	; 3
    333c:	1c 93       	st	X, r17
    333e:	27 c0       	rjmp	.+78     	; 0x338e <malloc+0x98>
    3340:	00 93 56 04 	sts	0x0456, r16	; 0x800456 <__flp>
    3344:	10 93 57 04 	sts	0x0457, r17	; 0x800457 <__flp+0x1>
    3348:	22 c0       	rjmp	.+68     	; 0x338e <malloc+0x98>
    334a:	21 15       	cp	r18, r1
    334c:	31 05       	cpc	r19, r1
    334e:	19 f0       	breq	.+6      	; 0x3356 <malloc+0x60>
    3350:	42 17       	cp	r20, r18
    3352:	53 07       	cpc	r21, r19
    3354:	18 f4       	brcc	.+6      	; 0x335c <malloc+0x66>
    3356:	9a 01       	movw	r18, r20
    3358:	bd 01       	movw	r22, r26
    335a:	ef 01       	movw	r28, r30
    335c:	df 01       	movw	r26, r30
    335e:	f8 01       	movw	r30, r16
    3360:	db cf       	rjmp	.-74     	; 0x3318 <malloc+0x22>
    3362:	21 15       	cp	r18, r1
    3364:	31 05       	cpc	r19, r1
    3366:	f9 f0       	breq	.+62     	; 0x33a6 <malloc+0xb0>
    3368:	28 1b       	sub	r18, r24
    336a:	39 0b       	sbc	r19, r25
    336c:	24 30       	cpi	r18, 0x04	; 4
    336e:	31 05       	cpc	r19, r1
    3370:	80 f4       	brcc	.+32     	; 0x3392 <malloc+0x9c>
    3372:	8a 81       	ldd	r24, Y+2	; 0x02
    3374:	9b 81       	ldd	r25, Y+3	; 0x03
    3376:	61 15       	cp	r22, r1
    3378:	71 05       	cpc	r23, r1
    337a:	21 f0       	breq	.+8      	; 0x3384 <malloc+0x8e>
    337c:	fb 01       	movw	r30, r22
    337e:	93 83       	std	Z+3, r25	; 0x03
    3380:	82 83       	std	Z+2, r24	; 0x02
    3382:	04 c0       	rjmp	.+8      	; 0x338c <malloc+0x96>
    3384:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <__flp+0x1>
    3388:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <__flp>
    338c:	fe 01       	movw	r30, r28
    338e:	32 96       	adiw	r30, 0x02	; 2
    3390:	44 c0       	rjmp	.+136    	; 0x341a <malloc+0x124>
    3392:	fe 01       	movw	r30, r28
    3394:	e2 0f       	add	r30, r18
    3396:	f3 1f       	adc	r31, r19
    3398:	81 93       	st	Z+, r24
    339a:	91 93       	st	Z+, r25
    339c:	22 50       	subi	r18, 0x02	; 2
    339e:	31 09       	sbc	r19, r1
    33a0:	39 83       	std	Y+1, r19	; 0x01
    33a2:	28 83       	st	Y, r18
    33a4:	3a c0       	rjmp	.+116    	; 0x341a <malloc+0x124>
    33a6:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <__brkval>
    33aa:	30 91 55 04 	lds	r19, 0x0455	; 0x800455 <__brkval+0x1>
    33ae:	23 2b       	or	r18, r19
    33b0:	41 f4       	brne	.+16     	; 0x33c2 <malloc+0xcc>
    33b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    33b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    33ba:	30 93 55 04 	sts	0x0455, r19	; 0x800455 <__brkval+0x1>
    33be:	20 93 54 04 	sts	0x0454, r18	; 0x800454 <__brkval>
    33c2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    33c6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    33ca:	21 15       	cp	r18, r1
    33cc:	31 05       	cpc	r19, r1
    33ce:	41 f4       	brne	.+16     	; 0x33e0 <malloc+0xea>
    33d0:	2d b7       	in	r18, 0x3d	; 61
    33d2:	3e b7       	in	r19, 0x3e	; 62
    33d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    33d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    33dc:	24 1b       	sub	r18, r20
    33de:	35 0b       	sbc	r19, r21
    33e0:	e0 91 54 04 	lds	r30, 0x0454	; 0x800454 <__brkval>
    33e4:	f0 91 55 04 	lds	r31, 0x0455	; 0x800455 <__brkval+0x1>
    33e8:	e2 17       	cp	r30, r18
    33ea:	f3 07       	cpc	r31, r19
    33ec:	a0 f4       	brcc	.+40     	; 0x3416 <malloc+0x120>
    33ee:	2e 1b       	sub	r18, r30
    33f0:	3f 0b       	sbc	r19, r31
    33f2:	28 17       	cp	r18, r24
    33f4:	39 07       	cpc	r19, r25
    33f6:	78 f0       	brcs	.+30     	; 0x3416 <malloc+0x120>
    33f8:	ac 01       	movw	r20, r24
    33fa:	4e 5f       	subi	r20, 0xFE	; 254
    33fc:	5f 4f       	sbci	r21, 0xFF	; 255
    33fe:	24 17       	cp	r18, r20
    3400:	35 07       	cpc	r19, r21
    3402:	48 f0       	brcs	.+18     	; 0x3416 <malloc+0x120>
    3404:	4e 0f       	add	r20, r30
    3406:	5f 1f       	adc	r21, r31
    3408:	50 93 55 04 	sts	0x0455, r21	; 0x800455 <__brkval+0x1>
    340c:	40 93 54 04 	sts	0x0454, r20	; 0x800454 <__brkval>
    3410:	81 93       	st	Z+, r24
    3412:	91 93       	st	Z+, r25
    3414:	02 c0       	rjmp	.+4      	; 0x341a <malloc+0x124>
    3416:	e0 e0       	ldi	r30, 0x00	; 0
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	cf 01       	movw	r24, r30
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	1f 91       	pop	r17
    3422:	0f 91       	pop	r16
    3424:	08 95       	ret

00003426 <free>:
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	09 f4       	brne	.+2      	; 0x3430 <free+0xa>
    342e:	81 c0       	rjmp	.+258    	; 0x3532 <free+0x10c>
    3430:	fc 01       	movw	r30, r24
    3432:	32 97       	sbiw	r30, 0x02	; 2
    3434:	13 82       	std	Z+3, r1	; 0x03
    3436:	12 82       	std	Z+2, r1	; 0x02
    3438:	a0 91 56 04 	lds	r26, 0x0456	; 0x800456 <__flp>
    343c:	b0 91 57 04 	lds	r27, 0x0457	; 0x800457 <__flp+0x1>
    3440:	10 97       	sbiw	r26, 0x00	; 0
    3442:	81 f4       	brne	.+32     	; 0x3464 <free+0x3e>
    3444:	20 81       	ld	r18, Z
    3446:	31 81       	ldd	r19, Z+1	; 0x01
    3448:	82 0f       	add	r24, r18
    344a:	93 1f       	adc	r25, r19
    344c:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <__brkval>
    3450:	30 91 55 04 	lds	r19, 0x0455	; 0x800455 <__brkval+0x1>
    3454:	28 17       	cp	r18, r24
    3456:	39 07       	cpc	r19, r25
    3458:	51 f5       	brne	.+84     	; 0x34ae <free+0x88>
    345a:	f0 93 55 04 	sts	0x0455, r31	; 0x800455 <__brkval+0x1>
    345e:	e0 93 54 04 	sts	0x0454, r30	; 0x800454 <__brkval>
    3462:	67 c0       	rjmp	.+206    	; 0x3532 <free+0x10c>
    3464:	ed 01       	movw	r28, r26
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	ce 17       	cp	r28, r30
    346c:	df 07       	cpc	r29, r31
    346e:	40 f4       	brcc	.+16     	; 0x3480 <free+0x5a>
    3470:	4a 81       	ldd	r20, Y+2	; 0x02
    3472:	5b 81       	ldd	r21, Y+3	; 0x03
    3474:	9e 01       	movw	r18, r28
    3476:	41 15       	cp	r20, r1
    3478:	51 05       	cpc	r21, r1
    347a:	f1 f0       	breq	.+60     	; 0x34b8 <free+0x92>
    347c:	ea 01       	movw	r28, r20
    347e:	f5 cf       	rjmp	.-22     	; 0x346a <free+0x44>
    3480:	d3 83       	std	Z+3, r29	; 0x03
    3482:	c2 83       	std	Z+2, r28	; 0x02
    3484:	40 81       	ld	r20, Z
    3486:	51 81       	ldd	r21, Z+1	; 0x01
    3488:	84 0f       	add	r24, r20
    348a:	95 1f       	adc	r25, r21
    348c:	c8 17       	cp	r28, r24
    348e:	d9 07       	cpc	r29, r25
    3490:	59 f4       	brne	.+22     	; 0x34a8 <free+0x82>
    3492:	88 81       	ld	r24, Y
    3494:	99 81       	ldd	r25, Y+1	; 0x01
    3496:	84 0f       	add	r24, r20
    3498:	95 1f       	adc	r25, r21
    349a:	02 96       	adiw	r24, 0x02	; 2
    349c:	91 83       	std	Z+1, r25	; 0x01
    349e:	80 83       	st	Z, r24
    34a0:	8a 81       	ldd	r24, Y+2	; 0x02
    34a2:	9b 81       	ldd	r25, Y+3	; 0x03
    34a4:	93 83       	std	Z+3, r25	; 0x03
    34a6:	82 83       	std	Z+2, r24	; 0x02
    34a8:	21 15       	cp	r18, r1
    34aa:	31 05       	cpc	r19, r1
    34ac:	29 f4       	brne	.+10     	; 0x34b8 <free+0x92>
    34ae:	f0 93 57 04 	sts	0x0457, r31	; 0x800457 <__flp+0x1>
    34b2:	e0 93 56 04 	sts	0x0456, r30	; 0x800456 <__flp>
    34b6:	3d c0       	rjmp	.+122    	; 0x3532 <free+0x10c>
    34b8:	e9 01       	movw	r28, r18
    34ba:	fb 83       	std	Y+3, r31	; 0x03
    34bc:	ea 83       	std	Y+2, r30	; 0x02
    34be:	49 91       	ld	r20, Y+
    34c0:	59 91       	ld	r21, Y+
    34c2:	c4 0f       	add	r28, r20
    34c4:	d5 1f       	adc	r29, r21
    34c6:	ec 17       	cp	r30, r28
    34c8:	fd 07       	cpc	r31, r29
    34ca:	61 f4       	brne	.+24     	; 0x34e4 <free+0xbe>
    34cc:	80 81       	ld	r24, Z
    34ce:	91 81       	ldd	r25, Z+1	; 0x01
    34d0:	84 0f       	add	r24, r20
    34d2:	95 1f       	adc	r25, r21
    34d4:	02 96       	adiw	r24, 0x02	; 2
    34d6:	e9 01       	movw	r28, r18
    34d8:	99 83       	std	Y+1, r25	; 0x01
    34da:	88 83       	st	Y, r24
    34dc:	82 81       	ldd	r24, Z+2	; 0x02
    34de:	93 81       	ldd	r25, Z+3	; 0x03
    34e0:	9b 83       	std	Y+3, r25	; 0x03
    34e2:	8a 83       	std	Y+2, r24	; 0x02
    34e4:	e0 e0       	ldi	r30, 0x00	; 0
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	12 96       	adiw	r26, 0x02	; 2
    34ea:	8d 91       	ld	r24, X+
    34ec:	9c 91       	ld	r25, X
    34ee:	13 97       	sbiw	r26, 0x03	; 3
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	19 f0       	breq	.+6      	; 0x34fa <free+0xd4>
    34f4:	fd 01       	movw	r30, r26
    34f6:	dc 01       	movw	r26, r24
    34f8:	f7 cf       	rjmp	.-18     	; 0x34e8 <free+0xc2>
    34fa:	8d 91       	ld	r24, X+
    34fc:	9c 91       	ld	r25, X
    34fe:	11 97       	sbiw	r26, 0x01	; 1
    3500:	9d 01       	movw	r18, r26
    3502:	2e 5f       	subi	r18, 0xFE	; 254
    3504:	3f 4f       	sbci	r19, 0xFF	; 255
    3506:	82 0f       	add	r24, r18
    3508:	93 1f       	adc	r25, r19
    350a:	20 91 54 04 	lds	r18, 0x0454	; 0x800454 <__brkval>
    350e:	30 91 55 04 	lds	r19, 0x0455	; 0x800455 <__brkval+0x1>
    3512:	28 17       	cp	r18, r24
    3514:	39 07       	cpc	r19, r25
    3516:	69 f4       	brne	.+26     	; 0x3532 <free+0x10c>
    3518:	30 97       	sbiw	r30, 0x00	; 0
    351a:	29 f4       	brne	.+10     	; 0x3526 <free+0x100>
    351c:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <__flp+0x1>
    3520:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <__flp>
    3524:	02 c0       	rjmp	.+4      	; 0x352a <free+0x104>
    3526:	13 82       	std	Z+3, r1	; 0x03
    3528:	12 82       	std	Z+2, r1	; 0x02
    352a:	b0 93 55 04 	sts	0x0455, r27	; 0x800455 <__brkval+0x1>
    352e:	a0 93 54 04 	sts	0x0454, r26	; 0x800454 <__brkval>
    3532:	df 91       	pop	r29
    3534:	cf 91       	pop	r28
    3536:	08 95       	ret

00003538 <itoa>:
    3538:	45 32       	cpi	r20, 0x25	; 37
    353a:	51 05       	cpc	r21, r1
    353c:	18 f4       	brcc	.+6      	; 0x3544 <itoa+0xc>
    353e:	42 30       	cpi	r20, 0x02	; 2
    3540:	08 f0       	brcs	.+2      	; 0x3544 <itoa+0xc>
    3542:	04 c0       	rjmp	.+8      	; 0x354c <__itoa_ncheck>
    3544:	fb 01       	movw	r30, r22
    3546:	10 82       	st	Z, r1
    3548:	cb 01       	movw	r24, r22
    354a:	08 95       	ret

0000354c <__itoa_ncheck>:
    354c:	bb 27       	eor	r27, r27
    354e:	4a 30       	cpi	r20, 0x0A	; 10
    3550:	31 f4       	brne	.+12     	; 0x355e <__itoa_ncheck+0x12>
    3552:	99 23       	and	r25, r25
    3554:	22 f4       	brpl	.+8      	; 0x355e <__itoa_ncheck+0x12>
    3556:	bd e2       	ldi	r27, 0x2D	; 45
    3558:	90 95       	com	r25
    355a:	81 95       	neg	r24
    355c:	9f 4f       	sbci	r25, 0xFF	; 255
    355e:	01 c0       	rjmp	.+2      	; 0x3562 <__utoa_common>

00003560 <__utoa_ncheck>:
    3560:	bb 27       	eor	r27, r27

00003562 <__utoa_common>:
    3562:	fb 01       	movw	r30, r22
    3564:	55 27       	eor	r21, r21
    3566:	aa 27       	eor	r26, r26
    3568:	88 0f       	add	r24, r24
    356a:	99 1f       	adc	r25, r25
    356c:	aa 1f       	adc	r26, r26
    356e:	a4 17       	cp	r26, r20
    3570:	10 f0       	brcs	.+4      	; 0x3576 <__utoa_common+0x14>
    3572:	a4 1b       	sub	r26, r20
    3574:	83 95       	inc	r24
    3576:	50 51       	subi	r21, 0x10	; 16
    3578:	b9 f7       	brne	.-18     	; 0x3568 <__utoa_common+0x6>
    357a:	a0 5d       	subi	r26, 0xD0	; 208
    357c:	aa 33       	cpi	r26, 0x3A	; 58
    357e:	08 f0       	brcs	.+2      	; 0x3582 <__utoa_common+0x20>
    3580:	a9 5d       	subi	r26, 0xD9	; 217
    3582:	a1 93       	st	Z+, r26
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	79 f7       	brne	.-34     	; 0x3566 <__utoa_common+0x4>
    3588:	b1 11       	cpse	r27, r1
    358a:	b1 93       	st	Z+, r27
    358c:	11 92       	st	Z+, r1
    358e:	cb 01       	movw	r24, r22
    3590:	00 c0       	rjmp	.+0      	; 0x3592 <strrev>

00003592 <strrev>:
    3592:	dc 01       	movw	r26, r24
    3594:	fc 01       	movw	r30, r24
    3596:	67 2f       	mov	r22, r23
    3598:	71 91       	ld	r23, Z+
    359a:	77 23       	and	r23, r23
    359c:	e1 f7       	brne	.-8      	; 0x3596 <strrev+0x4>
    359e:	32 97       	sbiw	r30, 0x02	; 2
    35a0:	04 c0       	rjmp	.+8      	; 0x35aa <strrev+0x18>
    35a2:	7c 91       	ld	r23, X
    35a4:	6d 93       	st	X+, r22
    35a6:	70 83       	st	Z, r23
    35a8:	62 91       	ld	r22, -Z
    35aa:	ae 17       	cp	r26, r30
    35ac:	bf 07       	cpc	r27, r31
    35ae:	c8 f3       	brcs	.-14     	; 0x35a2 <strrev+0x10>
    35b0:	08 95       	ret

000035b2 <_exit>:
    35b2:	f8 94       	cli

000035b4 <__stop_program>:
    35b4:	ff cf       	rjmp	.-2      	; 0x35b4 <__stop_program>
